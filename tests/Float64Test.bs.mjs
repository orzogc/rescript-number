// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.bs.mjs";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var name = "Float64";

function randomValue() {
  return TestUtils.randomFloat(Js_int.min * 2.0, Js_int.max * 2.0);
}

function randomInt32() {
  return TestUtils.randomInt(Js_int.min, Js_int.max);
}

function randomLargerInt() {
  return Math.floor(TestUtils.randomFloat(Js_int.max, TestUtils.maxSafeInteger));
}

function randomSmallerInt() {
  return Math.floor(TestUtils.randomFloat(TestUtils.minSafeInteger, Js_int.min));
}

function randomFloatInInt32Range() {
  return TestUtils.randomFloat(Js_int.min, Js_int.max);
}

Ava("test " + name + " from int", (function (t) {
        var testFromInt = function (i) {
          var n = $$Number.Float64.fromIntExn(i);
          t.deepEqual($$Number.Float64.fromInt(i), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Float64.fromIntExn(i), n, undefined);
          t.deepEqual($$Number.Float64.fromIntClamped(i), n, undefined);
          t.deepEqual($$Number.Float64.fromIntUnsafe(i), n, undefined);
        };
        testFromInt(0);
        testFromInt(1);
        testFromInt(Js_int.min);
        testFromInt(Js_int.min + 1 | 0);
        testFromInt(Js_int.max);
        testFromInt(Js_int.max - 1 | 0);
        TestUtils.loop100Fn(function () {
              testFromInt(TestUtils.randomInt(Js_int.min, Js_int.max));
            });
      }));

Ava("test " + name + " to int", (function (t) {
        var testInRange = function (i) {
          var n = $$Number.Float64.fromIntExn(i);
          t.deepEqual($$Number.Float64.toInt(n), i, undefined);
          t.deepEqual($$Number.Float64.toIntExn(n), i, undefined);
          t.deepEqual($$Number.Float64.toIntClamped(n), i, undefined);
          t.deepEqual($$Number.Float64.toIntUnsafe(n), i, undefined);
        };
        testInRange(0);
        testInRange(1);
        testInRange(Js_int.min);
        testInRange(Js_int.min + 1 | 0);
        testInRange(Js_int.max);
        testInRange(Js_int.max - 1 | 0);
        TestUtils.loop100Fn(function () {
              testInRange(TestUtils.randomInt(Js_int.min, Js_int.max));
            });
        var testOutOfRange = function (f, value) {
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toInt(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Float64.toIntExn(n);
                }));
          t.deepEqual($$Number.Float64.toIntClamped(n), value, undefined);
        };
        testOutOfRange(Js_int.min - 1.0, Js_int.min);
        testOutOfRange(Js_int.max + 1.0, Js_int.max);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomSmallerInt(undefined), Js_int.min);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(undefined), Js_int.max);
            });
        var testIsNotInteger = function (f, value) {
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toInt(n), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.toIntExn(n);
                }));
          t.deepEqual($$Number.Float64.toIntClamped(n), value, undefined);
        };
        testIsNotInteger(12345678.9, 12345678);
        testIsNotInteger(0.1, 0);
        testIsNotInteger(1.5, 1);
        testIsNotInteger(-0.1, 0);
        testIsNotInteger(-1.5, -1);
        testIsNotInteger(Js_int.min - 0.5, Js_int.min);
        testIsNotInteger(Js_int.max + 0.5, Js_int.max);
        testIsNotInteger(PervasivesU.neg_infinity, Js_int.min);
        testIsNotInteger(PervasivesU.infinity, Js_int.max);
        TestUtils.loop100Fn(function () {
              var f = TestUtils.randomFloat(Js_int.min, Js_int.max);
              if (!TestUtils.isInteger(f)) {
                return testIsNotInteger(f, Math.trunc(f));
              }
              
            });
      }));

Ava("test " + name + " from float", (function (t) {
        var testNotNaN = function (f) {
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.fromFloat(f), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Float64.fromFloatExn(f), n, undefined);
          t.deepEqual($$Number.Float64.fromFloatClamped(f), n, undefined);
          t.deepEqual($$Number.Float64.fromFloatUnsafe(f), n, undefined);
        };
        testNotNaN(0.0);
        testNotNaN(-0.0);
        testNotNaN(1.0);
        testNotNaN(12345678.9);
        testNotNaN(Js_int.min);
        testNotNaN(Js_int.max);
        testNotNaN(PervasivesU.neg_infinity);
        testNotNaN(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testNotNaN(randomValue(undefined));
            });
        t.deepEqual($$Number.Float64.fromFloat(Number.NaN), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.fromFloatExn(Number.NaN);
              }));
        t.deepEqual($$Number.Float64.fromFloatClamped(Number.NaN), $$Number.Float64.zero, undefined);
      }));

Ava("test " + name + " to float", (function (t) {
        var testToFloat = function (f) {
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toFloat(n), f, undefined);
        };
        testToFloat(0.0);
        testToFloat(-0.0);
        testToFloat(1.0);
        testToFloat(12345678.9);
        testToFloat(Js_int.min);
        testToFloat(Js_int.max);
        testToFloat(PervasivesU.neg_infinity);
        testToFloat(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testToFloat(randomValue(undefined));
            });
      }));

Ava("test " + name + " from string", (function (t) {
        var testNotNaN = function (f, s) {
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.fromString(s), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Float64.fromStringExn(s), n, undefined);
        };
        testNotNaN(0.0, "0");
        testNotNaN(-0.0, "-0");
        testNotNaN(1.0, "1");
        testNotNaN(12345678.9, String(12345678.9));
        testNotNaN(Js_int.min, String(Js_int.min));
        testNotNaN(Js_int.max, String(Js_int.max));
        testNotNaN(PervasivesU.neg_infinity, String(PervasivesU.neg_infinity));
        testNotNaN(PervasivesU.infinity, String(PervasivesU.infinity));
        TestUtils.loop100Fn(function () {
              var n = randomValue(undefined);
              testNotNaN(n, String(n));
            });
        var testIsNotFloat = function (s) {
          t.deepEqual($$Number.Float64.fromString(s), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.fromStringExn(s);
                }));
        };
        testIsNotFloat("NaN");
        testIsNotFloat("foo");
        testIsNotFloat("b1");
      }));

Ava("test " + name + " to string", (function (t) {
        var testFn = function (fn) {
          fn(0.0);
          fn(-0.0);
          fn(1.0);
          fn(12345678.9);
          fn(Js_int.min);
          fn(Js_int.max);
          fn(PervasivesU.neg_infinity);
          fn(PervasivesU.infinity);
          TestUtils.loop100Fn(function () {
                fn(randomValue(undefined));
              });
        };
        var testToString = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Float64.toString($$Number.Float64.fromFloatExn(f)), s, undefined);
        };
        testFn(testToString);
        var testToExponential = function (f) {
          var s = f.toExponential();
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toExponential(n), s, undefined);
          for(var digits = 0; digits <= 100; ++digits){
            var s$1 = f.toExponential(digits);
            t.deepEqual($$Number.Float64.toExponentialWithPrecisionExn(n, digits), s$1, undefined);
          }
          if (f !== PervasivesU.neg_infinity && f !== PervasivesU.infinity) {
            t.throws((function () {
                    return $$Number.Float64.toExponentialWithPrecisionExn(n, -1);
                  }), undefined, undefined);
            t.throws((function () {
                    return $$Number.Float64.toExponentialWithPrecisionExn(n, 101);
                  }), undefined, undefined);
            return ;
          }
          
        };
        testFn(testToExponential);
        var testToPrecision = function (f) {
          var s = f.toPrecision();
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toPrecision(n), s, undefined);
          for(var digits = 1; digits <= 100; ++digits){
            var s$1 = f.toPrecision(digits);
            t.deepEqual($$Number.Float64.toPrecisionWithPrecisionExn(n, digits), s$1, undefined);
          }
          if (f !== PervasivesU.neg_infinity && f !== PervasivesU.infinity) {
            t.throws((function () {
                    return $$Number.Float64.toPrecisionWithPrecisionExn(n, 0);
                  }), undefined, undefined);
            t.throws((function () {
                    return $$Number.Float64.toPrecisionWithPrecisionExn(n, 101);
                  }), undefined, undefined);
            return ;
          }
          
        };
        testFn(testToPrecision);
        var testToFixed = function (f) {
          var s = f.toFixed();
          var n = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.toFixed(n), s, undefined);
          for(var digits = 0; digits <= 100; ++digits){
            var s$1 = f.toFixed(digits);
            t.deepEqual($$Number.Float64.toFixedWithPrecisionExn(n, digits), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Float64.toFixedWithPrecisionExn(n, -1);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Float64.toFixedWithPrecisionExn(n, 101);
                }), undefined, undefined);
        };
        testFn(testToFixed);
      }));

Ava("test " + name + " zero", (function (t) {
        t.deepEqual($$Number.Float64.zero, $$Number.Float64.fromIntExn(0), undefined);
        t.deepEqual($$Number.Float64.zero, $$Number.Float64.fromFloatExn(0.0), undefined);
        t.notDeepEqual($$Number.Float64.zero, $$Number.Float64.fromFloatExn(-0.0), undefined);
        t.true($$Number.Float64.eq($$Number.Float64.zero, $$Number.Float64.fromFloatExn(0.0)), undefined);
      }));

Ava("test " + name + " one", (function (t) {
        t.deepEqual($$Number.Float64.one, $$Number.Float64.fromIntExn(1), undefined);
        t.deepEqual($$Number.Float64.one, $$Number.Float64.fromFloatExn(1.0), undefined);
      }));

Ava("test " + name + " range", (function (t) {
        t.deepEqual($$Number.Float64.minValue, $$Number.Float64.fromFloatExn(PervasivesU.neg_infinity), undefined);
        t.deepEqual($$Number.Float64.maxValue, $$Number.Float64.fromFloatExn(PervasivesU.infinity), undefined);
      }));

Ava("test " + name + " comparison", (function (t) {
        var testCompare = function (less, greater) {
          var less$1 = $$Number.Float64.fromFloatExn(less);
          var greater$1 = $$Number.Float64.fromFloatExn(greater);
          var value = $$Number.Float64.fromFloatExn(12345678.9);
          var minValue = $$Number.Float64.fromFloatExn(PervasivesU.neg_infinity);
          var maxValue = $$Number.Float64.fromFloatExn(PervasivesU.infinity);
          t.deepEqual($$Number.Float64.compare(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Float64.compare(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Float64.compare(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Float64.compare(greater$1, greater$1), 0, undefined);
          t.deepEqual($$Number.Float64.compareExn(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Float64.compareExn(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Float64.compareExn(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Float64.compareExn(greater$1, greater$1), 0, undefined);
          t.true($$Number.Float64.eq(less$1, less$1), undefined);
          t.true($$Number.Float64.eq(greater$1, greater$1), undefined);
          t.false($$Number.Float64.eq(less$1, greater$1), undefined);
          t.false($$Number.Float64.eq(greater$1, less$1), undefined);
          t.true($$Number.Float64.ne(less$1, greater$1), undefined);
          t.true($$Number.Float64.ne(greater$1, less$1), undefined);
          t.false($$Number.Float64.ne(less$1, less$1), undefined);
          t.false($$Number.Float64.ne(greater$1, greater$1), undefined);
          t.true($$Number.Float64.lt(less$1, greater$1), undefined);
          t.false($$Number.Float64.lt(greater$1, less$1), undefined);
          t.false($$Number.Float64.lt(less$1, less$1), undefined);
          t.false($$Number.Float64.lt(greater$1, greater$1), undefined);
          t.true($$Number.Float64.le(less$1, greater$1), undefined);
          t.false($$Number.Float64.le(greater$1, less$1), undefined);
          t.true($$Number.Float64.le(less$1, less$1), undefined);
          t.true($$Number.Float64.le(greater$1, greater$1), undefined);
          t.true($$Number.Float64.gt(greater$1, less$1), undefined);
          t.false($$Number.Float64.gt(less$1, greater$1), undefined);
          t.false($$Number.Float64.gt(less$1, less$1), undefined);
          t.false($$Number.Float64.gt(greater$1, greater$1), undefined);
          t.true($$Number.Float64.ge(greater$1, less$1), undefined);
          t.false($$Number.Float64.ge(less$1, greater$1), undefined);
          t.true($$Number.Float64.ge(less$1, less$1), undefined);
          t.true($$Number.Float64.ge(greater$1, greater$1), undefined);
          t.deepEqual($$Number.Float64.min(less$1, greater$1), less$1, undefined);
          t.deepEqual($$Number.Float64.min(greater$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Float64.min(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Float64.min(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Float64.minMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Float64.minMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Float64.minMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Float64.minMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(minValue), undefined);
          t.deepEqual($$Number.Float64.minManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyExn([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyExn([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Float64.minManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyUnsafe([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyUnsafe([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Float64.minManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Float64.max(less$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Float64.max(greater$1, less$1), greater$1, undefined);
          t.deepEqual($$Number.Float64.max(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Float64.max(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Float64.maxMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Float64.maxMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Float64.maxMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Float64.maxMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(maxValue), undefined);
          t.deepEqual($$Number.Float64.maxManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Float64.maxManyExn([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Float64.maxManyExn([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Float64.maxManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), maxValue, undefined);
          t.deepEqual($$Number.Float64.maxManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Float64.maxManyUnsafe([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Float64.maxManyUnsafe([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Float64.maxManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), maxValue, undefined);
        };
        testCompare(-56248.7954, 87934.1968);
        TestUtils.loop100Fn(function () {
              var less = randomValue(undefined);
              var greater = TestUtils.randomFloat(less + 1.0, Js_int.max * 3.0);
              testCompare(less, greater);
            });
        var zero = $$Number.Float64.fromFloatExn(0.0);
        var negZero = $$Number.Float64.fromFloatExn(-0.0);
        t.true($$Number.Float64.eq(zero, negZero), undefined);
        t.true($$Number.Float64.le(zero, negZero), undefined);
        t.true($$Number.Float64.ge(zero, negZero), undefined);
        t.false($$Number.Float64.lt(zero, negZero), undefined);
        t.false($$Number.Float64.gt(zero, negZero), undefined);
        t.deepEqual($$Number.Float64.minMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.minManyExn([]);
              }));
        t.deepEqual($$Number.Float64.maxMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.maxManyExn([]);
              }));
      }));

Ava("test " + name + " addition", (function (t) {
        var testNotNaN = function (a, b) {
          if (TestUtils.$$isFinite(a)) {
            var negA = $$Number.Float64.fromFloatExn(- a);
            var a$1 = $$Number.Float64.fromFloatExn(a);
            t.deepEqual($$Number.Float64.add(a$1, negA), Caml_option.some($$Number.Float64.zero), undefined);
            t.deepEqual($$Number.Float64.add(a$1, negA), $$Number.Float64.add(negA, a$1), undefined);
            t.deepEqual($$Number.Float64.addExn(a$1, negA), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addExn(a$1, negA), $$Number.Float64.addExn(negA, a$1), undefined);
            t.deepEqual($$Number.Float64.addClamped(a$1, negA), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addClamped(a$1, negA), $$Number.Float64.addClamped(negA, a$1), undefined);
            t.deepEqual($$Number.Float64.addUnsafe(a$1, negA), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addUnsafe(a$1, negA), $$Number.Float64.addUnsafe(negA, a$1), undefined);
          }
          if (TestUtils.$$isFinite(b)) {
            var negB = $$Number.Float64.fromFloatExn(- b);
            var b$1 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.add(b$1, negB), Caml_option.some($$Number.Float64.zero), undefined);
            t.deepEqual($$Number.Float64.add(b$1, negB), $$Number.Float64.add(negB, b$1), undefined);
            t.deepEqual($$Number.Float64.addExn(b$1, negB), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addExn(b$1, negB), $$Number.Float64.addExn(negB, b$1), undefined);
            t.deepEqual($$Number.Float64.addClamped(b$1, negB), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addClamped(b$1, negB), $$Number.Float64.addClamped(negB, b$1), undefined);
            t.deepEqual($$Number.Float64.addUnsafe(b$1, negB), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.addUnsafe(b$1, negB), $$Number.Float64.addUnsafe(negB, b$1), undefined);
          }
          var result = $$Number.Float64.fromFloatExn(a + b);
          var a$2 = $$Number.Float64.fromFloatExn(a);
          var b$2 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.add(a$2, b$2), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Float64.add(a$2, b$2), $$Number.Float64.add(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.addExn(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.addExn(a$2, b$2), $$Number.Float64.addExn(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.addClamped(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.addClamped(a$2, b$2), $$Number.Float64.addClamped(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.addUnsafe(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.addUnsafe(a$2, b$2), $$Number.Float64.addUnsafe(b$2, a$2), undefined);
          var result$1 = $$Number.Float64.fromFloatExn($$Number.Float64.toFloat(a$2) + 0.0);
          t.deepEqual($$Number.Float64.add(a$2, $$Number.Float64.zero), Caml_option.some(result$1), undefined);
          t.deepEqual($$Number.Float64.add(a$2, $$Number.Float64.zero), $$Number.Float64.add($$Number.Float64.zero, a$2), undefined);
          t.deepEqual($$Number.Float64.addExn(a$2, $$Number.Float64.zero), result$1, undefined);
          t.deepEqual($$Number.Float64.addExn(a$2, $$Number.Float64.zero), $$Number.Float64.addExn($$Number.Float64.zero, a$2), undefined);
          t.deepEqual($$Number.Float64.addClamped(a$2, $$Number.Float64.zero), result$1, undefined);
          t.deepEqual($$Number.Float64.addClamped(a$2, $$Number.Float64.zero), $$Number.Float64.addClamped($$Number.Float64.zero, a$2), undefined);
          t.deepEqual($$Number.Float64.addUnsafe(a$2, $$Number.Float64.zero), result$1, undefined);
          t.deepEqual($$Number.Float64.addUnsafe(a$2, $$Number.Float64.zero), $$Number.Float64.addUnsafe($$Number.Float64.zero, a$2), undefined);
          var result$2 = $$Number.Float64.fromFloatExn($$Number.Float64.toFloat(b$2) + 0.0);
          t.deepEqual($$Number.Float64.add(b$2, $$Number.Float64.zero), Caml_option.some(result$2), undefined);
          t.deepEqual($$Number.Float64.add(b$2, $$Number.Float64.zero), $$Number.Float64.add($$Number.Float64.zero, b$2), undefined);
          t.deepEqual($$Number.Float64.addExn(b$2, $$Number.Float64.zero), result$2, undefined);
          t.deepEqual($$Number.Float64.addExn(b$2, $$Number.Float64.zero), $$Number.Float64.addExn($$Number.Float64.zero, b$2), undefined);
          t.deepEqual($$Number.Float64.addClamped(b$2, $$Number.Float64.zero), result$2, undefined);
          t.deepEqual($$Number.Float64.addClamped(b$2, $$Number.Float64.zero), $$Number.Float64.addClamped($$Number.Float64.zero, b$2), undefined);
          t.deepEqual($$Number.Float64.addUnsafe(b$2, $$Number.Float64.zero), result$2, undefined);
          t.deepEqual($$Number.Float64.addUnsafe(b$2, $$Number.Float64.zero), $$Number.Float64.addUnsafe($$Number.Float64.zero, b$2), undefined);
        };
        testNotNaN(0.0, -0.0);
        testNotNaN(-56248.7954, 87934.1968);
        testNotNaN(Js_int.min, -1.0);
        testNotNaN(Js_int.max, 1.0);
        testNotNaN(PervasivesU.neg_infinity, 0.0);
        testNotNaN(PervasivesU.neg_infinity, -0.0);
        testNotNaN(PervasivesU.neg_infinity, 1.0);
        testNotNaN(PervasivesU.neg_infinity, -1.0);
        testNotNaN(PervasivesU.neg_infinity, PervasivesU.neg_infinity);
        testNotNaN(PervasivesU.infinity, 0.0);
        testNotNaN(PervasivesU.infinity, -0.0);
        testNotNaN(PervasivesU.infinity, 1.0);
        testNotNaN(PervasivesU.infinity, -1.0);
        testNotNaN(PervasivesU.infinity, PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN(a, b);
            });
        var a = PervasivesU.infinity;
        var b = PervasivesU.neg_infinity;
        var a$1 = $$Number.Float64.fromFloatExn(a);
        var b$1 = $$Number.Float64.fromFloatExn(b);
        t.deepEqual($$Number.Float64.add(a$1, b$1), undefined, undefined);
        t.deepEqual($$Number.Float64.add(b$1, a$1), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.addExn(a$1, b$1);
              }));
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.addExn(b$1, a$1);
              }));
        t.deepEqual($$Number.Float64.addClamped(a$1, b$1), $$Number.Float64.zero, undefined);
        t.deepEqual($$Number.Float64.addClamped(b$1, a$1), $$Number.Float64.zero, undefined);
      }));

Ava("test " + name + " subtraction", (function (t) {
        var testNotNaN = function (a, b) {
          if (TestUtils.$$isFinite(a)) {
            var a$1 = $$Number.Float64.fromFloatExn(a);
            t.deepEqual($$Number.Float64.sub(a$1, a$1), Caml_option.some($$Number.Float64.zero), undefined);
            t.deepEqual($$Number.Float64.subExn(a$1, a$1), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.subClamped(a$1, a$1), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.subUnsafe(a$1, a$1), $$Number.Float64.zero, undefined);
          }
          if (TestUtils.$$isFinite(b)) {
            var b$1 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.sub(b$1, b$1), Caml_option.some($$Number.Float64.zero), undefined);
            t.deepEqual($$Number.Float64.subExn(b$1, b$1), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.subClamped(b$1, b$1), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.subUnsafe(b$1, b$1), $$Number.Float64.zero, undefined);
          }
          var result = $$Number.Float64.fromFloatExn(a - b);
          var a$2 = $$Number.Float64.fromFloatExn(a);
          var b$2 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.sub(a$2, b$2), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Float64.subExn(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.subClamped(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.subUnsafe(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Float64.sub(a$2, $$Number.Float64.zero), Caml_option.some(a$2), undefined);
          t.deepEqual($$Number.Float64.subExn(a$2, $$Number.Float64.zero), a$2, undefined);
          t.deepEqual($$Number.Float64.subClamped(a$2, $$Number.Float64.zero), a$2, undefined);
          t.deepEqual($$Number.Float64.subUnsafe(a$2, $$Number.Float64.zero), a$2, undefined);
          t.deepEqual($$Number.Float64.sub(b$2, $$Number.Float64.zero), Caml_option.some(b$2), undefined);
          t.deepEqual($$Number.Float64.subExn(b$2, $$Number.Float64.zero), b$2, undefined);
          t.deepEqual($$Number.Float64.subClamped(b$2, $$Number.Float64.zero), b$2, undefined);
          t.deepEqual($$Number.Float64.subUnsafe(b$2, $$Number.Float64.zero), b$2, undefined);
        };
        testNotNaN(0.0, -0.0);
        testNotNaN(-56248.7954, 87934.1968);
        testNotNaN(87934.1968, -56248.7954);
        testNotNaN(Js_int.min, 1.0);
        testNotNaN(Js_int.max, -1.0);
        testNotNaN(PervasivesU.neg_infinity, 0.0);
        testNotNaN(PervasivesU.neg_infinity, -0.0);
        testNotNaN(PervasivesU.neg_infinity, 1.0);
        testNotNaN(PervasivesU.neg_infinity, -1.0);
        testNotNaN(PervasivesU.neg_infinity, 12345678.9);
        testNotNaN(PervasivesU.infinity, 0.0);
        testNotNaN(PervasivesU.infinity, -0.0);
        testNotNaN(PervasivesU.infinity, 1.0);
        testNotNaN(PervasivesU.infinity, -1.0);
        testNotNaN(PervasivesU.infinity, 12345678.9);
        testNotNaN(PervasivesU.neg_infinity, PervasivesU.infinity);
        testNotNaN(PervasivesU.infinity, PervasivesU.neg_infinity);
        testNotNaN(0.0, PervasivesU.neg_infinity);
        testNotNaN(-0.0, PervasivesU.neg_infinity);
        testNotNaN(1.0, PervasivesU.neg_infinity);
        testNotNaN(-1.0, PervasivesU.neg_infinity);
        testNotNaN(12345678.9, PervasivesU.neg_infinity);
        testNotNaN(0.0, PervasivesU.infinity);
        testNotNaN(-0.0, PervasivesU.infinity);
        testNotNaN(1.0, PervasivesU.infinity);
        testNotNaN(-1.0, PervasivesU.infinity);
        testNotNaN(12345678.9, PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN(a, b);
            });
        var testNaN = function (a, b) {
          var a$1 = $$Number.Float64.fromFloatExn(a);
          var b$1 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.sub(a$1, b$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.subExn(a$1, b$1);
                }));
          t.deepEqual($$Number.Float64.subClamped(a$1, b$1), $$Number.Float64.zero, undefined);
        };
        testNaN(PervasivesU.neg_infinity, PervasivesU.neg_infinity);
        testNaN(PervasivesU.infinity, PervasivesU.infinity);
      }));

Ava("test " + name + " multiplication", (function (t) {
        var testNotNaN = function (a, b) {
          if (TestUtils.$$isFinite(a)) {
            var result = $$Number.Float64.fromFloatExn(a * 0.0);
            var a$1 = $$Number.Float64.fromFloatExn(a);
            t.deepEqual($$Number.Float64.mul(a$1, $$Number.Float64.zero), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Float64.mul(a$1, $$Number.Float64.zero), $$Number.Float64.mul($$Number.Float64.zero, a$1), undefined);
            t.deepEqual($$Number.Float64.mulExn(a$1, $$Number.Float64.zero), result, undefined);
            t.deepEqual($$Number.Float64.mulExn(a$1, $$Number.Float64.zero), $$Number.Float64.mulExn($$Number.Float64.zero, a$1), undefined);
            t.deepEqual($$Number.Float64.mulClamped(a$1, $$Number.Float64.zero), result, undefined);
            t.deepEqual($$Number.Float64.mulClamped(a$1, $$Number.Float64.zero), $$Number.Float64.mulClamped($$Number.Float64.zero, a$1), undefined);
            t.deepEqual($$Number.Float64.mulUnsafe(a$1, $$Number.Float64.zero), result, undefined);
            t.deepEqual($$Number.Float64.mulUnsafe(a$1, $$Number.Float64.zero), $$Number.Float64.mulUnsafe($$Number.Float64.zero, a$1), undefined);
          }
          if (TestUtils.$$isFinite(b)) {
            var result$1 = $$Number.Float64.fromFloatExn(b * 0.0);
            var b$1 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.mul(b$1, $$Number.Float64.zero), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Float64.mul(b$1, $$Number.Float64.zero), $$Number.Float64.mul($$Number.Float64.zero, b$1), undefined);
            t.deepEqual($$Number.Float64.mulExn(b$1, $$Number.Float64.zero), result$1, undefined);
            t.deepEqual($$Number.Float64.mulExn(b$1, $$Number.Float64.zero), $$Number.Float64.mulExn($$Number.Float64.zero, b$1), undefined);
            t.deepEqual($$Number.Float64.mulClamped(b$1, $$Number.Float64.zero), result$1, undefined);
            t.deepEqual($$Number.Float64.mulClamped(b$1, $$Number.Float64.zero), $$Number.Float64.mulClamped($$Number.Float64.zero, b$1), undefined);
            t.deepEqual($$Number.Float64.mulUnsafe(b$1, $$Number.Float64.zero), result$1, undefined);
            t.deepEqual($$Number.Float64.mulUnsafe(b$1, $$Number.Float64.zero), $$Number.Float64.mulUnsafe($$Number.Float64.zero, b$1), undefined);
          }
          var result$2 = $$Number.Float64.fromFloatExn(a * b);
          var a$2 = $$Number.Float64.fromFloatExn(a);
          var b$2 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.mul(a$2, b$2), Caml_option.some(result$2), undefined);
          t.deepEqual($$Number.Float64.mul(a$2, b$2), $$Number.Float64.mul(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.mulExn(a$2, b$2), result$2, undefined);
          t.deepEqual($$Number.Float64.mulExn(a$2, b$2), $$Number.Float64.mulExn(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.mulClamped(a$2, b$2), result$2, undefined);
          t.deepEqual($$Number.Float64.mulClamped(a$2, b$2), $$Number.Float64.mulClamped(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(a$2, b$2), result$2, undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(a$2, b$2), $$Number.Float64.mulUnsafe(b$2, a$2), undefined);
          t.deepEqual($$Number.Float64.mul(a$2, $$Number.Float64.one), Caml_option.some(a$2), undefined);
          t.deepEqual($$Number.Float64.mul(a$2, $$Number.Float64.one), $$Number.Float64.mul($$Number.Float64.one, a$2), undefined);
          t.deepEqual($$Number.Float64.mulExn(a$2, $$Number.Float64.one), a$2, undefined);
          t.deepEqual($$Number.Float64.mulExn(a$2, $$Number.Float64.one), $$Number.Float64.mulExn($$Number.Float64.one, a$2), undefined);
          t.deepEqual($$Number.Float64.mulClamped(a$2, $$Number.Float64.one), a$2, undefined);
          t.deepEqual($$Number.Float64.mulClamped(a$2, $$Number.Float64.one), $$Number.Float64.mulClamped($$Number.Float64.one, a$2), undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(a$2, $$Number.Float64.one), a$2, undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(a$2, $$Number.Float64.one), $$Number.Float64.mulUnsafe($$Number.Float64.one, a$2), undefined);
          t.deepEqual($$Number.Float64.mul(b$2, $$Number.Float64.one), Caml_option.some(b$2), undefined);
          t.deepEqual($$Number.Float64.mul(b$2, $$Number.Float64.one), $$Number.Float64.mul($$Number.Float64.one, b$2), undefined);
          t.deepEqual($$Number.Float64.mulExn(b$2, $$Number.Float64.one), b$2, undefined);
          t.deepEqual($$Number.Float64.mulExn(b$2, $$Number.Float64.one), $$Number.Float64.mulExn($$Number.Float64.one, b$2), undefined);
          t.deepEqual($$Number.Float64.mulClamped(b$2, $$Number.Float64.one), b$2, undefined);
          t.deepEqual($$Number.Float64.mulClamped(b$2, $$Number.Float64.one), $$Number.Float64.mulClamped($$Number.Float64.one, b$2), undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(b$2, $$Number.Float64.one), b$2, undefined);
          t.deepEqual($$Number.Float64.mulUnsafe(b$2, $$Number.Float64.one), $$Number.Float64.mulUnsafe($$Number.Float64.one, b$2), undefined);
        };
        testNotNaN(0.0, -1.0);
        testNotNaN(-0.0, 1.0);
        testNotNaN(-56248.7954, 87934.1968);
        testNotNaN(Js_int.min, 12345678.9);
        testNotNaN(Js_int.max, 12345678.9);
        testNotNaN(PervasivesU.neg_infinity, 12345678.9);
        testNotNaN(PervasivesU.neg_infinity, - 12345678.9);
        testNotNaN(PervasivesU.infinity, 12345678.9);
        testNotNaN(PervasivesU.infinity, - 12345678.9);
        testNotNaN(PervasivesU.neg_infinity, PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN(a, b);
            });
        var testNaN = function (a, b) {
          var a$1 = $$Number.Float64.fromFloatExn(a);
          var b$1 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.mul(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Float64.mul(b$1, a$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.mulExn(a$1, b$1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.mulExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Float64.mulClamped(a$1, b$1), $$Number.Float64.zero, undefined);
          t.deepEqual($$Number.Float64.mulClamped(b$1, a$1), $$Number.Float64.zero, undefined);
        };
        testNaN(PervasivesU.neg_infinity, 0.0);
        testNaN(PervasivesU.infinity, 0.0);
      }));

Ava("test " + name + " division", (function (t) {
        var testNotNaN = function (a, b) {
          if (a !== 0.0) {
            var result = $$Number.Float64.fromFloatExn(b / a);
            var a$1 = $$Number.Float64.fromFloatExn(a);
            var b$1 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.div(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Float64.divExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Float64.divUnsafe(b$1, a$1), result, undefined);
            var result$1 = $$Number.Float64.fromFloatExn(0.0 / $$Number.Float64.toFloat(a$1));
            t.deepEqual($$Number.Float64.div($$Number.Float64.zero, a$1), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Float64.divExn($$Number.Float64.zero, a$1), result$1, undefined);
            t.deepEqual($$Number.Float64.divUnsafe($$Number.Float64.zero, a$1), result$1, undefined);
          }
          if (b !== 0.0) {
            var result$2 = $$Number.Float64.fromFloatExn(a / b);
            var a$2 = $$Number.Float64.fromFloatExn(a);
            var b$2 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.div(a$2, b$2), Caml_option.some(result$2), undefined);
            t.deepEqual($$Number.Float64.divExn(a$2, b$2), result$2, undefined);
            t.deepEqual($$Number.Float64.divUnsafe(a$2, b$2), result$2, undefined);
            var result$3 = $$Number.Float64.fromFloatExn(0.0 / $$Number.Float64.toFloat(b$2));
            t.deepEqual($$Number.Float64.div($$Number.Float64.zero, b$2), Caml_option.some(result$3), undefined);
            t.deepEqual($$Number.Float64.divExn($$Number.Float64.zero, b$2), result$3, undefined);
            t.deepEqual($$Number.Float64.divUnsafe($$Number.Float64.zero, b$2), result$3, undefined);
          }
          var negA = $$Number.Float64.fromFloatExn(- a);
          var negB = $$Number.Float64.fromFloatExn(- b);
          var a$3 = $$Number.Float64.fromFloatExn(a);
          var b$3 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.div(a$3, $$Number.Float64.one), Caml_option.some(a$3), undefined);
          t.deepEqual($$Number.Float64.divExn(a$3, $$Number.Float64.one), a$3, undefined);
          t.deepEqual($$Number.Float64.divUnsafe(a$3, $$Number.Float64.one), a$3, undefined);
          t.deepEqual($$Number.Float64.div(b$3, $$Number.Float64.one), Caml_option.some(b$3), undefined);
          t.deepEqual($$Number.Float64.divExn(b$3, $$Number.Float64.one), b$3, undefined);
          t.deepEqual($$Number.Float64.divUnsafe(b$3, $$Number.Float64.one), b$3, undefined);
          var negOne = $$Number.Float64.fromIntExn(-1);
          t.deepEqual($$Number.Float64.div(a$3, negOne), Caml_option.some(negA), undefined);
          t.deepEqual($$Number.Float64.divExn(a$3, negOne), negA, undefined);
          t.deepEqual($$Number.Float64.divUnsafe(a$3, negOne), negA, undefined);
          t.deepEqual($$Number.Float64.div(b$3, negOne), Caml_option.some(negB), undefined);
          t.deepEqual($$Number.Float64.divExn(b$3, negOne), negB, undefined);
          t.deepEqual($$Number.Float64.divUnsafe(b$3, negOne), negB, undefined);
        };
        testNotNaN(-56248.7954, 87934.1968);
        testNotNaN(Js_int.min, Js_int.max);
        testNotNaN(Js_int.min, -56248.7954);
        testNotNaN(Js_int.max, 87934.1968);
        testNotNaN(PervasivesU.neg_infinity, -56248.7954);
        testNotNaN(PervasivesU.neg_infinity, 87934.1968);
        testNotNaN(PervasivesU.infinity, -56248.7954);
        testNotNaN(PervasivesU.infinity, 87934.1968);
        var testDividedByZero = function (f) {
          var a = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.div(a, $$Number.Float64.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Float64.divExn(a, $$Number.Float64.zero);
                }));
          var negZero = $$Number.Float64.fromFloatExn(-0.0);
          t.deepEqual($$Number.Float64.div(a, negZero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Float64.divExn(a, negZero);
                }));
        };
        testDividedByZero(0.0);
        testDividedByZero(-0.0);
        testDividedByZero(1.0);
        testDividedByZero(-56248.7954);
        testDividedByZero(87934.1968);
        testDividedByZero(12345678.9);
        testDividedByZero(Js_int.min);
        testDividedByZero(Js_int.max);
        testDividedByZero(PervasivesU.neg_infinity);
        testDividedByZero(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN(a, b);
              testDividedByZero(a);
              testDividedByZero(b);
            });
        var testNaN = function (a, b) {
          var a$1 = $$Number.Float64.fromFloatExn(a);
          var b$1 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.div(a$1, b$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.divExn(a$1, b$1);
                }));
        };
        testNaN(PervasivesU.neg_infinity, PervasivesU.infinity);
        testNaN(PervasivesU.infinity, PervasivesU.neg_infinity);
      }));

Ava("test " + name + " remainder", (function (t) {
        var testNotNaN = function (a, b) {
          if (a !== 0.0) {
            var result = $$Number.Float64.fromFloatExn(b % a);
            var a$1 = $$Number.Float64.fromFloatExn(a);
            var b$1 = $$Number.Float64.fromFloatExn(b);
            t.deepEqual($$Number.Float64.rem(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Float64.remExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Float64.remUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Float64.rem($$Number.Float64.zero, a$1), Caml_option.some($$Number.Float64.zero), undefined);
            t.deepEqual($$Number.Float64.remExn($$Number.Float64.zero, a$1), $$Number.Float64.zero, undefined);
            t.deepEqual($$Number.Float64.remUnsafe($$Number.Float64.zero, a$1), $$Number.Float64.zero, undefined);
          }
          if (b === 0.0) {
            return ;
          }
          var result$1 = $$Number.Float64.fromFloatExn(a % b);
          var a$2 = $$Number.Float64.fromFloatExn(a);
          var b$2 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.rem(a$2, b$2), Caml_option.some(result$1), undefined);
          t.deepEqual($$Number.Float64.remExn(a$2, b$2), result$1, undefined);
          t.deepEqual($$Number.Float64.remUnsafe(a$2, b$2), result$1, undefined);
          t.deepEqual($$Number.Float64.rem($$Number.Float64.zero, b$2), Caml_option.some($$Number.Float64.zero), undefined);
          t.deepEqual($$Number.Float64.remExn($$Number.Float64.zero, b$2), $$Number.Float64.zero, undefined);
          t.deepEqual($$Number.Float64.remUnsafe($$Number.Float64.zero, b$2), $$Number.Float64.zero, undefined);
        };
        testNotNaN(-56248.7954, 87934.1968);
        testNotNaN(Js_int.min, Js_int.max);
        testNotNaN(Js_int.min, -56248.7954);
        testNotNaN(Js_int.max, 87934.1968);
        var testModByZero = function (f) {
          var a = $$Number.Float64.fromFloatExn(f);
          t.deepEqual($$Number.Float64.rem(a, $$Number.Float64.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Float64.remExn(a, $$Number.Float64.zero);
                }));
          var negZero = $$Number.Float64.fromFloatExn(-0.0);
          t.deepEqual($$Number.Float64.rem(a, negZero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Float64.remExn(a, negZero);
                }));
        };
        testModByZero(0.0);
        testModByZero(-0.0);
        testModByZero(1.0);
        testModByZero(-56248.7954);
        testModByZero(87934.1968);
        testModByZero(12345678.9);
        testModByZero(Js_int.min);
        testModByZero(Js_int.max);
        testModByZero(PervasivesU.neg_infinity);
        testModByZero(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN(a, b);
              testModByZero(a);
              testModByZero(b);
            });
        var testNaN = function (a, b) {
          var a$1 = $$Number.Float64.fromFloatExn(a);
          var b$1 = $$Number.Float64.fromFloatExn(b);
          t.deepEqual($$Number.Float64.rem(a$1, b$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.remExn(a$1, b$1);
                }));
        };
        testNaN(PervasivesU.neg_infinity, 1.0);
        testNaN(PervasivesU.neg_infinity, 12345678.9);
        testNaN(PervasivesU.neg_infinity, Js_int.min);
        testNaN(PervasivesU.neg_infinity, Js_int.max);
        testNaN(PervasivesU.neg_infinity, PervasivesU.infinity);
        testNaN(PervasivesU.infinity, 1.0);
        testNaN(PervasivesU.infinity, 12345678.9);
        testNaN(PervasivesU.infinity, Js_int.min);
        testNaN(PervasivesU.infinity, Js_int.max);
        testNaN(PervasivesU.infinity, PervasivesU.neg_infinity);
      }));

Ava("test " + name + " sum", (function (t) {
        var testNotNaN = function (arr) {
          var result = $$Number.Float64.fromFloatExn(Belt_Array.reduce(arr, 0.0, (function (acc, v) {
                      return acc + v;
                    })));
          var arr$1 = Belt_Array.mapU(arr, (function (f) {
                  return $$Number.Float64.fromFloatExn(f);
                }));
          t.deepEqual($$Number.Float64.sum(arr$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Float64.sumExn(arr$1), result, undefined);
          t.deepEqual($$Number.Float64.sumUnsafe(arr$1), result, undefined);
        };
        testNotNaN([-56248.7954]);
        testNotNaN([87934.1968]);
        testNotNaN([Js_int.min]);
        testNotNaN([Js_int.max]);
        testNotNaN([PervasivesU.neg_infinity]);
        testNotNaN([PervasivesU.infinity]);
        testNotNaN([
              -56248.7954,
              87934.1968
            ]);
        testNotNaN([
              87934.1968,
              -56248.7954
            ]);
        testNotNaN([
              -56248.7954,
              Js_int.min,
              0.0,
              12345678.9,
              Js_int.max,
              1.0,
              87934.1968,
              -0.0
            ]);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotNaN([a]);
              testNotNaN([b]);
              testNotNaN([
                    a,
                    b
                  ]);
              testNotNaN([
                    b,
                    a
                  ]);
              testNotNaN([
                    a,
                    12345678.9,
                    Js_int.max,
                    Js_int.min,
                    b
                  ]);
            });
        var testNaN = function (arr) {
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return $$Number.Float64.fromFloatExn(i);
                }));
          t.deepEqual($$Number.Float64.sum(arr$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Float64.sumExn(arr$1);
                }));
        };
        testNaN([
              PervasivesU.neg_infinity,
              PervasivesU.infinity
            ]);
        testNaN([
              12345678.9,
              PervasivesU.neg_infinity,
              PervasivesU.infinity
            ]);
        testNaN([
              PervasivesU.neg_infinity,
              PervasivesU.infinity,
              12345678.9
            ]);
        t.deepEqual($$Number.Float64.sum([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Float64.sumExn([]);
              }));
      }));

Ava("test " + name + " signed math", (function (t) {
        var testNeg = function (f) {
          var a = $$Number.Float64.fromFloatExn(f);
          var b = $$Number.Float64.fromFloatExn(- f);
          t.deepEqual($$Number.Float64.neg(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Float64.negExn(a), b, undefined);
          t.deepEqual($$Number.Float64.negUnsafe(a), b, undefined);
          t.deepEqual($$Number.Float64.neg(b), Caml_option.some(a), undefined);
          t.deepEqual($$Number.Float64.negExn(b), a, undefined);
          t.deepEqual($$Number.Float64.negUnsafe(b), a, undefined);
        };
        testNeg(0.0);
        testNeg(-0.0);
        testNeg(1.0);
        testNeg(12345678.9);
        testNeg(Js_int.min);
        testNeg(Js_int.max);
        testNeg(PervasivesU.neg_infinity);
        testNeg(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testNeg(randomValue(undefined));
            });
        var testAbs = function (f) {
          var a = $$Number.Float64.fromFloatExn(f);
          var b = $$Number.Float64.fromFloatExn(Math.abs(f));
          t.deepEqual($$Number.Float64.abs(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Float64.absExn(a), b, undefined);
          t.deepEqual($$Number.Float64.absUnsafe(a), b, undefined);
          t.deepEqual($$Number.Float64.abs(b), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Float64.absExn(b), b, undefined);
          t.deepEqual($$Number.Float64.absUnsafe(b), b, undefined);
        };
        testAbs(0.0);
        testAbs(-0.0);
        testAbs(-1.0);
        testAbs(- 12345678.9);
        testAbs(Js_int.min);
        testAbs(- Js_int.max);
        testAbs(PervasivesU.neg_infinity);
        testAbs(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testAbs(randomValue(undefined));
            });
        var testSign = function (f) {
          var test_ = function (f) {
            var n = $$Number.Float64.fromFloatExn(f);
            var result = f < 0.0 ? -1 : (
                f > 0.0 ? 1 : 0
              );
            var raw = Math.sign(f);
            t.deepEqual($$Number.Float64.sign(n), result, undefined);
            t.deepEqual($$Number.Float64.signExn(n), result, undefined);
            t.deepEqual($$Number.Float64.signRaw(n), raw, undefined);
          };
          test_(f);
          test_(- f);
        };
        testSign(0.0);
        testSign(-0.0);
        testSign(1.0);
        testSign(12345678.9);
        testSign(PervasivesU.neg_infinity);
        testSign(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testSign(randomValue(undefined));
            });
      }));

Ava("test " + name + " float extra", (function (t) {
        var testIsFinite = function (f, result) {
          t.deepEqual($$Number.Float64.$$isFinite($$Number.Float64.fromFloatExn(f)), result, undefined);
        };
        testIsFinite(0.0, true);
        testIsFinite(-0.0, true);
        testIsFinite(1.0, true);
        testIsFinite(12345678.9, true);
        testIsFinite(Js_int.min, true);
        testIsFinite(Js_int.max, true);
        testIsFinite(PervasivesU.neg_infinity, false);
        testIsFinite(PervasivesU.infinity, false);
        TestUtils.loop100Fn(function () {
              testIsFinite(randomValue(undefined), true);
            });
        t.deepEqual($$Number.Float64.$$isFinite($$Number.Float64.fromFloatUnsafe(Number.NaN)), false, undefined);
        var testIsInteger = function (f, result) {
          t.deepEqual($$Number.Float64.isInteger($$Number.Float64.fromFloatExn(f)), result, undefined);
        };
        testIsInteger(0.0, true);
        testIsInteger(-0.0, true);
        testIsInteger(1.0, true);
        testIsInteger(1e55, true);
        testIsInteger(12345678.9, false);
        testIsInteger(Js_int.min, true);
        testIsInteger(Js_int.max, true);
        testIsInteger(PervasivesU.neg_infinity, false);
        testIsInteger(PervasivesU.infinity, false);
        TestUtils.loop100Fn(function () {
              testIsInteger(TestUtils.randomInt(Js_int.min, Js_int.max), true);
            });
        TestUtils.loop100Fn(function () {
              testIsInteger(randomSmallerInt(undefined), true);
            });
        TestUtils.loop100Fn(function () {
              testIsInteger(randomLargerInt(undefined), true);
            });
        var testIsNotNaN = function (f) {
          t.deepEqual($$Number.Float64.$$isNaN($$Number.Float64.fromFloatExn(f)), false, undefined);
        };
        testIsNotNaN(0.0);
        testIsNotNaN(-0.0);
        testIsNotNaN(1.0);
        testIsNotNaN(12345678.9);
        testIsNotNaN(Js_int.min);
        testIsNotNaN(Js_int.max);
        testIsNotNaN(PervasivesU.neg_infinity);
        testIsNotNaN(PervasivesU.infinity);
        TestUtils.loop100Fn(function () {
              testIsNotNaN(randomValue(undefined));
            });
        t.deepEqual($$Number.Float64.$$isNaN($$Number.Float64.fromFloatUnsafe(Number.NaN)), true, undefined);
        var testIsSafeInteger = function (f, result) {
          t.deepEqual($$Number.Float64.isSafeInteger($$Number.Float64.fromFloatExn(f)), result, undefined);
        };
        testIsSafeInteger(0.0, true);
        testIsSafeInteger(-0.0, true);
        testIsSafeInteger(1.0, true);
        testIsSafeInteger(1e55, false);
        testIsSafeInteger(12345678.9, false);
        testIsSafeInteger(Js_int.min, true);
        testIsSafeInteger(Js_int.max, true);
        testIsSafeInteger(PervasivesU.neg_infinity, false);
        testIsSafeInteger(PervasivesU.infinity, false);
        TestUtils.loop100Fn(function () {
              testIsSafeInteger(TestUtils.randomInt(Js_int.min, Js_int.max), true);
            });
      }));

var FloatModule;

var minValue = PervasivesU.neg_infinity;

var maxValue = PervasivesU.infinity;

var value = 12345678.9;

var less = -56248.7954;

var greater = 87934.1968;

var minInt = Js_int.min;

var maxInt = Js_int.max;

var minIntFloat = Js_int.min;

var maxIntFloat = Js_int.max;

export {
  FloatModule ,
  name ,
  minValue ,
  maxValue ,
  value ,
  less ,
  greater ,
  minInt ,
  maxInt ,
  minIntFloat ,
  maxIntFloat ,
  randomValue ,
  randomInt32 ,
  randomLargerInt ,
  randomSmallerInt ,
  randomFloatInInt32Range ,
}
/*  Not a pure module */
