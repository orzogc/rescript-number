// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.bs.mjs";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var name = "Int16";

var valueShiftLeft = [
  10000,
  20000,
  -25536,
  14464,
  28928,
  -7680,
  -15360,
  -30720,
  4096,
  8192,
  16384,
  -32768,
  0,
  0,
  0,
  0
];

var valueRotateShiftLeft = [
  10000,
  20000,
  -25536,
  14465,
  28930,
  -7676,
  -15351,
  -30701,
  4135,
  8270,
  16540,
  -32456,
  625,
  1250,
  2500,
  5000
];

var negZero = -0;

var zero = $$Number.Int16.zero;

var one = $$Number.Int16.one;

var fromIntExn = $$Number.Int16.fromIntExn;

var fromFloatExn = $$Number.Int16.fromFloatExn;

function randomValue() {
  return TestUtils.randomInt(-32768, 32767);
}

function randomLargerInt() {
  return TestUtils.randomInt(32767 + 1.0, Js_int.max);
}

function randomSmallerInt() {
  return TestUtils.randomInt(Js_int.min, -32768);
}

function testFn(fn) {
  fn(0);
  fn(negZero);
  fn(1);
  fn(10000);
  fn(-73);
  fn(382);
  fn(-32768);
  fn(-32767);
  fn(32767);
  fn(32766);
  TestUtils.loop100Fn(function () {
        fn(TestUtils.randomInt(-32768, 32767));
      });
}

Ava("test " + name + " sign", (function (t) {
        t.deepEqual($$Number.Int16.isSigned, true, undefined);
        t.deepEqual($$Number.Int16.isUnsigned, false, undefined);
      }));

Ava("test " + name + " bits", (function (t) {
        t.deepEqual($$Number.Int16.bits, 16, undefined);
      }));

Ava("test " + name + " from int", (function (t) {
        var testInRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.fromInt(i), Caml_option.some(n), undefined);
          t.deepEqual(fromIntExn(i), n, undefined);
          t.deepEqual($$Number.Int16.fromIntClamped(i), n, undefined);
          t.deepEqual($$Number.Int16.fromIntUnsafe(i), n, undefined);
        };
        testFn(testInRange);
        testInRange(-1);
        testInRange(-10000);
        testInRange(-32767);
        testInRange(32767);
        var testOutOfRange = function (i, value) {
          t.deepEqual($$Number.Int16.fromInt(i), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int16.fromIntClamped(i), fromIntExn(value), undefined);
        };
        testOutOfRange(-32769, -32768);
        testOutOfRange(32768, 32767);
        testOutOfRange(-42768, -32768);
        testOutOfRange(42767, 32767);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(undefined), 32767);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, -32768), -32768);
            });
      }));

Ava("test " + name + " to int", (function (t) {
        var testToInt = function (i) {
          var n = fromIntExn(i);
          var i$1 = i | 0;
          t.deepEqual($$Number.Int16.toInt(n), i$1, undefined);
          t.deepEqual($$Number.Int16.toIntExn(n), i$1, undefined);
          t.deepEqual($$Number.Int16.toIntClamped(n), i$1, undefined);
          t.deepEqual($$Number.Int16.toIntUnsafe(n), i$1, undefined);
        };
        testFn(testToInt);
        testToInt(-1);
        testToInt(-10000);
        testToInt(-32767);
        testToInt(32767);
      }));

Ava("test " + name + " from float", (function (t) {
        var testIsIntegerAndInRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.fromFloat(i), Caml_option.some(n), undefined);
          t.deepEqual(fromFloatExn(i), n, undefined);
          t.deepEqual($$Number.Int16.fromFloatClamped(i), n, undefined);
          t.deepEqual($$Number.Int16.fromFloatUnsafe(i), n, undefined);
        };
        testFn(testIsIntegerAndInRange);
        testIsIntegerAndInRange(-1);
        testIsIntegerAndInRange(-10000);
        testIsIntegerAndInRange(-32767);
        testIsIntegerAndInRange(32767);
        var testOutOfRange = function (f, value) {
          t.deepEqual($$Number.Int16.fromFloat(f), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return fromFloatExn(f);
                }));
          t.deepEqual($$Number.Int16.fromFloatClamped(f), fromIntExn(value), undefined);
        };
        testOutOfRange(-32768 - 1.0, -32768);
        testOutOfRange(32767 + 1.0, 32767);
        testOutOfRange(-42768, -32768);
        testOutOfRange(42767, 32767);
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(32767 + 1.0, TestUtils.maxSafeInteger)), 32767);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(TestUtils.minSafeInteger, -32768 - 1.0)), -32768);
            });
        var testIsNotInteger = function (f, value) {
          t.deepEqual($$Number.Int16.fromFloat(f), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return fromFloatExn(f);
                }));
          t.deepEqual($$Number.Int16.fromFloatClamped(f), fromIntExn(value), undefined);
        };
        testIsNotInteger(10000 + 0.5, 10000);
        var f = - 10000 - 0.5;
        testIsNotInteger(f, f | 0);
        testIsNotInteger(-32768 + 0.1, -32767);
        testIsNotInteger(Number.NaN, 0);
        testIsNotInteger(PervasivesU.neg_infinity, -32768);
        testIsNotInteger(PervasivesU.infinity, 32767);
        testIsNotInteger(-32768 - 0.1, -32768);
        testIsNotInteger(32767 + 0.1, 32767);
        testIsNotInteger(32767 - 0.1, 32766);
        testIsNotInteger(-42768 - 0.5, -32768);
        testIsNotInteger(42767 + 0.5, 32767);
      }));

Ava("test " + name + " to float", (function (t) {
        var testToFloat = function (i) {
          t.deepEqual($$Number.Int16.toFloat(fromFloatExn(i)), i, undefined);
        };
        testToFloat(10000);
        TestUtils.loop100Fn(function () {
              testToFloat(TestUtils.randomInt(-32768, 32767));
            });
      }));

Ava("test " + name + " from string", (function (t) {
        var testInRange = function (i, s) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.fromString(s), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Int16.fromStringExn(s), n, undefined);
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = i.toString(radix);
            t.deepEqual($$Number.Int16.fromStringWithRadix(s$1, radix), Caml_option.some(n), undefined);
            t.deepEqual($$Number.Int16.fromStringWithRadixExn(s$1, radix), n, undefined);
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 37);
                }));
        };
        testInRange(0, "0");
        testInRange(0, "-0");
        testInRange(1, "1");
        testInRange(10000, String(10000));
        testInRange(10000, String(10000 + 0.5));
        testInRange(-32768, String(-32768));
        testInRange(32767, String(32767));
        testInRange(-32767, String(-32767));
        testInRange(32766, String(32766));
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-32768, 32767);
              testInRange(value, String(value));
            });
        testInRange(-10000, String(-10000));
        testInRange(-10000, String(- 10000 - 0.5));
        testInRange(-32767, String(-32767));
        testInRange(32767, String(32767));
        var testOutOfRange = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Int16.fromString(s), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.fromStringExn(s);
                }));
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = f.toString(radix);
            t.deepEqual($$Number.Int16.fromStringWithRadix(s$1, radix), undefined, undefined);
            TestUtils.assertOverflow(t, (function(radix,s$1){
                return function () {
                  return $$Number.Int16.fromStringWithRadixExn(s$1, radix);
                }
                }(radix,s$1)));
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 37);
                }));
        };
        testOutOfRange(-32768 - 1.0);
        testOutOfRange(32767 + 1.0);
        testOutOfRange(-42768);
        testOutOfRange(42767);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(undefined));
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, -32768));
            });
        var testIsNotInteger = function (s) {
          t.deepEqual($$Number.Int16.fromString(s), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringExn(s);
                }));
          for(var radix = 2; radix <= 10; ++radix){
            t.deepEqual($$Number.Int16.fromStringWithRadix(s, radix), undefined, undefined);
            TestUtils.assertInvalidArgument(t, (function(radix){
                return function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, radix);
                }
                }(radix)));
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.fromStringWithRadixExn(s, 37);
                }));
        };
        testIsNotInteger("NaN");
        testIsNotInteger("Infinity");
        testIsNotInteger("-Infinity");
        testIsNotInteger("foo");
        testIsNotInteger("b1");
      }));

Ava("test " + name + " to string", (function (t) {
        var testToString = function (i) {
          var s = String(i);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.toString(n), s, undefined);
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = i.toString(radix);
            t.deepEqual($$Number.Int16.toStringWithRadixExn(n, radix), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int16.toStringWithRadixExn(n, 1);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int16.toStringWithRadixExn(n, 37);
                }), undefined, undefined);
        };
        testFn(testToString);
        var testToExponential = function (i) {
          var s = i.toExponential();
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.toExponential(n), s, undefined);
          for(var digits = 0; digits <= 100; ++digits){
            var s$1 = i.toExponential(digits);
            t.deepEqual($$Number.Int16.toExponentialWithPrecisionExn(n, digits), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int16.toExponentialWithPrecisionExn(n, -1);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int16.toExponentialWithPrecisionExn(n, 101);
                }), undefined, undefined);
        };
        testFn(testToExponential);
        var testToPrecision = function (i) {
          var s = i.toPrecision();
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.toPrecision(n), s, undefined);
          for(var digits = 1; digits <= 100; ++digits){
            var s$1 = i.toPrecision(digits);
            t.deepEqual($$Number.Int16.toPrecisionWithPrecisionExn(n, digits), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int16.toPrecisionWithPrecisionExn(n, 0);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int16.toPrecisionWithPrecisionExn(n, 101);
                }), undefined, undefined);
        };
        testFn(testToPrecision);
      }));

Ava("test " + name + " zero", (function (t) {
        t.deepEqual(zero, fromIntExn(0), undefined);
        t.deepEqual(zero, fromFloatExn(0.0), undefined);
        t.deepEqual(zero, fromFloatExn(-0.0), undefined);
      }));

Ava("test " + name + " one", (function (t) {
        t.deepEqual(one, fromIntExn(1), undefined);
        t.deepEqual(one, fromFloatExn(1.0), undefined);
      }));

Ava("test " + name + " range", (function (t) {
        t.deepEqual($$Number.Int16.minValue, fromIntExn(-32768), undefined);
        t.deepEqual($$Number.Int16.minValue, fromFloatExn(-32768), undefined);
        t.deepEqual($$Number.Int16.maxValue, fromIntExn(32767), undefined);
        t.deepEqual($$Number.Int16.maxValue, fromFloatExn(32767), undefined);
      }));

Ava("test " + name + " comparison", (function (t) {
        var testCompare = function (less, greater) {
          var less$1 = fromIntExn(less);
          var greater$1 = fromIntExn(greater);
          var value = fromIntExn(10000);
          var minValue = fromIntExn(-32768);
          var maxValue = fromIntExn(32767);
          t.deepEqual($$Number.Int16.compare(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Int16.compare(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Int16.compare(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Int16.compare(greater$1, greater$1), 0, undefined);
          t.deepEqual($$Number.Int16.compareExn(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Int16.compareExn(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Int16.compareExn(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Int16.compareExn(greater$1, greater$1), 0, undefined);
          t.true($$Number.Int16.eq(less$1, less$1), undefined);
          t.true($$Number.Int16.eq(greater$1, greater$1), undefined);
          t.false($$Number.Int16.eq(less$1, greater$1), undefined);
          t.false($$Number.Int16.eq(greater$1, less$1), undefined);
          t.true($$Number.Int16.ne(less$1, greater$1), undefined);
          t.true($$Number.Int16.ne(greater$1, less$1), undefined);
          t.false($$Number.Int16.ne(less$1, less$1), undefined);
          t.false($$Number.Int16.ne(greater$1, greater$1), undefined);
          t.true($$Number.Int16.lt(less$1, greater$1), undefined);
          t.false($$Number.Int16.lt(greater$1, less$1), undefined);
          t.false($$Number.Int16.lt(less$1, less$1), undefined);
          t.false($$Number.Int16.lt(greater$1, greater$1), undefined);
          t.true($$Number.Int16.le(less$1, greater$1), undefined);
          t.false($$Number.Int16.le(greater$1, less$1), undefined);
          t.true($$Number.Int16.le(less$1, less$1), undefined);
          t.true($$Number.Int16.le(greater$1, greater$1), undefined);
          t.true($$Number.Int16.gt(greater$1, less$1), undefined);
          t.false($$Number.Int16.gt(less$1, greater$1), undefined);
          t.false($$Number.Int16.gt(less$1, less$1), undefined);
          t.false($$Number.Int16.gt(greater$1, greater$1), undefined);
          t.true($$Number.Int16.ge(greater$1, less$1), undefined);
          t.false($$Number.Int16.ge(less$1, greater$1), undefined);
          t.true($$Number.Int16.ge(less$1, less$1), undefined);
          t.true($$Number.Int16.ge(greater$1, greater$1), undefined);
          t.deepEqual($$Number.Int16.min(less$1, greater$1), less$1, undefined);
          t.deepEqual($$Number.Int16.min(greater$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int16.min(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int16.min(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int16.minMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int16.minMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int16.minMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int16.minMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(minValue), undefined);
          t.deepEqual($$Number.Int16.minManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyExn([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyExn([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Int16.minManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyUnsafe([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyUnsafe([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int16.minManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Int16.max(less$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int16.max(greater$1, less$1), greater$1, undefined);
          t.deepEqual($$Number.Int16.max(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int16.max(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int16.maxMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int16.maxMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Int16.maxMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Int16.maxMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(maxValue), undefined);
          t.deepEqual($$Number.Int16.maxManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int16.maxManyExn([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int16.maxManyExn([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int16.maxManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), maxValue, undefined);
          t.deepEqual($$Number.Int16.maxManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int16.maxManyUnsafe([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int16.maxManyUnsafe([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int16.maxManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), maxValue, undefined);
        };
        testCompare(-73, 382);
        TestUtils.loop100Fn(function () {
              var less = TestUtils.randomInt(-32768, 32767);
              var greater = TestUtils.randomInt(less + 1.0, 32767 + 1.0);
              testCompare(less, greater);
            });
        var zero = fromIntExn(0);
        var negZero$1 = fromIntExn(negZero);
        t.true($$Number.Int16.eq(zero, negZero$1), undefined);
        t.true($$Number.Int16.le(zero, negZero$1), undefined);
        t.true($$Number.Int16.ge(zero, negZero$1), undefined);
        t.false($$Number.Int16.lt(zero, negZero$1), undefined);
        t.false($$Number.Int16.gt(zero, negZero$1), undefined);
        t.deepEqual($$Number.Int16.minMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int16.minManyExn([]);
              }));
        t.deepEqual($$Number.Int16.maxMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int16.maxManyExn([]);
              }));
      }));

Ava("test " + name + " addition", (function (t) {
        var testInRange = function (a, b) {
          if (a !== -32768) {
            var negA = fromIntExn(-a | 0);
            var a$1 = fromIntExn(a);
            t.deepEqual($$Number.Int16.add(a$1, negA), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.add(a$1, negA), $$Number.Int16.add(negA, a$1), undefined);
            t.deepEqual($$Number.Int16.addExn(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int16.addExn(a$1, negA), $$Number.Int16.addExn(negA, a$1), undefined);
            t.deepEqual($$Number.Int16.addClamped(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int16.addClamped(a$1, negA), $$Number.Int16.addClamped(negA, a$1), undefined);
            t.deepEqual($$Number.Int16.addUnsafe(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int16.addUnsafe(a$1, negA), $$Number.Int16.addUnsafe(negA, a$1), undefined);
          }
          if (b !== -32768) {
            var negB = fromIntExn(-b | 0);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int16.add(b$1, negB), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.add(b$1, negB), $$Number.Int16.add(negB, b$1), undefined);
            t.deepEqual($$Number.Int16.addExn(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int16.addExn(b$1, negB), $$Number.Int16.addExn(negB, b$1), undefined);
            t.deepEqual($$Number.Int16.addClamped(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int16.addClamped(b$1, negB), $$Number.Int16.addClamped(negB, b$1), undefined);
            t.deepEqual($$Number.Int16.addUnsafe(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int16.addUnsafe(b$1, negB), $$Number.Int16.addUnsafe(negB, b$1), undefined);
          }
          var result = fromIntExn(a + b | 0);
          var a$2 = fromIntExn(a);
          var b$2 = fromIntExn(b);
          t.deepEqual($$Number.Int16.add(a$2, b$2), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.add(a$2, b$2), $$Number.Int16.add(b$2, a$2), undefined);
          t.deepEqual($$Number.Int16.addExn(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int16.addExn(a$2, b$2), $$Number.Int16.addExn(b$2, a$2), undefined);
          t.deepEqual($$Number.Int16.addClamped(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int16.addClamped(a$2, b$2), $$Number.Int16.addClamped(b$2, a$2), undefined);
          t.deepEqual($$Number.Int16.addUnsafe(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int16.addUnsafe(a$2, b$2), $$Number.Int16.addUnsafe(b$2, a$2), undefined);
          t.deepEqual($$Number.Int16.add(a$2, zero), Caml_option.some(a$2), undefined);
          t.deepEqual($$Number.Int16.add(a$2, zero), $$Number.Int16.add(zero, a$2), undefined);
          t.deepEqual($$Number.Int16.addExn(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int16.addExn(a$2, zero), $$Number.Int16.addExn(zero, a$2), undefined);
          t.deepEqual($$Number.Int16.addClamped(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int16.addClamped(a$2, zero), $$Number.Int16.addClamped(zero, a$2), undefined);
          t.deepEqual($$Number.Int16.addUnsafe(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int16.addUnsafe(a$2, zero), $$Number.Int16.addUnsafe(zero, a$2), undefined);
          t.deepEqual($$Number.Int16.add(b$2, zero), Caml_option.some(b$2), undefined);
          t.deepEqual($$Number.Int16.add(b$2, zero), $$Number.Int16.add(zero, b$2), undefined);
          t.deepEqual($$Number.Int16.addExn(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int16.addExn(b$2, zero), $$Number.Int16.addExn(zero, b$2), undefined);
          t.deepEqual($$Number.Int16.addClamped(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int16.addClamped(b$2, zero), $$Number.Int16.addClamped(zero, b$2), undefined);
          t.deepEqual($$Number.Int16.addUnsafe(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int16.addUnsafe(b$2, zero), $$Number.Int16.addUnsafe(zero, b$2), undefined);
        };
        testInRange(-73, 382);
        testInRange(-32768, 0);
        testInRange(32767, 0);
        testInRange(-32768, 1);
        testInRange(32767, -1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int16.add(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Int16.add(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.addExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.addExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Int16.addClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int16.addClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(-32768, -1, -32768);
        testOutOfRange(-32768, -10000, -32768);
        testOutOfRange(32767, 1, 32767);
        testOutOfRange(32767, 10000, 32767);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              var result = a + b;
              if (result < -32768) {
                testOutOfRange(a, b, -32768);
              } else if (result > 32767) {
                testOutOfRange(a, b, 32767);
              } else {
                testInRange(a, b);
              }
              testInRange(a, 1);
              testInRange(b, 1);
            });
      }));

Ava("test " + name + " subtraction", (function (t) {
        var testInRange = function (a, b) {
          var result = fromIntExn(a - b | 0);
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.sub(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.subExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.subClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.sub(a$1, result), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int16.subExn(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int16.subClamped(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int16.sub(a$1, a$1), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.subExn(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int16.subClamped(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int16.sub(a$1, zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int16.subExn(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int16.subClamped(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int16.sub(b$1, b$1), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.subExn(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int16.subClamped(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int16.sub(b$1, zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int16.subExn(b$1, zero), b$1, undefined);
          t.deepEqual($$Number.Int16.subClamped(b$1, zero), b$1, undefined);
          t.deepEqual($$Number.Int16.subUnsafe(b$1, zero), b$1, undefined);
        };
        testInRange(382, -73);
        testInRange(-32768, 0);
        testInRange(32767, 0);
        testInRange(32767, 1);
        testInRange(-73, 382);
        testInRange(-32768, -1);
        testInRange(0, 32767);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.sub(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.subExn(a$1, b$1);
                }));
          t.deepEqual($$Number.Int16.subClamped(a$1, b$1), fromIntExn(value), undefined);
        };
        testOutOfRange(-32768, 1, -32768);
        testOutOfRange(-32768, 10000, -32768);
        testOutOfRange(32767, -1, 32767);
        testOutOfRange(32767, -10000, 32767);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              var result = a - b;
              if (result < -32768) {
                testOutOfRange(a, b, -32768);
              } else if (result > 32767) {
                testOutOfRange(a, b, 32767);
              } else {
                testInRange(a, b);
              }
              var result$1 = b - a;
              if (result$1 < -32768) {
                return testOutOfRange(b, a, -32768);
              } else if (result$1 > 32767) {
                return testOutOfRange(b, a, 32767);
              } else {
                return testInRange(b, a);
              }
            });
      }));

Ava("test " + name + " multiplication", (function (t) {
        var testInRange = function (a, b) {
          var result = fromIntExn(Math.imul(a, b));
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.mul(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.mul(a$1, b$1), $$Number.Int16.mul(b$1, a$1), undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, b$1), $$Number.Int16.mulExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, b$1), $$Number.Int16.mulClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, b$1), $$Number.Int16.mulUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Int16.mul(a$1, zero), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.mul(a$1, zero), $$Number.Int16.mul(zero, a$1), undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, zero), $$Number.Int16.mulExn(zero, a$1), undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, zero), $$Number.Int16.mulClamped(zero, a$1), undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, zero), $$Number.Int16.mulUnsafe(zero, a$1), undefined);
          t.deepEqual($$Number.Int16.mul(a$1, one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int16.mul(a$1, one), $$Number.Int16.mul(one, a$1), undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int16.mulExn(a$1, one), $$Number.Int16.mulExn(one, a$1), undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int16.mulClamped(a$1, one), $$Number.Int16.mulClamped(one, a$1), undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(a$1, one), $$Number.Int16.mulUnsafe(one, a$1), undefined);
          t.deepEqual($$Number.Int16.mul(b$1, zero), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.mul(b$1, zero), $$Number.Int16.mul(zero, b$1), undefined);
          t.deepEqual($$Number.Int16.mulExn(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulExn(b$1, zero), $$Number.Int16.mulExn(zero, b$1), undefined);
          t.deepEqual($$Number.Int16.mulClamped(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulClamped(b$1, zero), $$Number.Int16.mulClamped(zero, b$1), undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(b$1, zero), $$Number.Int16.mulUnsafe(zero, b$1), undefined);
          t.deepEqual($$Number.Int16.mul(b$1, one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int16.mul(b$1, one), $$Number.Int16.mul(one, b$1), undefined);
          t.deepEqual($$Number.Int16.mulExn(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int16.mulExn(b$1, one), $$Number.Int16.mulExn(one, b$1), undefined);
          t.deepEqual($$Number.Int16.mulClamped(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int16.mulClamped(b$1, one), $$Number.Int16.mulClamped(one, b$1), undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int16.mulUnsafe(b$1, one), $$Number.Int16.mulUnsafe(one, b$1), undefined);
        };
        testInRange(-73, 382);
        testInRange(-32768, 0);
        testInRange(32767, 0);
        testInRange(-32768, 1);
        testInRange(32767, 1);
        testInRange(-32767, 1);
        testInRange(32766, 1);
        testInRange(-32767, 1);
        testInRange(32767, -1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int16.mul(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Int16.mul(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.mulExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.mulExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Int16.mulClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int16.mulClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(32767, 2, 32767);
        testOutOfRange(32767, 10000, 32767);
        testOutOfRange(-32768, 2, -32768);
        testOutOfRange(-32768, 10000, -32768);
        testOutOfRange(-32768, -1, 32767);
        testOutOfRange(32767, -2, -32768);
        testOutOfRange(-32768, -10000, 32767);
        testOutOfRange(32767, -10000, -32768);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              var result = a * b;
              if (result < -32768) {
                return testOutOfRange(a, b, -32768);
              } else if (result > 32767) {
                return testOutOfRange(a, b, 32767);
              } else {
                return testInRange(a, b);
              }
            });
      }));

Ava("test " + name + " division", (function (t) {
        var testNotDividedByZero = function (a, b) {
          var negOne = fromIntExn(-1);
          if (a !== -32768) {
            var negA = fromIntExn(-a | 0);
            var a$1 = fromIntExn(a);
            t.deepEqual($$Number.Int16.div(a$1, negOne), Caml_option.some(negA), undefined);
            t.deepEqual($$Number.Int16.divExn(a$1, negOne), negA, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(a$1, negOne), negA, undefined);
          }
          if (b !== -32768) {
            var negB = fromIntExn(-b | 0);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int16.div(b$1, negOne), Caml_option.some(negB), undefined);
            t.deepEqual($$Number.Int16.divExn(b$1, negOne), negB, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(b$1, negOne), negB, undefined);
          }
          if (a !== 0) {
            var result = fromIntExn(Caml_int32.div(b, a));
            var a$2 = fromIntExn(a);
            var b$2 = fromIntExn(b);
            t.deepEqual($$Number.Int16.div(b$2, a$2), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Int16.divExn(b$2, a$2), result, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(b$2, a$2), result, undefined);
            t.deepEqual($$Number.Int16.div(a$2, a$2), Caml_option.some(one), undefined);
            t.deepEqual($$Number.Int16.divExn(a$2, a$2), one, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(a$2, a$2), one, undefined);
            t.deepEqual($$Number.Int16.div(zero, a$2), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.divExn(zero, a$2), zero, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(zero, a$2), zero, undefined);
          }
          if (b !== 0) {
            var result$1 = fromIntExn(Caml_int32.div(a, b));
            var a$3 = fromIntExn(a);
            var b$3 = fromIntExn(b);
            t.deepEqual($$Number.Int16.div(a$3, b$3), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Int16.divExn(a$3, b$3), result$1, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(a$3, b$3), result$1, undefined);
            t.deepEqual($$Number.Int16.div(b$3, b$3), Caml_option.some(one), undefined);
            t.deepEqual($$Number.Int16.divExn(b$3, b$3), one, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(b$3, b$3), one, undefined);
            t.deepEqual($$Number.Int16.div(zero, b$3), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.divExn(zero, b$3), zero, undefined);
            t.deepEqual($$Number.Int16.divUnsafe(zero, b$3), zero, undefined);
          }
          var a$4 = fromIntExn(a);
          var b$4 = fromIntExn(b);
          t.deepEqual($$Number.Int16.div(a$4, one), Caml_option.some(a$4), undefined);
          t.deepEqual($$Number.Int16.divExn(a$4, one), a$4, undefined);
          t.deepEqual($$Number.Int16.divUnsafe(a$4, one), a$4, undefined);
          t.deepEqual($$Number.Int16.div(b$4, one), Caml_option.some(b$4), undefined);
          t.deepEqual($$Number.Int16.divExn(b$4, one), b$4, undefined);
          t.deepEqual($$Number.Int16.divUnsafe(b$4, one), b$4, undefined);
        };
        testNotDividedByZero(0, 10000);
        testNotDividedByZero(negZero, 10000);
        testNotDividedByZero(-73, 382);
        testNotDividedByZero(-32768, -73);
        testNotDividedByZero(-32768, 382);
        testNotDividedByZero(32767, -73);
        testNotDividedByZero(32767, 382);
        testNotDividedByZero(-73, 2);
        testNotDividedByZero(382, 2);
        testNotDividedByZero(-32768, 2);
        testNotDividedByZero(32767, 2);
        testNotDividedByZero(-32767, 2);
        testNotDividedByZero(32766, 2);
        testNotDividedByZero(-73, -382);
        testNotDividedByZero(382, 73);
        testNotDividedByZero(73, -382);
        testNotDividedByZero(-32768, 73);
        testNotDividedByZero(-32768, -382);
        testNotDividedByZero(32767, 73);
        testNotDividedByZero(32767, -382);
        testNotDividedByZero(-32767, 73);
        testNotDividedByZero(-32767, -382);
        testNotDividedByZero(-73, -2);
        testNotDividedByZero(382, -2);
        testNotDividedByZero(-32768, -2);
        testNotDividedByZero(32767, -2);
        testNotDividedByZero(-32767, -2);
        testNotDividedByZero(32766, -2);
        var testDividedByZero = function (i) {
          var a = fromIntExn(i);
          t.deepEqual($$Number.Int16.div(a, zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int16.divExn(a, zero);
                }));
          var negZero$1 = fromIntExn(negZero);
          t.deepEqual($$Number.Int16.div(a, negZero$1), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int16.divExn(a, negZero$1);
                }));
        };
        testFn(testDividedByZero);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              testNotDividedByZero(a, b);
              testDividedByZero(a);
              testDividedByZero(b);
            });
      }));

Ava("test " + name + " remainder", (function (t) {
        var testNotModByZero = function (a, b) {
          if (a !== 0) {
            var result = fromIntExn(Caml_int32.mod_(b, a) | 0);
            var a$1 = fromIntExn(a);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int16.rem(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Int16.remExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Int16.remUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Int16.rem(zero, a$1), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.remExn(zero, a$1), zero, undefined);
            t.deepEqual($$Number.Int16.remUnsafe(zero, a$1), zero, undefined);
          }
          if (b !== 0) {
            var result$1 = fromIntExn(Caml_int32.mod_(a, b) | 0);
            var a$2 = fromIntExn(a);
            var b$2 = fromIntExn(b);
            t.deepEqual($$Number.Int16.rem(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Int16.remExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Int16.remUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Int16.rem(zero, b$2), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int16.remExn(zero, b$2), zero, undefined);
            t.deepEqual($$Number.Int16.remUnsafe(zero, b$2), zero, undefined);
          }
          var a$3 = fromIntExn(a);
          var b$3 = fromIntExn(b);
          t.deepEqual($$Number.Int16.rem(a$3, one), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.remExn(a$3, one), zero, undefined);
          t.deepEqual($$Number.Int16.remUnsafe(a$3, one), zero, undefined);
          t.deepEqual($$Number.Int16.rem(b$3, one), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.remExn(b$3, one), zero, undefined);
          t.deepEqual($$Number.Int16.remUnsafe(b$3, one), zero, undefined);
          var negOne = fromIntExn(-1);
          t.deepEqual($$Number.Int16.rem(a$3, negOne), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.remExn(a$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int16.remUnsafe(a$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int16.rem(b$3, negOne), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int16.remExn(b$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int16.remUnsafe(b$3, negOne), zero, undefined);
        };
        testNotModByZero(-73, 382);
        testNotModByZero(-32768, -73);
        testNotModByZero(-32768, 382);
        testNotModByZero(32767, -73);
        testNotModByZero(32767, 382);
        testNotModByZero(-73, 2);
        testNotModByZero(382, 2);
        testNotModByZero(-32768, 2);
        testNotModByZero(32767, 2);
        testNotModByZero(-32767, 2);
        testNotModByZero(32766, 2);
        testNotModByZero(-73, -382);
        testNotModByZero(382, 73);
        testNotModByZero(73, -382);
        testNotModByZero(-32768, 73);
        testNotModByZero(-32768, -382);
        testNotModByZero(32767, 73);
        testNotModByZero(32767, -382);
        testNotModByZero(-32767, 73);
        testNotModByZero(-32767, -382);
        testNotModByZero(-73, -2);
        testNotModByZero(382, -2);
        testNotModByZero(-32768, -2);
        testNotModByZero(32767, -2);
        testNotModByZero(-32767, -2);
        testNotModByZero(32766, -2);
        var testModByZero = function (a) {
          var a$1 = fromIntExn(a);
          t.deepEqual($$Number.Int16.rem(a$1, zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int16.remExn(a$1, zero);
                }));
          var negZero$1 = fromIntExn(negZero);
          t.deepEqual($$Number.Int16.rem(a$1, negZero$1), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int16.remExn(a$1, negZero$1);
                }));
        };
        testFn(testModByZero);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              testNotModByZero(a, b);
              testModByZero(a);
              testModByZero(b);
            });
      }));

Ava("test " + name + " sum", (function (t) {
        var testInRange = function (arr) {
          var result = fromIntExn(Belt_Array.reduce(arr, 0, (function (acc, v) {
                      return acc + v | 0;
                    })));
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int16.sum(arr$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.sumExn(arr$1), result, undefined);
          t.deepEqual($$Number.Int16.sumUnsafe(arr$1), result, undefined);
        };
        testInRange([-73]);
        testInRange([382]);
        testInRange([-32768]);
        testInRange([32767]);
        testInRange([-32767]);
        testInRange([32766]);
        testInRange([
              -73,
              382
            ]);
        testInRange([
              382,
              -73
            ]);
        testInRange([
              -73,
              0,
              10000,
              1,
              382
            ]);
        testInRange([
              -32768,
              32767
            ]);
        t.deepEqual($$Number.Int16.sum([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int16.sumExn([]);
              }));
        var testOutOfRange = function (arr) {
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int16.sum(arr$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.sumExn(arr$1);
                }));
        };
        testOutOfRange([
              32767,
              1
            ]);
        testOutOfRange([
              1,
              32767
            ]);
        testOutOfRange([
              32767,
              10000
            ]);
        testOutOfRange([
              10000,
              32767
            ]);
        testOutOfRange([
              32767,
              455,
              10000
            ]);
        testOutOfRange([
              -32768,
              -1
            ]);
        testOutOfRange([
              -1,
              -32768
            ]);
        testOutOfRange([
              -32768,
              -10000
            ]);
        testOutOfRange([
              -10000,
              -32768
            ]);
        testOutOfRange([
              -32768,
              -455,
              -10000
            ]);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              testInRange([a]);
              testInRange([b]);
              var result = a + b;
              if (result >= -32768 && result <= 32767) {
                testInRange([
                      a,
                      b
                    ]);
                return testInRange([
                            b,
                            a
                          ]);
              } else {
                testOutOfRange([
                      a,
                      b
                    ]);
                return testOutOfRange([
                            b,
                            a
                          ]);
              }
            });
      }));

Ava("test " + name + " increase and decrease", (function (t) {
        var testIncInRange = function (i) {
          var result = fromIntExn(i + 1 | 0);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.inc(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.incExn(n), result, undefined);
          t.deepEqual($$Number.Int16.incUnsafe(n), result, undefined);
        };
        testIncInRange(0);
        testIncInRange(1);
        testIncInRange(10000);
        testIncInRange(-32768);
        testIncInRange(-32767);
        testIncInRange(32766);
        TestUtils.loop100Fn(function () {
              testIncInRange(TestUtils.randomInt(-32768, 32767));
            });
        testIncInRange(-10000);
        testIncInRange(-32767);
        t.deepEqual($$Number.Int16.inc($$Number.Int16.maxValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Int16.incExn($$Number.Int16.maxValue);
              }));
        var testDecInRange = function (i) {
          var result = fromIntExn(i - 1 | 0);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.dec(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.decExn(n), result, undefined);
          t.deepEqual($$Number.Int16.decUnsafe(n), result, undefined);
        };
        testDecInRange(1);
        testDecInRange(10000);
        testDecInRange(-32767);
        testDecInRange(32767);
        testDecInRange(32766);
        TestUtils.loop100Fn(function () {
              testDecInRange(TestUtils.randomInt(-32768 + 1.0, 32767));
            });
        testDecInRange(0);
        testDecInRange(-10000);
        testDecInRange(-32767);
        t.deepEqual($$Number.Int16.dec($$Number.Int16.minValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Int16.decExn($$Number.Int16.minValue);
              }));
      }));

Ava("test " + name + " bitwise", (function (t) {
        var assertNot1 = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.lnot(a$1), b$1, undefined);
          t.deepEqual($$Number.Int16.lnot(b$1), a$1, undefined);
        };
        assertNot1(10000, -10001);
        assertNot1(-32768, 32767);
        assertNot1(-32767, 32766);
        assertNot1(0, -1);
        var assertNot2 = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.lnot($$Number.Int16.lnot(n)), n, undefined);
        };
        testFn(assertNot2);
        assertNot2(-1);
        assertNot2(-32767);
        var assertAnd = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int16.land(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Int16.land(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Int16.land(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Int16.land(a$1, $$Number.Int16.lnot(a$1)), zero, undefined);
          t.deepEqual($$Number.Int16.land(b$1, $$Number.Int16.lnot(b$1)), zero, undefined);
          t.deepEqual($$Number.Int16.land(value$1, $$Number.Int16.lnot(value$1)), zero, undefined);
          t.deepEqual($$Number.Int16.land(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int16.land(b$1, a$1), value$1, undefined);
        };
        assertAnd(10000, -10001, 0);
        assertAnd(-32768, 32767, 0);
        assertAnd(-32767, 32766, 0);
        assertAnd(-73, 382, 310);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-32768, 32767);
              assertAnd(value, value, value);
            });
        assertAnd(0, -1, 0);
        var assertOr = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          var oneBits = fromIntExn(-1);
          t.deepEqual($$Number.Int16.lor(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Int16.lor(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Int16.lor(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Int16.lor(a$1, $$Number.Int16.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lor(b$1, $$Number.Int16.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lor(value$1, $$Number.Int16.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int16.lor(b$1, a$1), value$1, undefined);
        };
        assertOr(-73, 382, -1);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-32768, 32767);
              assertOr(value, value, value);
            });
        assertOr(10000, -10001, -1);
        assertOr(-32768, 32767, -1);
        assertOr(-32767, 32766, -1);
        assertOr(0, -1, -1);
        var assertXor = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          var oneBits = fromIntExn(-1);
          t.deepEqual($$Number.Int16.lxor(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int16.lxor(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int16.lxor(value$1, value$1), zero, undefined);
          t.deepEqual($$Number.Int16.lxor(a$1, $$Number.Int16.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lxor(b$1, $$Number.Int16.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lxor(value$1, $$Number.Int16.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Int16.lxor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int16.lxor(b$1, a$1), value$1, undefined);
        };
        assertXor(-73, 382, -311);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-32768, 32767);
              assertXor(value, value, 0);
            });
        assertXor(10000, -10001, -1);
        assertXor(-32768, 32767, -1);
        assertXor(-32767, 32766, -1);
        assertXor(0, -1, -1);
        var modBits = function (i) {
          return ((i >>> 0) % bits);
        };
        var value = fromIntExn(10000);
        for(var i = -16; i <= 32; ++i){
          t.deepEqual($$Number.Int16.lsl(value, i), fromIntExn(Belt_Array.getExn(valueShiftLeft, modBits(i))), undefined);
        }
        var mask = 65535;
        var testUnsignedShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            var i_ = modBits(i);
            t.deepEqual($$Number.Int16.lsr(n, i), fromFloatExn(Math.floor((
                          value < 0 && i_ !== 0 ? value & mask : value
                        ) / Math.pow(2.0, i_))), undefined);
          }
        };
        testUnsignedShiftRight(10000);
        testUnsignedShiftRight(-10001);
        TestUtils.loop100Fn(function () {
              testUnsignedShiftRight(TestUtils.randomInt(-32768, 32767));
            });
        var testShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Int16.asr(n, i), fromFloatExn(Math.floor(value / Math.pow(2.0, modBits(i)))), undefined);
            t.deepEqual($$Number.Int16.lnot($$Number.Int16.asr(n, i)), $$Number.Int16.asr($$Number.Int16.lnot(n), i), undefined);
          }
        };
        testShiftRight(10000);
        testShiftRight(-10001);
        TestUtils.loop100Fn(function () {
              testShiftRight(TestUtils.randomInt(-32768, 32767));
            });
        var value$1 = fromIntExn(10000);
        for(var i$1 = -16; i$1 <= 32; ++i$1){
          t.deepEqual($$Number.Int16.rsl(value$1, i$1), fromIntExn(Belt_Array.getExn(valueRotateShiftLeft, modBits(i$1))), undefined);
        }
        var testRotateShiftLeft = function (value) {
          var n = fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Int16.lnot($$Number.Int16.rsl(n, i)), $$Number.Int16.rsl($$Number.Int16.lnot(n), i), undefined);
          }
        };
        testRotateShiftLeft(10000);
        testRotateShiftLeft(-10001);
        TestUtils.loop100Fn(function () {
              testRotateShiftLeft(TestUtils.randomInt(-32768, 32767));
            });
        var testRotateShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Int16.rsl(n, i), $$Number.Int16.rsr(n, 16 - i | 0), undefined);
            t.deepEqual($$Number.Int16.lnot($$Number.Int16.rsr(n, i)), $$Number.Int16.rsr($$Number.Int16.lnot(n), i), undefined);
          }
        };
        testRotateShiftRight(10000);
        testRotateShiftRight(-10001);
        TestUtils.loop100Fn(function () {
              testRotateShiftRight(TestUtils.randomInt(-32768, 32767));
            });
      }));

Ava("test " + name + " integer math", (function (t) {
        var testClz = function (n, result) {
          t.deepEqual($$Number.Int16.clz(n), result, undefined);
        };
        testClz(zero, 16);
        testClz(fromIntExn(-1), 0);
        testClz($$Number.Int16.minValue, 0);
        testClz($$Number.Int16.maxValue, 1);
        for(var i = 0; i <= 15; ++i){
          testClz($$Number.Int16.lsl(one, i), (16 - i | 0) - 1 | 0);
        }
        t.deepEqual($$Number.Int16.imul(fromIntExn(-73), fromIntExn(382)), fromIntExn(-27886), undefined);
        var mask = 65535;
        var j = Math.pow(2.0, 16);
        var k = Math.pow(2.0, 15);
        var toU32 = function (i) {
          return TestUtils.intToUint32(i & mask);
        };
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomInt(-32768, 32767);
              var m = toU32(a) * toU32(b) % j;
              var result = true && m >= k ? m - j : m;
              t.deepEqual($$Number.Int16.imul(fromIntExn(a), fromIntExn(b)), fromFloatExn(result), undefined);
              t.deepEqual($$Number.Int16.imul(fromIntExn(b), fromIntExn(a)), fromFloatExn(result), undefined);
            });
        var testPowInRange = function (a, b) {
          var result = fromFloatExn(Math.pow(a, b));
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.pow(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int16.powExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.powUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int16.pow(a$1, zero), Caml_option.some(one), undefined);
          t.deepEqual($$Number.Int16.powExn(a$1, zero), one, undefined);
          t.deepEqual($$Number.Int16.powUnsafe(a$1, zero), one, undefined);
          t.deepEqual($$Number.Int16.pow(b$1, zero), Caml_option.some(one), undefined);
          t.deepEqual($$Number.Int16.powExn(b$1, zero), one, undefined);
          t.deepEqual($$Number.Int16.powUnsafe(b$1, zero), one, undefined);
          t.deepEqual($$Number.Int16.pow(a$1, one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int16.powExn(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int16.powUnsafe(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int16.pow(b$1, one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int16.powExn(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int16.powUnsafe(b$1, one), b$1, undefined);
        };
        testPowInRange(0, 1);
        testPowInRange(1, 0);
        testPowInRange(10000, 0);
        testPowInRange(-32768, 1);
        testPowInRange(32767, 1);
        var testPowOutOfRange = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.powExn(a$1, b$1);
                }));
        };
        testPowOutOfRange(32767, 2);
        testPowOutOfRange(-32768, 2);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-32768, 32767);
              var b = TestUtils.randomPositiveSmallInt(undefined);
              var result = Math.pow(a, b);
              if (result >= -32768 && result <= 32767) {
                return testPowInRange(a, b);
              } else {
                return testPowOutOfRange(a, b);
              }
            });
        var testPowNotInteger = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int16.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int16.powExn(a$1, b$1);
                }));
        };
        testPowNotInteger(10000, -1);
        testPowNotInteger(-32768, -1);
        testPowNotInteger(32767, -1);
        TestUtils.loop100Fn(function () {
              var m = TestUtils.randomInt(-32768, 32767);
              var n = TestUtils.randomInt(-32768, 32767);
              var min = fromIntExn(m < n ? m : n);
              var max = fromIntExn(m > n ? m : n);
              if (min !== max) {
                return TestUtils.loopFn((function () {
                              var i = $$Number.Int16.random(min, max);
                              t.true($$Number.Int16.ge(i, min), undefined);
                              t.true($$Number.Int16.lt(i, max), undefined);
                            }), 10);
              }
              
            });
      }));

Ava("test " + name + " signed math", (function (t) {
        var testNegInRange = function (i) {
          var a = fromIntExn(i);
          var b = fromIntExn(-i | 0);
          t.deepEqual($$Number.Int16.neg(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int16.negExn(a), b, undefined);
          t.deepEqual($$Number.Int16.negUnsafe(a), b, undefined);
          t.deepEqual($$Number.Int16.neg(b), Caml_option.some(a), undefined);
          t.deepEqual($$Number.Int16.negExn(b), a, undefined);
          t.deepEqual($$Number.Int16.negUnsafe(b), a, undefined);
        };
        testNegInRange(0);
        testNegInRange(negZero);
        testNegInRange(1);
        testNegInRange(10000);
        testNegInRange(-32767);
        testNegInRange(32767);
        testNegInRange(32766);
        var testNegOutOfRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.neg(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.negExn(n);
                }));
        };
        testNegOutOfRange(-32768);
        TestUtils.loop100Fn(function () {
              var i = TestUtils.randomInt(-32768, 32767);
              if (i !== -32768) {
                return testNegInRange(i);
              } else {
                return testNegOutOfRange(i);
              }
            });
        var testAbsInRange = function (i) {
          var a = fromIntExn(i);
          var b = fromIntExn(i < 0 ? -i | 0 : i);
          t.deepEqual($$Number.Int16.abs(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int16.absExn(a), b, undefined);
          t.deepEqual($$Number.Int16.absUnsafe(a), b, undefined);
          t.deepEqual($$Number.Int16.abs(b), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int16.absExn(b), b, undefined);
          t.deepEqual($$Number.Int16.absUnsafe(b), b, undefined);
        };
        testAbsInRange(0);
        testAbsInRange(negZero);
        testAbsInRange(-1);
        testAbsInRange(-10000);
        testAbsInRange(-32767);
        testAbsInRange(-32766);
        var testAbsOutOfRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int16.abs(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int16.absExn(n);
                }));
        };
        testAbsOutOfRange(-32768);
        TestUtils.loop100Fn(function () {
              var i = TestUtils.randomInt(-32768, 32767);
              if (i !== -32768) {
                return testAbsInRange(i);
              } else {
                return testAbsOutOfRange(i);
              }
            });
        var testSign = function (i) {
          var test_ = function (i) {
            var n = fromIntExn(i);
            var result = i < 0 ? -1 : (
                i > 0 ? 1 : 0
              );
            var raw = i < 0 ? -1.0 : (
                i > 0 ? 1.0 : 0.0
              );
            t.deepEqual($$Number.Int16.sign(n), result, undefined);
            t.deepEqual($$Number.Int16.signExn(n), result, undefined);
            t.deepEqual($$Number.Int16.signRaw(n), raw, undefined);
          };
          test_(i);
          if (i !== -32768) {
            return test_(-i | 0);
          }
          
        };
        testFn(testSign);
      }));

var IntModule;

var isSigned = true;

var is32Bits = false;

var bits = 16;

var minValue = -32768;

var maxValue = 32767;

var value = 10000;

var valueNot = -10001;

var less = -73;

var greater = 382;

var lessGreaterAnd = 310;

var lessGreaterOr = -1;

var lessGreaterXor = -311;

export {
  IntModule ,
  name ,
  isSigned ,
  is32Bits ,
  bits ,
  minValue ,
  maxValue ,
  value ,
  valueNot ,
  valueShiftLeft ,
  valueRotateShiftLeft ,
  less ,
  greater ,
  lessGreaterAnd ,
  lessGreaterOr ,
  lessGreaterXor ,
  negZero ,
  zero ,
  one ,
  fromIntExn ,
  fromFloatExn ,
  randomValue ,
  randomLargerInt ,
  randomSmallerInt ,
  testFn ,
}
/*  Not a pure module */
