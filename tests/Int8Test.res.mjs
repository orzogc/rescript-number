// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.res.mjs";
import * as TestUtils from "./TestUtils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var name = "Int8";

var valueShiftLeft = [
  100,
  -56,
  -112,
  32,
  64,
  -128,
  0,
  0
];

var valueRotateShiftLeft = [
  100,
  -56,
  -111,
  35,
  70,
  -116,
  25,
  50
];

var negZero = -0;

var zero = $$Number.Int8.zero;

var one = $$Number.Int8.one;

var fromIntExn = $$Number.Int8.fromIntExn;

var fromFloatExn = $$Number.Int8.fromFloatExn;

function randomValue() {
  return TestUtils.randomInt(-128, 127);
}

function randomLargerInt() {
  return TestUtils.randomInt(127 + 1.0, Js_int.max);
}

function randomSmallerInt() {
  return TestUtils.randomInt(Js_int.min, -128);
}

function testFn(fn) {
  fn(0);
  fn(negZero);
  fn(1);
  fn(100);
  fn(-7);
  fn(18);
  fn(-128);
  fn(-127);
  fn(127);
  fn(126);
  TestUtils.loop100Fn(function () {
        fn(TestUtils.randomInt(-128, 127));
      });
}

Ava("test " + name + " sign", (function (t) {
        t.deepEqual($$Number.Int8.isSigned, true, undefined);
        t.deepEqual($$Number.Int8.isUnsigned, false, undefined);
      }));

Ava("test " + name + " bits", (function (t) {
        t.deepEqual($$Number.Int8.bits, 8, undefined);
      }));

Ava("test " + name + " from int", (function (t) {
        var testInRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.fromInt(i), Caml_option.some(n), undefined);
          t.deepEqual(fromIntExn(i), n, undefined);
          t.deepEqual($$Number.Int8.fromIntClamped(i), n, undefined);
          t.deepEqual($$Number.Int8.fromIntUnsafe(i), n, undefined);
        };
        testFn(testInRange);
        testInRange(-1);
        testInRange(-100);
        testInRange(-127);
        testInRange(127);
        var testOutOfRange = function (i, value) {
          t.deepEqual($$Number.Int8.fromInt(i), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int8.fromIntClamped(i), fromIntExn(value), undefined);
        };
        testOutOfRange(-129, -128);
        testOutOfRange(128, 127);
        testOutOfRange(-228, -128);
        testOutOfRange(227, 127);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(), 127);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, -128), -128);
            });
      }));

Ava("test " + name + " to int", (function (t) {
        var testToInt = function (i) {
          var n = fromIntExn(i);
          var i$1 = i | 0;
          t.deepEqual($$Number.Int8.toInt(n), i$1, undefined);
          t.deepEqual($$Number.Int8.toIntExn(n), i$1, undefined);
          t.deepEqual($$Number.Int8.toIntClamped(n), i$1, undefined);
          t.deepEqual($$Number.Int8.toIntUnsafe(n), i$1, undefined);
        };
        testFn(testToInt);
        testToInt(-1);
        testToInt(-100);
        testToInt(-127);
        testToInt(127);
      }));

Ava("test " + name + " from float", (function (t) {
        var testIsIntegerAndInRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.fromFloat(i), Caml_option.some(n), undefined);
          t.deepEqual(fromFloatExn(i), n, undefined);
          t.deepEqual($$Number.Int8.fromFloatClamped(i), n, undefined);
          t.deepEqual($$Number.Int8.fromFloatUnsafe(i), n, undefined);
        };
        testFn(testIsIntegerAndInRange);
        testIsIntegerAndInRange(-1);
        testIsIntegerAndInRange(-100);
        testIsIntegerAndInRange(-127);
        testIsIntegerAndInRange(127);
        var testOutOfRange = function (f, value) {
          t.deepEqual($$Number.Int8.fromFloat(f), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return fromFloatExn(f);
                }));
          t.deepEqual($$Number.Int8.fromFloatClamped(f), fromIntExn(value), undefined);
        };
        testOutOfRange(-128 - 1.0, -128);
        testOutOfRange(127 + 1.0, 127);
        testOutOfRange(-228, -128);
        testOutOfRange(227, 127);
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(127 + 1.0, TestUtils.maxSafeInteger)), 127);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(TestUtils.minSafeInteger, -128 - 1.0)), -128);
            });
        var testIsNotInteger = function (f, value) {
          t.deepEqual($$Number.Int8.fromFloat(f), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return fromFloatExn(f);
                }));
          t.deepEqual($$Number.Int8.fromFloatClamped(f), fromIntExn(value), undefined);
        };
        testIsNotInteger(100 + 0.5, 100);
        var f = - 100 - 0.5;
        testIsNotInteger(f, f | 0);
        testIsNotInteger(-128 + 0.1, -127);
        testIsNotInteger(Number.NaN, 0);
        testIsNotInteger(PervasivesU.neg_infinity, -128);
        testIsNotInteger(PervasivesU.infinity, 127);
        testIsNotInteger(-128 - 0.1, -128);
        testIsNotInteger(127 + 0.1, 127);
        testIsNotInteger(127 - 0.1, 126);
        testIsNotInteger(-228 - 0.5, -128);
        testIsNotInteger(227 + 0.5, 127);
      }));

Ava("test " + name + " to float", (function (t) {
        var testToFloat = function (i) {
          t.deepEqual($$Number.Int8.toFloat(fromFloatExn(i)), i, undefined);
        };
        testToFloat(100);
        TestUtils.loop100Fn(function () {
              testToFloat(TestUtils.randomInt(-128, 127));
            });
      }));

Ava("test " + name + " from string", (function (t) {
        var testInRange = function (i, s) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.fromString(s), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Int8.fromStringExn(s), n, undefined);
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = i.toString(radix);
            t.deepEqual($$Number.Int8.fromStringWithRadix(s$1, radix), Caml_option.some(n), undefined);
            t.deepEqual($$Number.Int8.fromStringWithRadixExn(s$1, radix), n, undefined);
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 37);
                }));
        };
        testInRange(0, "0");
        testInRange(0, "-0");
        testInRange(1, "1");
        testInRange(100, String(100));
        testInRange(100, String(100 + 0.5));
        testInRange(-128, String(-128));
        testInRange(127, String(127));
        testInRange(-127, String(-127));
        testInRange(126, String(126));
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-128, 127);
              testInRange(value, String(value));
            });
        testInRange(-100, String(-100));
        testInRange(-100, String(- 100 - 0.5));
        testInRange(-127, String(-127));
        testInRange(127, String(127));
        var testOutOfRange = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Int8.fromString(s), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.fromStringExn(s);
                }));
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = f.toString(radix);
            t.deepEqual($$Number.Int8.fromStringWithRadix(s$1, radix), undefined, undefined);
            TestUtils.assertOverflow(t, (function(radix,s$1){
                return function () {
                  return $$Number.Int8.fromStringWithRadixExn(s$1, radix);
                }
                }(radix,s$1)));
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 37);
                }));
        };
        testOutOfRange(-128 - 1.0);
        testOutOfRange(127 + 1.0);
        testOutOfRange(-228);
        testOutOfRange(227);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt());
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, -128));
            });
        var testIsNotInteger = function (s) {
          t.deepEqual($$Number.Int8.fromString(s), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringExn(s);
                }));
          for(var radix = 2; radix <= 10; ++radix){
            t.deepEqual($$Number.Int8.fromStringWithRadix(s, radix), undefined, undefined);
            TestUtils.assertInvalidArgument(t, (function(radix){
                return function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, radix);
                }
                }(radix)));
          }
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 1);
                }));
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.fromStringWithRadixExn(s, 37);
                }));
        };
        testIsNotInteger("NaN");
        testIsNotInteger("Infinity");
        testIsNotInteger("-Infinity");
        testIsNotInteger("foo");
        testIsNotInteger("b1");
      }));

Ava("test " + name + " to string", (function (t) {
        var testToString = function (i) {
          var s = String(i);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.toString(n), s, undefined);
          for(var radix = 2; radix <= 36; ++radix){
            var s$1 = i.toString(radix);
            t.deepEqual($$Number.Int8.toStringWithRadixExn(n, radix), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int8.toStringWithRadixExn(n, 1);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int8.toStringWithRadixExn(n, 37);
                }), undefined, undefined);
        };
        testFn(testToString);
        var testToExponential = function (i) {
          var s = i.toExponential();
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.toExponential(n), s, undefined);
          for(var digits = 0; digits <= 100; ++digits){
            var s$1 = i.toExponential(digits);
            t.deepEqual($$Number.Int8.toExponentialWithPrecisionExn(n, digits), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int8.toExponentialWithPrecisionExn(n, -1);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int8.toExponentialWithPrecisionExn(n, 101);
                }), undefined, undefined);
        };
        testFn(testToExponential);
        var testToPrecision = function (i) {
          var s = i.toPrecision();
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.toPrecision(n), s, undefined);
          for(var digits = 1; digits <= 100; ++digits){
            var s$1 = i.toPrecision(digits);
            t.deepEqual($$Number.Int8.toPrecisionWithPrecisionExn(n, digits), s$1, undefined);
          }
          t.throws((function () {
                  return $$Number.Int8.toPrecisionWithPrecisionExn(n, 0);
                }), undefined, undefined);
          t.throws((function () {
                  return $$Number.Int8.toPrecisionWithPrecisionExn(n, 101);
                }), undefined, undefined);
        };
        testFn(testToPrecision);
      }));

Ava("test " + name + " zero", (function (t) {
        t.deepEqual(zero, fromIntExn(0), undefined);
        t.deepEqual(zero, fromFloatExn(0.0), undefined);
        t.deepEqual(zero, fromFloatExn(-0.0), undefined);
      }));

Ava("test " + name + " one", (function (t) {
        t.deepEqual(one, fromIntExn(1), undefined);
        t.deepEqual(one, fromFloatExn(1.0), undefined);
      }));

Ava("test " + name + " range", (function (t) {
        t.deepEqual($$Number.Int8.minValue, fromIntExn(-128), undefined);
        t.deepEqual($$Number.Int8.minValue, fromFloatExn(-128), undefined);
        t.deepEqual($$Number.Int8.maxValue, fromIntExn(127), undefined);
        t.deepEqual($$Number.Int8.maxValue, fromFloatExn(127), undefined);
      }));

Ava("test " + name + " comparison", (function (t) {
        var testCompare = function (less, greater) {
          var less$1 = fromIntExn(less);
          var greater$1 = fromIntExn(greater);
          var value = fromIntExn(100);
          var minValue = fromIntExn(-128);
          var maxValue = fromIntExn(127);
          t.deepEqual($$Number.Int8.compare(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Int8.compare(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Int8.compare(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Int8.compare(greater$1, greater$1), 0, undefined);
          t.deepEqual($$Number.Int8.compareExn(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Int8.compareExn(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Int8.compareExn(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Int8.compareExn(greater$1, greater$1), 0, undefined);
          t.true($$Number.Int8.eq(less$1, less$1), undefined);
          t.true($$Number.Int8.eq(greater$1, greater$1), undefined);
          t.false($$Number.Int8.eq(less$1, greater$1), undefined);
          t.false($$Number.Int8.eq(greater$1, less$1), undefined);
          t.true($$Number.Int8.ne(less$1, greater$1), undefined);
          t.true($$Number.Int8.ne(greater$1, less$1), undefined);
          t.false($$Number.Int8.ne(less$1, less$1), undefined);
          t.false($$Number.Int8.ne(greater$1, greater$1), undefined);
          t.true($$Number.Int8.lt(less$1, greater$1), undefined);
          t.false($$Number.Int8.lt(greater$1, less$1), undefined);
          t.false($$Number.Int8.lt(less$1, less$1), undefined);
          t.false($$Number.Int8.lt(greater$1, greater$1), undefined);
          t.true($$Number.Int8.le(less$1, greater$1), undefined);
          t.false($$Number.Int8.le(greater$1, less$1), undefined);
          t.true($$Number.Int8.le(less$1, less$1), undefined);
          t.true($$Number.Int8.le(greater$1, greater$1), undefined);
          t.true($$Number.Int8.gt(greater$1, less$1), undefined);
          t.false($$Number.Int8.gt(less$1, greater$1), undefined);
          t.false($$Number.Int8.gt(less$1, less$1), undefined);
          t.false($$Number.Int8.gt(greater$1, greater$1), undefined);
          t.true($$Number.Int8.ge(greater$1, less$1), undefined);
          t.false($$Number.Int8.ge(less$1, greater$1), undefined);
          t.true($$Number.Int8.ge(less$1, less$1), undefined);
          t.true($$Number.Int8.ge(greater$1, greater$1), undefined);
          t.deepEqual($$Number.Int8.min(less$1, greater$1), less$1, undefined);
          t.deepEqual($$Number.Int8.min(greater$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int8.min(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int8.min(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int8.minMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int8.minMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int8.minMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int8.minMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(minValue), undefined);
          t.deepEqual($$Number.Int8.minManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyExn([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyExn([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Int8.minManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyUnsafe([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyUnsafe([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Int8.minManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Int8.max(less$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int8.max(greater$1, less$1), greater$1, undefined);
          t.deepEqual($$Number.Int8.max(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Int8.max(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Int8.maxMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Int8.maxMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Int8.maxMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Int8.maxMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(maxValue), undefined);
          t.deepEqual($$Number.Int8.maxManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int8.maxManyExn([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int8.maxManyExn([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int8.maxManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), maxValue, undefined);
          t.deepEqual($$Number.Int8.maxManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Int8.maxManyUnsafe([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int8.maxManyUnsafe([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Int8.maxManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), maxValue, undefined);
        };
        testCompare(-7, 18);
        TestUtils.loop100Fn(function () {
              var less = TestUtils.randomInt(-128, 127);
              var greater = TestUtils.randomInt(less + 1.0, 127 + 1.0);
              testCompare(less, greater);
            });
        var zero = fromIntExn(0);
        var negZero$1 = fromIntExn(negZero);
        t.true($$Number.Int8.eq(zero, negZero$1), undefined);
        t.true($$Number.Int8.le(zero, negZero$1), undefined);
        t.true($$Number.Int8.ge(zero, negZero$1), undefined);
        t.false($$Number.Int8.lt(zero, negZero$1), undefined);
        t.false($$Number.Int8.gt(zero, negZero$1), undefined);
        t.deepEqual($$Number.Int8.minMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int8.minManyExn([]);
              }));
        t.deepEqual($$Number.Int8.maxMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int8.maxManyExn([]);
              }));
      }));

Ava("test " + name + " addition", (function (t) {
        var testInRange = function (a, b) {
          if (a !== -128) {
            var negA = fromIntExn(-a | 0);
            var a$1 = fromIntExn(a);
            t.deepEqual($$Number.Int8.add(a$1, negA), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.add(a$1, negA), $$Number.Int8.add(negA, a$1), undefined);
            t.deepEqual($$Number.Int8.addExn(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int8.addExn(a$1, negA), $$Number.Int8.addExn(negA, a$1), undefined);
            t.deepEqual($$Number.Int8.addClamped(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int8.addClamped(a$1, negA), $$Number.Int8.addClamped(negA, a$1), undefined);
            t.deepEqual($$Number.Int8.addUnsafe(a$1, negA), zero, undefined);
            t.deepEqual($$Number.Int8.addUnsafe(a$1, negA), $$Number.Int8.addUnsafe(negA, a$1), undefined);
          }
          if (b !== -128) {
            var negB = fromIntExn(-b | 0);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int8.add(b$1, negB), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.add(b$1, negB), $$Number.Int8.add(negB, b$1), undefined);
            t.deepEqual($$Number.Int8.addExn(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int8.addExn(b$1, negB), $$Number.Int8.addExn(negB, b$1), undefined);
            t.deepEqual($$Number.Int8.addClamped(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int8.addClamped(b$1, negB), $$Number.Int8.addClamped(negB, b$1), undefined);
            t.deepEqual($$Number.Int8.addUnsafe(b$1, negB), zero, undefined);
            t.deepEqual($$Number.Int8.addUnsafe(b$1, negB), $$Number.Int8.addUnsafe(negB, b$1), undefined);
          }
          var result = fromIntExn(a + b | 0);
          var a$2 = fromIntExn(a);
          var b$2 = fromIntExn(b);
          t.deepEqual($$Number.Int8.add(a$2, b$2), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.add(a$2, b$2), $$Number.Int8.add(b$2, a$2), undefined);
          t.deepEqual($$Number.Int8.addExn(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int8.addExn(a$2, b$2), $$Number.Int8.addExn(b$2, a$2), undefined);
          t.deepEqual($$Number.Int8.addClamped(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int8.addClamped(a$2, b$2), $$Number.Int8.addClamped(b$2, a$2), undefined);
          t.deepEqual($$Number.Int8.addUnsafe(a$2, b$2), result, undefined);
          t.deepEqual($$Number.Int8.addUnsafe(a$2, b$2), $$Number.Int8.addUnsafe(b$2, a$2), undefined);
          t.deepEqual($$Number.Int8.add(a$2, zero), Caml_option.some(a$2), undefined);
          t.deepEqual($$Number.Int8.add(a$2, zero), $$Number.Int8.add(zero, a$2), undefined);
          t.deepEqual($$Number.Int8.addExn(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int8.addExn(a$2, zero), $$Number.Int8.addExn(zero, a$2), undefined);
          t.deepEqual($$Number.Int8.addClamped(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int8.addClamped(a$2, zero), $$Number.Int8.addClamped(zero, a$2), undefined);
          t.deepEqual($$Number.Int8.addUnsafe(a$2, zero), a$2, undefined);
          t.deepEqual($$Number.Int8.addUnsafe(a$2, zero), $$Number.Int8.addUnsafe(zero, a$2), undefined);
          t.deepEqual($$Number.Int8.add(b$2, zero), Caml_option.some(b$2), undefined);
          t.deepEqual($$Number.Int8.add(b$2, zero), $$Number.Int8.add(zero, b$2), undefined);
          t.deepEqual($$Number.Int8.addExn(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int8.addExn(b$2, zero), $$Number.Int8.addExn(zero, b$2), undefined);
          t.deepEqual($$Number.Int8.addClamped(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int8.addClamped(b$2, zero), $$Number.Int8.addClamped(zero, b$2), undefined);
          t.deepEqual($$Number.Int8.addUnsafe(b$2, zero), b$2, undefined);
          t.deepEqual($$Number.Int8.addUnsafe(b$2, zero), $$Number.Int8.addUnsafe(zero, b$2), undefined);
        };
        testInRange(-7, 18);
        testInRange(-128, 0);
        testInRange(127, 0);
        testInRange(-128, 1);
        testInRange(127, -1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int8.add(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Int8.add(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.addExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.addExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Int8.addClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int8.addClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(-128, -1, -128);
        testOutOfRange(-128, -100, -128);
        testOutOfRange(127, 1, 127);
        testOutOfRange(127, 100, 127);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              var result = a + b;
              if (result < -128) {
                testOutOfRange(a, b, -128);
              } else if (result > 127) {
                testOutOfRange(a, b, 127);
              } else {
                testInRange(a, b);
              }
              testInRange(a, 1);
              testInRange(b, 1);
            });
      }));

Ava("test " + name + " subtraction", (function (t) {
        var testInRange = function (a, b) {
          var result = fromIntExn(a - b | 0);
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.sub(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.subExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.subClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.sub(a$1, result), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int8.subExn(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int8.subClamped(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Int8.sub(a$1, a$1), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.subExn(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int8.subClamped(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int8.sub(a$1, zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int8.subExn(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int8.subClamped(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(a$1, zero), a$1, undefined);
          t.deepEqual($$Number.Int8.sub(b$1, b$1), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.subExn(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int8.subClamped(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int8.sub(b$1, zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int8.subExn(b$1, zero), b$1, undefined);
          t.deepEqual($$Number.Int8.subClamped(b$1, zero), b$1, undefined);
          t.deepEqual($$Number.Int8.subUnsafe(b$1, zero), b$1, undefined);
        };
        testInRange(18, -7);
        testInRange(-128, 0);
        testInRange(127, 0);
        testInRange(127, 1);
        testInRange(-7, 18);
        testInRange(-128, -1);
        testInRange(0, 127);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.sub(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.subExn(a$1, b$1);
                }));
          t.deepEqual($$Number.Int8.subClamped(a$1, b$1), fromIntExn(value), undefined);
        };
        testOutOfRange(-128, 1, -128);
        testOutOfRange(-128, 100, -128);
        testOutOfRange(127, -1, 127);
        testOutOfRange(127, -100, 127);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              var result = a - b;
              if (result < -128) {
                testOutOfRange(a, b, -128);
              } else if (result > 127) {
                testOutOfRange(a, b, 127);
              } else {
                testInRange(a, b);
              }
              var result$1 = b - a;
              if (result$1 < -128) {
                return testOutOfRange(b, a, -128);
              } else if (result$1 > 127) {
                return testOutOfRange(b, a, 127);
              } else {
                return testInRange(b, a);
              }
            });
      }));

Ava("test " + name + " multiplication", (function (t) {
        var testInRange = function (a, b) {
          var result = fromIntExn(Math.imul(a, b));
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.mul(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.mul(a$1, b$1), $$Number.Int8.mul(b$1, a$1), undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, b$1), $$Number.Int8.mulExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, b$1), $$Number.Int8.mulClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, b$1), $$Number.Int8.mulUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Int8.mul(a$1, zero), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.mul(a$1, zero), $$Number.Int8.mul(zero, a$1), undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, zero), $$Number.Int8.mulExn(zero, a$1), undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, zero), $$Number.Int8.mulClamped(zero, a$1), undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, zero), $$Number.Int8.mulUnsafe(zero, a$1), undefined);
          t.deepEqual($$Number.Int8.mul(a$1, one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int8.mul(a$1, one), $$Number.Int8.mul(one, a$1), undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int8.mulExn(a$1, one), $$Number.Int8.mulExn(one, a$1), undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int8.mulClamped(a$1, one), $$Number.Int8.mulClamped(one, a$1), undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(a$1, one), $$Number.Int8.mulUnsafe(one, a$1), undefined);
          t.deepEqual($$Number.Int8.mul(b$1, zero), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.mul(b$1, zero), $$Number.Int8.mul(zero, b$1), undefined);
          t.deepEqual($$Number.Int8.mulExn(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulExn(b$1, zero), $$Number.Int8.mulExn(zero, b$1), undefined);
          t.deepEqual($$Number.Int8.mulClamped(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulClamped(b$1, zero), $$Number.Int8.mulClamped(zero, b$1), undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(b$1, zero), zero, undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(b$1, zero), $$Number.Int8.mulUnsafe(zero, b$1), undefined);
          t.deepEqual($$Number.Int8.mul(b$1, one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int8.mul(b$1, one), $$Number.Int8.mul(one, b$1), undefined);
          t.deepEqual($$Number.Int8.mulExn(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int8.mulExn(b$1, one), $$Number.Int8.mulExn(one, b$1), undefined);
          t.deepEqual($$Number.Int8.mulClamped(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int8.mulClamped(b$1, one), $$Number.Int8.mulClamped(one, b$1), undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int8.mulUnsafe(b$1, one), $$Number.Int8.mulUnsafe(one, b$1), undefined);
        };
        testInRange(-7, 18);
        testInRange(-128, 0);
        testInRange(127, 0);
        testInRange(-128, 1);
        testInRange(127, 1);
        testInRange(-127, 1);
        testInRange(126, 1);
        testInRange(-127, 1);
        testInRange(127, -1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int8.mul(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Int8.mul(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.mulExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.mulExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Int8.mulClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int8.mulClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(127, 2, 127);
        testOutOfRange(127, 100, 127);
        testOutOfRange(-128, 2, -128);
        testOutOfRange(-128, 100, -128);
        testOutOfRange(-128, -1, 127);
        testOutOfRange(127, -2, -128);
        testOutOfRange(-128, -100, 127);
        testOutOfRange(127, -100, -128);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              var result = a * b;
              if (result < -128) {
                return testOutOfRange(a, b, -128);
              } else if (result > 127) {
                return testOutOfRange(a, b, 127);
              } else {
                return testInRange(a, b);
              }
            });
      }));

Ava("test " + name + " division", (function (t) {
        var testNotDividedByZero = function (a, b) {
          var negOne = fromIntExn(-1);
          if (a !== -128) {
            var negA = fromIntExn(-a | 0);
            var a$1 = fromIntExn(a);
            t.deepEqual($$Number.Int8.div(a$1, negOne), Caml_option.some(negA), undefined);
            t.deepEqual($$Number.Int8.divExn(a$1, negOne), negA, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(a$1, negOne), negA, undefined);
          }
          if (b !== -128) {
            var negB = fromIntExn(-b | 0);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int8.div(b$1, negOne), Caml_option.some(negB), undefined);
            t.deepEqual($$Number.Int8.divExn(b$1, negOne), negB, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(b$1, negOne), negB, undefined);
          }
          if (a !== 0) {
            var result = fromIntExn(Caml_int32.div(b, a));
            var a$2 = fromIntExn(a);
            var b$2 = fromIntExn(b);
            t.deepEqual($$Number.Int8.div(b$2, a$2), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Int8.divExn(b$2, a$2), result, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(b$2, a$2), result, undefined);
            t.deepEqual($$Number.Int8.div(a$2, a$2), Caml_option.some(one), undefined);
            t.deepEqual($$Number.Int8.divExn(a$2, a$2), one, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(a$2, a$2), one, undefined);
            t.deepEqual($$Number.Int8.div(zero, a$2), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.divExn(zero, a$2), zero, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(zero, a$2), zero, undefined);
          }
          if (b !== 0) {
            var result$1 = fromIntExn(Caml_int32.div(a, b));
            var a$3 = fromIntExn(a);
            var b$3 = fromIntExn(b);
            t.deepEqual($$Number.Int8.div(a$3, b$3), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Int8.divExn(a$3, b$3), result$1, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(a$3, b$3), result$1, undefined);
            t.deepEqual($$Number.Int8.div(b$3, b$3), Caml_option.some(one), undefined);
            t.deepEqual($$Number.Int8.divExn(b$3, b$3), one, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(b$3, b$3), one, undefined);
            t.deepEqual($$Number.Int8.div(zero, b$3), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.divExn(zero, b$3), zero, undefined);
            t.deepEqual($$Number.Int8.divUnsafe(zero, b$3), zero, undefined);
          }
          var a$4 = fromIntExn(a);
          var b$4 = fromIntExn(b);
          t.deepEqual($$Number.Int8.div(a$4, one), Caml_option.some(a$4), undefined);
          t.deepEqual($$Number.Int8.divExn(a$4, one), a$4, undefined);
          t.deepEqual($$Number.Int8.divUnsafe(a$4, one), a$4, undefined);
          t.deepEqual($$Number.Int8.div(b$4, one), Caml_option.some(b$4), undefined);
          t.deepEqual($$Number.Int8.divExn(b$4, one), b$4, undefined);
          t.deepEqual($$Number.Int8.divUnsafe(b$4, one), b$4, undefined);
        };
        testNotDividedByZero(0, 100);
        testNotDividedByZero(negZero, 100);
        testNotDividedByZero(-7, 18);
        testNotDividedByZero(-128, -7);
        testNotDividedByZero(-128, 18);
        testNotDividedByZero(127, -7);
        testNotDividedByZero(127, 18);
        testNotDividedByZero(-7, 2);
        testNotDividedByZero(18, 2);
        testNotDividedByZero(-128, 2);
        testNotDividedByZero(127, 2);
        testNotDividedByZero(-127, 2);
        testNotDividedByZero(126, 2);
        testNotDividedByZero(-7, -18);
        testNotDividedByZero(18, 7);
        testNotDividedByZero(7, -18);
        testNotDividedByZero(-128, 7);
        testNotDividedByZero(-128, -18);
        testNotDividedByZero(127, 7);
        testNotDividedByZero(127, -18);
        testNotDividedByZero(-127, 7);
        testNotDividedByZero(-127, -18);
        testNotDividedByZero(-7, -2);
        testNotDividedByZero(18, -2);
        testNotDividedByZero(-128, -2);
        testNotDividedByZero(127, -2);
        testNotDividedByZero(-127, -2);
        testNotDividedByZero(126, -2);
        var testDividedByZero = function (i) {
          var a = fromIntExn(i);
          t.deepEqual($$Number.Int8.div(a, zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int8.divExn(a, zero);
                }));
          var negZero$1 = fromIntExn(negZero);
          t.deepEqual($$Number.Int8.div(a, negZero$1), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int8.divExn(a, negZero$1);
                }));
        };
        testFn(testDividedByZero);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              testNotDividedByZero(a, b);
              testDividedByZero(a);
              testDividedByZero(b);
            });
      }));

Ava("test " + name + " remainder", (function (t) {
        var testNotModByZero = function (a, b) {
          if (a !== 0) {
            var result = fromIntExn(Caml_int32.mod_(b, a) | 0);
            var a$1 = fromIntExn(a);
            var b$1 = fromIntExn(b);
            t.deepEqual($$Number.Int8.rem(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Int8.remExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Int8.remUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Int8.rem(zero, a$1), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.remExn(zero, a$1), zero, undefined);
            t.deepEqual($$Number.Int8.remUnsafe(zero, a$1), zero, undefined);
          }
          if (b !== 0) {
            var result$1 = fromIntExn(Caml_int32.mod_(a, b) | 0);
            var a$2 = fromIntExn(a);
            var b$2 = fromIntExn(b);
            t.deepEqual($$Number.Int8.rem(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Int8.remExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Int8.remUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Int8.rem(zero, b$2), Caml_option.some(zero), undefined);
            t.deepEqual($$Number.Int8.remExn(zero, b$2), zero, undefined);
            t.deepEqual($$Number.Int8.remUnsafe(zero, b$2), zero, undefined);
          }
          var a$3 = fromIntExn(a);
          var b$3 = fromIntExn(b);
          t.deepEqual($$Number.Int8.rem(a$3, one), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.remExn(a$3, one), zero, undefined);
          t.deepEqual($$Number.Int8.remUnsafe(a$3, one), zero, undefined);
          t.deepEqual($$Number.Int8.rem(b$3, one), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.remExn(b$3, one), zero, undefined);
          t.deepEqual($$Number.Int8.remUnsafe(b$3, one), zero, undefined);
          var negOne = fromIntExn(-1);
          t.deepEqual($$Number.Int8.rem(a$3, negOne), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.remExn(a$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int8.remUnsafe(a$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int8.rem(b$3, negOne), Caml_option.some(zero), undefined);
          t.deepEqual($$Number.Int8.remExn(b$3, negOne), zero, undefined);
          t.deepEqual($$Number.Int8.remUnsafe(b$3, negOne), zero, undefined);
        };
        testNotModByZero(-7, 18);
        testNotModByZero(-128, -7);
        testNotModByZero(-128, 18);
        testNotModByZero(127, -7);
        testNotModByZero(127, 18);
        testNotModByZero(-7, 2);
        testNotModByZero(18, 2);
        testNotModByZero(-128, 2);
        testNotModByZero(127, 2);
        testNotModByZero(-127, 2);
        testNotModByZero(126, 2);
        testNotModByZero(-7, -18);
        testNotModByZero(18, 7);
        testNotModByZero(7, -18);
        testNotModByZero(-128, 7);
        testNotModByZero(-128, -18);
        testNotModByZero(127, 7);
        testNotModByZero(127, -18);
        testNotModByZero(-127, 7);
        testNotModByZero(-127, -18);
        testNotModByZero(-7, -2);
        testNotModByZero(18, -2);
        testNotModByZero(-128, -2);
        testNotModByZero(127, -2);
        testNotModByZero(-127, -2);
        testNotModByZero(126, -2);
        var testModByZero = function (a) {
          var a$1 = fromIntExn(a);
          t.deepEqual($$Number.Int8.rem(a$1, zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int8.remExn(a$1, zero);
                }));
          var negZero$1 = fromIntExn(negZero);
          t.deepEqual($$Number.Int8.rem(a$1, negZero$1), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Int8.remExn(a$1, negZero$1);
                }));
        };
        testFn(testModByZero);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              testNotModByZero(a, b);
              testModByZero(a);
              testModByZero(b);
            });
      }));

Ava("test " + name + " sum", (function (t) {
        var testInRange = function (arr) {
          var result = fromIntExn(Belt_Array.reduce(arr, 0, (function (acc, v) {
                      return acc + v | 0;
                    })));
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int8.sum(arr$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.sumExn(arr$1), result, undefined);
          t.deepEqual($$Number.Int8.sumUnsafe(arr$1), result, undefined);
        };
        testInRange([-7]);
        testInRange([18]);
        testInRange([-128]);
        testInRange([127]);
        testInRange([-127]);
        testInRange([126]);
        testInRange([
              -7,
              18
            ]);
        testInRange([
              18,
              -7
            ]);
        testInRange([
              -7,
              0,
              100,
              1,
              18
            ]);
        testInRange([
              -128,
              127
            ]);
        t.deepEqual($$Number.Int8.sum([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Int8.sumExn([]);
              }));
        var testOutOfRange = function (arr) {
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return fromIntExn(i);
                }));
          t.deepEqual($$Number.Int8.sum(arr$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.sumExn(arr$1);
                }));
        };
        testOutOfRange([
              127,
              1
            ]);
        testOutOfRange([
              1,
              127
            ]);
        testOutOfRange([
              127,
              100
            ]);
        testOutOfRange([
              100,
              127
            ]);
        testOutOfRange([
              127,
              25,
              100
            ]);
        testOutOfRange([
              -128,
              -1
            ]);
        testOutOfRange([
              -1,
              -128
            ]);
        testOutOfRange([
              -128,
              -100
            ]);
        testOutOfRange([
              -100,
              -128
            ]);
        testOutOfRange([
              -128,
              -25,
              -100
            ]);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              testInRange([a]);
              testInRange([b]);
              var result = a + b;
              if (result >= -128 && result <= 127) {
                testInRange([
                      a,
                      b
                    ]);
                return testInRange([
                            b,
                            a
                          ]);
              } else {
                testOutOfRange([
                      a,
                      b
                    ]);
                return testOutOfRange([
                            b,
                            a
                          ]);
              }
            });
      }));

Ava("test " + name + " increase and decrease", (function (t) {
        var testIncInRange = function (i) {
          var result = fromIntExn(i + 1 | 0);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.inc(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.incExn(n), result, undefined);
          t.deepEqual($$Number.Int8.incUnsafe(n), result, undefined);
        };
        testIncInRange(0);
        testIncInRange(1);
        testIncInRange(100);
        testIncInRange(-128);
        testIncInRange(-127);
        testIncInRange(126);
        TestUtils.loop100Fn(function () {
              testIncInRange(TestUtils.randomInt(-128, 127));
            });
        testIncInRange(-100);
        testIncInRange(-127);
        t.deepEqual($$Number.Int8.inc($$Number.Int8.maxValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Int8.incExn($$Number.Int8.maxValue);
              }));
        var testDecInRange = function (i) {
          var result = fromIntExn(i - 1 | 0);
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.dec(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.decExn(n), result, undefined);
          t.deepEqual($$Number.Int8.decUnsafe(n), result, undefined);
        };
        testDecInRange(1);
        testDecInRange(100);
        testDecInRange(-127);
        testDecInRange(127);
        testDecInRange(126);
        TestUtils.loop100Fn(function () {
              testDecInRange(TestUtils.randomInt(-128 + 1.0, 127));
            });
        testDecInRange(0);
        testDecInRange(-100);
        testDecInRange(-127);
        t.deepEqual($$Number.Int8.dec($$Number.Int8.minValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Int8.decExn($$Number.Int8.minValue);
              }));
      }));

Ava("test " + name + " bitwise", (function (t) {
        var assertNot1 = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.lnot(a$1), b$1, undefined);
          t.deepEqual($$Number.Int8.lnot(b$1), a$1, undefined);
        };
        assertNot1(100, -101);
        assertNot1(-128, 127);
        assertNot1(-127, 126);
        assertNot1(0, -1);
        var assertNot2 = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.lnot($$Number.Int8.lnot(n)), n, undefined);
        };
        testFn(assertNot2);
        assertNot2(-1);
        assertNot2(-127);
        var assertAnd = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          t.deepEqual($$Number.Int8.land(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Int8.land(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Int8.land(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Int8.land(a$1, $$Number.Int8.lnot(a$1)), zero, undefined);
          t.deepEqual($$Number.Int8.land(b$1, $$Number.Int8.lnot(b$1)), zero, undefined);
          t.deepEqual($$Number.Int8.land(value$1, $$Number.Int8.lnot(value$1)), zero, undefined);
          t.deepEqual($$Number.Int8.land(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int8.land(b$1, a$1), value$1, undefined);
        };
        assertAnd(100, -101, 0);
        assertAnd(-128, 127, 0);
        assertAnd(-127, 126, 0);
        assertAnd(-7, 18, 16);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-128, 127);
              assertAnd(value, value, value);
            });
        assertAnd(0, -1, 0);
        var assertOr = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          var oneBits = fromIntExn(-1);
          t.deepEqual($$Number.Int8.lor(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Int8.lor(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Int8.lor(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Int8.lor(a$1, $$Number.Int8.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lor(b$1, $$Number.Int8.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lor(value$1, $$Number.Int8.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int8.lor(b$1, a$1), value$1, undefined);
        };
        assertOr(-7, 18, -5);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-128, 127);
              assertOr(value, value, value);
            });
        assertOr(100, -101, -1);
        assertOr(-128, 127, -1);
        assertOr(-127, 126, -1);
        assertOr(0, -1, -1);
        var assertXor = function (a, b, value) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          var value$1 = fromIntExn(value);
          var oneBits = fromIntExn(-1);
          t.deepEqual($$Number.Int8.lxor(a$1, a$1), zero, undefined);
          t.deepEqual($$Number.Int8.lxor(b$1, b$1), zero, undefined);
          t.deepEqual($$Number.Int8.lxor(value$1, value$1), zero, undefined);
          t.deepEqual($$Number.Int8.lxor(a$1, $$Number.Int8.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lxor(b$1, $$Number.Int8.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lxor(value$1, $$Number.Int8.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Int8.lxor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Int8.lxor(b$1, a$1), value$1, undefined);
        };
        assertXor(-7, 18, -21);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(-128, 127);
              assertXor(value, value, 0);
            });
        assertXor(100, -101, -1);
        assertXor(-128, 127, -1);
        assertXor(-127, 126, -1);
        assertXor(0, -1, -1);
        var modBits = function (i) {
          return ((i >>> 0) % bits);
        };
        var value = fromIntExn(100);
        for(var i = -8; i <= 16; ++i){
          t.deepEqual($$Number.Int8.lsl(value, i), fromIntExn(Belt_Array.getExn(valueShiftLeft, modBits(i))), undefined);
        }
        var mask = 255;
        var testUnsignedShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -8; i <= 16; ++i){
            var i_ = modBits(i);
            t.deepEqual($$Number.Int8.lsr(n, i), fromFloatExn(Math.floor((
                          value < 0 && i_ !== 0 ? value & mask : value
                        ) / Math.pow(2.0, i_))), undefined);
          }
        };
        testUnsignedShiftRight(100);
        testUnsignedShiftRight(-101);
        TestUtils.loop100Fn(function () {
              testUnsignedShiftRight(TestUtils.randomInt(-128, 127));
            });
        var testShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -8; i <= 16; ++i){
            t.deepEqual($$Number.Int8.asr(n, i), fromFloatExn(Math.floor(value / Math.pow(2.0, modBits(i)))), undefined);
            t.deepEqual($$Number.Int8.lnot($$Number.Int8.asr(n, i)), $$Number.Int8.asr($$Number.Int8.lnot(n), i), undefined);
          }
        };
        testShiftRight(100);
        testShiftRight(-101);
        TestUtils.loop100Fn(function () {
              testShiftRight(TestUtils.randomInt(-128, 127));
            });
        var value$1 = fromIntExn(100);
        for(var i$1 = -8; i$1 <= 16; ++i$1){
          t.deepEqual($$Number.Int8.rsl(value$1, i$1), fromIntExn(Belt_Array.getExn(valueRotateShiftLeft, modBits(i$1))), undefined);
        }
        var testRotateShiftLeft = function (value) {
          var n = fromIntExn(value);
          for(var i = -8; i <= 16; ++i){
            t.deepEqual($$Number.Int8.lnot($$Number.Int8.rsl(n, i)), $$Number.Int8.rsl($$Number.Int8.lnot(n), i), undefined);
          }
        };
        testRotateShiftLeft(100);
        testRotateShiftLeft(-101);
        TestUtils.loop100Fn(function () {
              testRotateShiftLeft(TestUtils.randomInt(-128, 127));
            });
        var testRotateShiftRight = function (value) {
          var n = fromIntExn(value);
          for(var i = -8; i <= 16; ++i){
            t.deepEqual($$Number.Int8.rsl(n, i), $$Number.Int8.rsr(n, 8 - i | 0), undefined);
            t.deepEqual($$Number.Int8.lnot($$Number.Int8.rsr(n, i)), $$Number.Int8.rsr($$Number.Int8.lnot(n), i), undefined);
          }
        };
        testRotateShiftRight(100);
        testRotateShiftRight(-101);
        TestUtils.loop100Fn(function () {
              testRotateShiftRight(TestUtils.randomInt(-128, 127));
            });
      }));

Ava("test " + name + " integer math", (function (t) {
        var testClz = function (n, result) {
          t.deepEqual($$Number.Int8.clz(n), result, undefined);
        };
        testClz(zero, 8);
        testClz(fromIntExn(-1), 0);
        testClz($$Number.Int8.minValue, 0);
        testClz($$Number.Int8.maxValue, 1);
        for(var i = 0; i <= 7; ++i){
          testClz($$Number.Int8.lsl(one, i), (8 - i | 0) - 1 | 0);
        }
        t.deepEqual($$Number.Int8.imul(fromIntExn(-7), fromIntExn(18)), fromIntExn(-126), undefined);
        var mask = 255;
        var j = Math.pow(2.0, 8);
        var k = Math.pow(2.0, 7);
        var toU32 = function (i) {
          return TestUtils.intToUint32(i & mask);
        };
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomInt(-128, 127);
              var m = toU32(a) * toU32(b) % j;
              var result = true && m >= k ? m - j : m;
              t.deepEqual($$Number.Int8.imul(fromIntExn(a), fromIntExn(b)), fromFloatExn(result), undefined);
              t.deepEqual($$Number.Int8.imul(fromIntExn(b), fromIntExn(a)), fromFloatExn(result), undefined);
            });
        var testPowInRange = function (a, b) {
          var result = fromFloatExn(Math.pow(a, b));
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.pow(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Int8.powExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.powUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Int8.pow(a$1, zero), Caml_option.some(one), undefined);
          t.deepEqual($$Number.Int8.powExn(a$1, zero), one, undefined);
          t.deepEqual($$Number.Int8.powUnsafe(a$1, zero), one, undefined);
          t.deepEqual($$Number.Int8.pow(b$1, zero), Caml_option.some(one), undefined);
          t.deepEqual($$Number.Int8.powExn(b$1, zero), one, undefined);
          t.deepEqual($$Number.Int8.powUnsafe(b$1, zero), one, undefined);
          t.deepEqual($$Number.Int8.pow(a$1, one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Int8.powExn(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int8.powUnsafe(a$1, one), a$1, undefined);
          t.deepEqual($$Number.Int8.pow(b$1, one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Int8.powExn(b$1, one), b$1, undefined);
          t.deepEqual($$Number.Int8.powUnsafe(b$1, one), b$1, undefined);
        };
        testPowInRange(0, 1);
        testPowInRange(1, 0);
        testPowInRange(100, 0);
        testPowInRange(-128, 1);
        testPowInRange(127, 1);
        var testPowOutOfRange = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.powExn(a$1, b$1);
                }));
        };
        testPowOutOfRange(127, 2);
        testPowOutOfRange(-128, 2);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(-128, 127);
              var b = TestUtils.randomPositiveSmallInt();
              var result = Math.pow(a, b);
              if (result >= -128 && result <= 127) {
                return testPowInRange(a, b);
              } else {
                return testPowOutOfRange(a, b);
              }
            });
        var testPowNotInteger = function (a, b) {
          var a$1 = fromIntExn(a);
          var b$1 = fromIntExn(b);
          t.deepEqual($$Number.Int8.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Int8.powExn(a$1, b$1);
                }));
        };
        testPowNotInteger(100, -1);
        testPowNotInteger(-128, -1);
        testPowNotInteger(127, -1);
        TestUtils.loop100Fn(function () {
              var m = TestUtils.randomInt(-128, 127);
              var n = TestUtils.randomInt(-128, 127);
              var min = fromIntExn(m < n ? m : n);
              var max = fromIntExn(m > n ? m : n);
              if (min !== max) {
                return TestUtils.loopFn((function () {
                              var i = $$Number.Int8.random(min, max);
                              t.true($$Number.Int8.ge(i, min), undefined);
                              t.true($$Number.Int8.lt(i, max), undefined);
                            }), 10);
              }
              
            });
      }));

Ava("test " + name + " signed math", (function (t) {
        var testNegInRange = function (i) {
          var a = fromIntExn(i);
          var b = fromIntExn(-i | 0);
          t.deepEqual($$Number.Int8.neg(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int8.negExn(a), b, undefined);
          t.deepEqual($$Number.Int8.negUnsafe(a), b, undefined);
          t.deepEqual($$Number.Int8.neg(b), Caml_option.some(a), undefined);
          t.deepEqual($$Number.Int8.negExn(b), a, undefined);
          t.deepEqual($$Number.Int8.negUnsafe(b), a, undefined);
        };
        testNegInRange(0);
        testNegInRange(negZero);
        testNegInRange(1);
        testNegInRange(100);
        testNegInRange(-127);
        testNegInRange(127);
        testNegInRange(126);
        var testNegOutOfRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.neg(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.negExn(n);
                }));
        };
        testNegOutOfRange(-128);
        TestUtils.loop100Fn(function () {
              var i = TestUtils.randomInt(-128, 127);
              if (i !== -128) {
                return testNegInRange(i);
              } else {
                return testNegOutOfRange(i);
              }
            });
        var testAbsInRange = function (i) {
          var a = fromIntExn(i);
          var b = fromIntExn(i < 0 ? -i | 0 : i);
          t.deepEqual($$Number.Int8.abs(a), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int8.absExn(a), b, undefined);
          t.deepEqual($$Number.Int8.absUnsafe(a), b, undefined);
          t.deepEqual($$Number.Int8.abs(b), Caml_option.some(b), undefined);
          t.deepEqual($$Number.Int8.absExn(b), b, undefined);
          t.deepEqual($$Number.Int8.absUnsafe(b), b, undefined);
        };
        testAbsInRange(0);
        testAbsInRange(negZero);
        testAbsInRange(-1);
        testAbsInRange(-100);
        testAbsInRange(-127);
        testAbsInRange(-126);
        var testAbsOutOfRange = function (i) {
          var n = fromIntExn(i);
          t.deepEqual($$Number.Int8.abs(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Int8.absExn(n);
                }));
        };
        testAbsOutOfRange(-128);
        TestUtils.loop100Fn(function () {
              var i = TestUtils.randomInt(-128, 127);
              if (i !== -128) {
                return testAbsInRange(i);
              } else {
                return testAbsOutOfRange(i);
              }
            });
        var testSign = function (i) {
          var test_ = function (i) {
            var n = fromIntExn(i);
            var result = i < 0 ? -1 : (
                i > 0 ? 1 : 0
              );
            var raw = i < 0 ? -1.0 : (
                i > 0 ? 1.0 : 0.0
              );
            t.deepEqual($$Number.Int8.sign(n), result, undefined);
            t.deepEqual($$Number.Int8.signExn(n), result, undefined);
            t.deepEqual($$Number.Int8.signRaw(n), raw, undefined);
          };
          test_(i);
          if (i !== -128) {
            return test_(-i | 0);
          }
          
        };
        testFn(testSign);
      }));

var IntModule;

var isSigned = true;

var is32Bits = false;

var bits = 8;

var minValue = -128;

var maxValue = 127;

var value = 100;

var valueNot = -101;

var less = -7;

var greater = 18;

var lessGreaterAnd = 16;

var lessGreaterOr = -5;

var lessGreaterXor = -21;

export {
  IntModule ,
  name ,
  isSigned ,
  is32Bits ,
  bits ,
  minValue ,
  maxValue ,
  value ,
  valueNot ,
  valueShiftLeft ,
  valueRotateShiftLeft ,
  less ,
  greater ,
  lessGreaterAnd ,
  lessGreaterOr ,
  lessGreaterXor ,
  negZero ,
  zero ,
  one ,
  fromIntExn ,
  fromFloatExn ,
  randomValue ,
  randomLargerInt ,
  randomSmallerInt ,
  testFn ,
}
/*  Not a pure module */
