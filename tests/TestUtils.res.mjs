// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.res.mjs";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var minSafeInteger = Number.MIN_SAFE_INTEGER;

var maxSafeInteger = Number.MAX_SAFE_INTEGER;

function $$isFinite(prim) {
  return Number.isFinite(prim);
}

function isInteger(prim) {
  return Number.isInteger(prim);
}

function assertOverflow(t, f) {
  try {
    f();
    return t.fail("it should raise an exception");
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === $$Number.NumberOverflow) {
      t.pass(undefined);
      return ;
    }
    throw exn;
  }
}

function assertInvalidArgument(t, f) {
  try {
    f();
    return t.fail("it should raise an exception");
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      t.pass(undefined);
      return ;
    }
    throw exn;
  }
}

function assertDivisionByZero(t, f) {
  try {
    f();
    return t.fail("it should raise an exception");
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Division_by_zero") {
      t.pass(undefined);
      return ;
    }
    throw exn;
  }
}

function loopFn(f, n) {
  for(var _for = 0; _for < n; ++_for){
    f();
  }
}

function loop100Fn(f) {
  loopFn(f, 100);
}

function randomFloat(min, max) {
  return Math.random() * (max - min) + min;
}

function randomInt(min, max) {
  return Js_math.floor_int(randomFloat(min, max));
}

function randomPositiveSmallInt() {
  return randomInt(0.0, 16.0);
}

function randomPositiveInt() {
  return randomInt(0.0, Js_int.max);
}

function randomNegativeInt() {
  return randomInt(Js_int.min, 0.0);
}

function intToUint32(i) {
  return (i >>> 0);
}

function isNegZero(f) {
  return Object.is(f, -0.0);
}

export {
  minSafeInteger ,
  maxSafeInteger ,
  $$isFinite ,
  isInteger ,
  assertOverflow ,
  assertInvalidArgument ,
  assertDivisionByZero ,
  loopFn ,
  loop100Fn ,
  randomFloat ,
  randomInt ,
  randomPositiveSmallInt ,
  randomPositiveInt ,
  randomNegativeInt ,
  intToUint32 ,
  isNegZero ,
}
/* minSafeInteger Not a pure module */
