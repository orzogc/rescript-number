// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.bs.mjs";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var name = "Uint16";

var valueShiftLeft = [
  10000,
  20000,
  40000,
  14464,
  28928,
  57856,
  50176,
  34816,
  4096,
  8192,
  16384,
  32768,
  0,
  0,
  0,
  0
];

var valueRotateShiftLeft = [
  10000,
  20000,
  40000,
  14465,
  28930,
  57860,
  50185,
  34835,
  4135,
  8270,
  16540,
  33080,
  625,
  1250,
  2500,
  5000
];

function randomValue() {
  return TestUtils.randomInt(0, 65535);
}

function randomLargerInt() {
  return TestUtils.randomInt(65535 + 1.0, Js_int.max);
}

function randomSmallerInt() {
  return TestUtils.randomInt(Js_int.min, 0);
}

Ava("test " + name + " sign", (function (t) {
        t.deepEqual($$Number.Uint16.isSigned, false, undefined);
        t.deepEqual($$Number.Uint16.isUnsigned, true, undefined);
      }));

Ava("test " + name + " bits", (function (t) {
        t.deepEqual($$Number.Uint16.bits, 16, undefined);
      }));

Ava("test " + name + " from int", (function (t) {
        var testInRange = function (i) {
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.fromInt(i), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint16.fromIntExn(i), n, undefined);
          t.deepEqual($$Number.Uint16.fromIntClamped(i), n, undefined);
          t.deepEqual($$Number.Uint16.fromIntUnsafe(i), n, undefined);
        };
        testInRange(0);
        testInRange(1);
        testInRange(10000);
        testInRange(0);
        testInRange(65535);
        testInRange(1);
        testInRange(65534);
        TestUtils.loop100Fn(function () {
              testInRange(TestUtils.randomInt(0, 65535));
            });
        var testOutOfRange = function (i, value) {
          t.deepEqual($$Number.Uint16.fromInt(i), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.fromIntExn(i);
                }));
          t.deepEqual($$Number.Uint16.fromIntClamped(i), $$Number.Uint16.fromIntExn(value), undefined);
        };
        testOutOfRange(-1, 0);
        testOutOfRange(65536, 65535);
        testOutOfRange(-10000, 0);
        testOutOfRange(75535, 65535);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(undefined), 65535);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, 0), 0);
            });
      }));

Ava("test " + name + " to int", (function (t) {
        var testToInt = function (i) {
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.toInt(n), i, undefined);
          t.deepEqual($$Number.Uint16.toIntExn(n), i, undefined);
          t.deepEqual($$Number.Uint16.toIntClamped(n), i, undefined);
          t.deepEqual($$Number.Uint16.toIntUnsafe(n), i, undefined);
        };
        testToInt(0);
        testToInt(1);
        testToInt(10000);
        testToInt(0);
        testToInt(65535);
        testToInt(1);
        testToInt(65534);
        TestUtils.loop100Fn(function () {
              testToInt(TestUtils.randomInt(0, 65535));
            });
      }));

Ava("test " + name + " from float", (function (t) {
        var testIsIntegerAndInRange = function (i) {
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.fromFloat(i), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint16.fromFloatExn(i), n, undefined);
          t.deepEqual($$Number.Uint16.fromFloatClamped(i), n, undefined);
          t.deepEqual($$Number.Uint16.fromFloatUnsafe(i), n, undefined);
        };
        testIsIntegerAndInRange(0);
        testIsIntegerAndInRange(1);
        testIsIntegerAndInRange(10000);
        testIsIntegerAndInRange(0);
        testIsIntegerAndInRange(65535);
        testIsIntegerAndInRange(1);
        testIsIntegerAndInRange(65534);
        TestUtils.loop100Fn(function () {
              testIsIntegerAndInRange(TestUtils.randomInt(0, 65535));
            });
        var testOutOfRange = function (f, value) {
          t.deepEqual($$Number.Uint16.fromFloat(f), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.fromFloatExn(f);
                }));
          t.deepEqual($$Number.Uint16.fromFloatClamped(f), $$Number.Uint16.fromIntExn(value), undefined);
        };
        testOutOfRange(-1.0, 0);
        testOutOfRange(65535 + 1.0, 65535);
        testOutOfRange(-10000, 0);
        testOutOfRange(75535, 65535);
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(65535 + 1.0, TestUtils.maxSafeInteger)), 65535);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(TestUtils.minSafeInteger, -1.0)), 0);
            });
        var testIsNotInteger = function (f, value) {
          t.deepEqual($$Number.Uint16.fromFloat(f), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Uint16.fromFloatExn(f);
                }));
          t.deepEqual($$Number.Uint16.fromFloatClamped(f), $$Number.Uint16.fromIntExn(value), undefined);
        };
        var f = 10000 + 0.5;
        testIsNotInteger(f, f | 0);
        testIsNotInteger(0 + 0.1, 0);
        testIsNotInteger(-0.1, 0);
        testIsNotInteger(65535 + 0.1, 65535);
        testIsNotInteger(65535 - 0.1, 65534);
        testIsNotInteger(-10000 - 0.5, 0);
        testIsNotInteger(75535 + 0.5, 65535);
      }));

Ava("test " + name + " to float", (function (t) {
        var testToFloat = function (i) {
          t.deepEqual($$Number.Uint16.toFloat($$Number.Uint16.fromFloatExn(i)), i, undefined);
        };
        testToFloat(10000);
        TestUtils.loop100Fn(function () {
              testToFloat(TestUtils.randomInt(0, 65535));
            });
      }));

Ava("test " + name + " from string", (function (t) {
        var testInRange = function (i, s) {
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.fromString(s), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint16.fromStringExn(s), n, undefined);
        };
        testInRange(0, "0");
        testInRange(1, "1");
        testInRange(10000, String(10000));
        testInRange(10000, String(10000 + 0.5));
        testInRange(0, String(0));
        testInRange(65535, String(65535));
        testInRange(1, String(1));
        testInRange(65534, String(65534));
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(0, 65535);
              testInRange(value, String(value));
            });
        var testOutOfRange = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Uint16.fromString(s), undefined, undefined);
          TestUtils.assertException(t, (function () {
                  return $$Number.Uint16.fromStringExn(s);
                }));
        };
        testOutOfRange(-1.0);
        testOutOfRange(65535 + 1.0);
        testOutOfRange(-10000);
        testOutOfRange(75535);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerInt(undefined));
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomInt(Js_int.min, 0));
            });
        var s = "foo";
        t.deepEqual($$Number.Uint16.fromString(s), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint16.fromStringExn(s);
              }));
      }));

Ava("test " + name + " to string", (function (t) {
        var testToString = function (i) {
          var s = String(i);
          t.deepEqual($$Number.Uint16.toString($$Number.Uint16.fromStringExn(s)), s, undefined);
        };
        testToString(10000);
        TestUtils.loop100Fn(function () {
              testToString(TestUtils.randomInt(0, 65535));
            });
      }));

Ava("test " + name + " zero", (function (t) {
        t.deepEqual($$Number.Uint16.zero, $$Number.Uint16.fromIntExn(0), undefined);
        t.deepEqual($$Number.Uint16.zero, $$Number.Uint16.fromFloatExn(0.0), undefined);
        t.deepEqual($$Number.Uint16.zero, $$Number.Uint16.fromFloatExn(-0.0), undefined);
      }));

Ava("test " + name + " one", (function (t) {
        t.deepEqual($$Number.Uint16.one, $$Number.Uint16.fromIntExn(1), undefined);
        t.deepEqual($$Number.Uint16.one, $$Number.Uint16.fromFloatExn(1.0), undefined);
      }));

Ava("test " + name + " range", (function (t) {
        t.deepEqual($$Number.Uint16.minValue, $$Number.Uint16.fromIntExn(0), undefined);
        t.deepEqual($$Number.Uint16.minValue, $$Number.Uint16.fromFloatExn(0), undefined);
        t.deepEqual($$Number.Uint16.maxValue, $$Number.Uint16.fromIntExn(65535), undefined);
        t.deepEqual($$Number.Uint16.maxValue, $$Number.Uint16.fromFloatExn(65535), undefined);
      }));

Ava("test " + name + " comparison", (function (t) {
        var testCompare = function (min, max) {
          var min$1 = $$Number.Uint16.fromIntExn(min);
          var max$1 = $$Number.Uint16.fromIntExn(max);
          var value = $$Number.Uint16.fromIntExn(10000);
          var minValue = $$Number.Uint16.fromIntExn(0);
          var maxValue = $$Number.Uint16.fromIntExn(65535);
          t.deepEqual($$Number.Uint16.compare(min$1, max$1), -1, undefined);
          t.deepEqual($$Number.Uint16.compare(max$1, min$1), 1, undefined);
          t.deepEqual($$Number.Uint16.compare(min$1, min$1), 0, undefined);
          t.deepEqual($$Number.Uint16.compare(max$1, max$1), 0, undefined);
          t.deepEqual($$Number.Uint16.compareExn(min$1, max$1), -1, undefined);
          t.deepEqual($$Number.Uint16.compareExn(max$1, min$1), 1, undefined);
          t.deepEqual($$Number.Uint16.compareExn(min$1, min$1), 0, undefined);
          t.deepEqual($$Number.Uint16.compareExn(max$1, max$1), 0, undefined);
          t.true($$Number.Uint16.eq(min$1, min$1), undefined);
          t.true($$Number.Uint16.eq(max$1, max$1), undefined);
          t.false($$Number.Uint16.eq(min$1, max$1), undefined);
          t.false($$Number.Uint16.eq(max$1, min$1), undefined);
          t.true($$Number.Uint16.ne(min$1, max$1), undefined);
          t.true($$Number.Uint16.ne(max$1, min$1), undefined);
          t.false($$Number.Uint16.ne(min$1, min$1), undefined);
          t.false($$Number.Uint16.ne(max$1, max$1), undefined);
          t.true($$Number.Uint16.lt(min$1, max$1), undefined);
          t.false($$Number.Uint16.lt(max$1, min$1), undefined);
          t.false($$Number.Uint16.lt(min$1, min$1), undefined);
          t.false($$Number.Uint16.lt(max$1, max$1), undefined);
          t.true($$Number.Uint16.le(min$1, max$1), undefined);
          t.false($$Number.Uint16.le(max$1, min$1), undefined);
          t.true($$Number.Uint16.le(min$1, min$1), undefined);
          t.true($$Number.Uint16.le(max$1, max$1), undefined);
          t.true($$Number.Uint16.gt(max$1, min$1), undefined);
          t.false($$Number.Uint16.gt(min$1, max$1), undefined);
          t.false($$Number.Uint16.gt(min$1, min$1), undefined);
          t.false($$Number.Uint16.gt(max$1, max$1), undefined);
          t.true($$Number.Uint16.ge(max$1, min$1), undefined);
          t.false($$Number.Uint16.ge(min$1, max$1), undefined);
          t.true($$Number.Uint16.ge(min$1, min$1), undefined);
          t.true($$Number.Uint16.ge(max$1, max$1), undefined);
          t.deepEqual($$Number.Uint16.min(min$1, max$1), min$1, undefined);
          t.deepEqual($$Number.Uint16.min(max$1, min$1), min$1, undefined);
          t.deepEqual($$Number.Uint16.min(min$1, min$1), min$1, undefined);
          t.deepEqual($$Number.Uint16.min(max$1, max$1), max$1, undefined);
          t.deepEqual($$Number.Uint16.minMany([min$1]), Caml_option.some(min$1), undefined);
          t.deepEqual($$Number.Uint16.minMany([
                    min$1,
                    max$1
                  ]), Caml_option.some(min$1), undefined);
          t.deepEqual($$Number.Uint16.minMany([
                    max$1,
                    min$1
                  ]), Caml_option.some(min$1), undefined);
          t.deepEqual($$Number.Uint16.minMany([
                    min$1,
                    value,
                    max$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(minValue), undefined);
          t.deepEqual($$Number.Uint16.minManyExn([min$1]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyExn([
                    min$1,
                    max$1
                  ]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyExn([
                    max$1,
                    min$1
                  ]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyExn([
                    minValue,
                    maxValue,
                    min$1,
                    value,
                    max$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Uint16.minManyUnsafe([min$1]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyUnsafe([
                    min$1,
                    max$1
                  ]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyUnsafe([
                    max$1,
                    min$1
                  ]), min$1, undefined);
          t.deepEqual($$Number.Uint16.minManyUnsafe([
                    min$1,
                    minValue,
                    maxValue,
                    value,
                    max$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Uint16.max(min$1, max$1), max$1, undefined);
          t.deepEqual($$Number.Uint16.max(max$1, min$1), max$1, undefined);
          t.deepEqual($$Number.Uint16.max(min$1, min$1), min$1, undefined);
          t.deepEqual($$Number.Uint16.max(max$1, max$1), max$1, undefined);
          t.deepEqual($$Number.Uint16.maxMany([min$1]), Caml_option.some(min$1), undefined);
          t.deepEqual($$Number.Uint16.maxMany([
                    min$1,
                    max$1
                  ]), Caml_option.some(max$1), undefined);
          t.deepEqual($$Number.Uint16.maxMany([
                    max$1,
                    min$1
                  ]), Caml_option.some(max$1), undefined);
          t.deepEqual($$Number.Uint16.maxMany([
                    min$1,
                    value,
                    max$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(maxValue), undefined);
          t.deepEqual($$Number.Uint16.maxManyExn([min$1]), min$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyExn([
                    min$1,
                    max$1
                  ]), max$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyExn([
                    max$1,
                    min$1
                  ]), max$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyExn([
                    minValue,
                    maxValue,
                    min$1,
                    value,
                    max$1
                  ]), maxValue, undefined);
          t.deepEqual($$Number.Uint16.maxManyUnsafe([min$1]), min$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyUnsafe([
                    min$1,
                    max$1
                  ]), max$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyUnsafe([
                    max$1,
                    min$1
                  ]), max$1, undefined);
          t.deepEqual($$Number.Uint16.maxManyUnsafe([
                    min$1,
                    minValue,
                    maxValue,
                    value,
                    max$1
                  ]), maxValue, undefined);
        };
        testCompare(73, 382);
        TestUtils.loop100Fn(function () {
              var min = TestUtils.randomInt(0, 65535);
              var max = TestUtils.randomInt(min + 1.0, 65535 + 1.0);
              testCompare(min, max);
            });
        var zero = $$Number.Uint16.fromIntExn(0);
        var negZero = $$Number.Uint16.fromIntExn(-0);
        t.true($$Number.Uint16.eq(zero, negZero), undefined);
        t.true($$Number.Uint16.le(zero, negZero), undefined);
        t.true($$Number.Uint16.ge(zero, negZero), undefined);
        t.false($$Number.Uint16.lt(zero, negZero), undefined);
        t.false($$Number.Uint16.gt(zero, negZero), undefined);
        t.deepEqual($$Number.Uint16.minMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint16.minManyExn([]);
              }));
        t.deepEqual($$Number.Uint16.maxMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint16.maxManyExn([]);
              }));
      }));

Ava("test " + name + " addition", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint16.fromIntExn(a + b | 0);
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.add(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.add(a$1, b$1), $$Number.Uint16.add(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.addExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.addExn(a$1, b$1), $$Number.Uint16.addExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.addClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.addClamped(a$1, b$1), $$Number.Uint16.addClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(a$1, b$1), $$Number.Uint16.addUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.add(a$1, $$Number.Uint16.zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint16.add(a$1, $$Number.Uint16.zero), $$Number.Uint16.add($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.addExn(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.addExn(a$1, $$Number.Uint16.zero), $$Number.Uint16.addExn($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.addClamped(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.addClamped(a$1, $$Number.Uint16.zero), $$Number.Uint16.addClamped($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(a$1, $$Number.Uint16.zero), $$Number.Uint16.addUnsafe($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.add(b$1, $$Number.Uint16.zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint16.add(b$1, $$Number.Uint16.zero), $$Number.Uint16.add($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.addExn(b$1, $$Number.Uint16.zero), b$1, undefined);
          t.deepEqual($$Number.Uint16.addExn(b$1, $$Number.Uint16.zero), $$Number.Uint16.addExn($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.addClamped(b$1, $$Number.Uint16.zero), b$1, undefined);
          t.deepEqual($$Number.Uint16.addClamped(b$1, $$Number.Uint16.zero), $$Number.Uint16.addClamped($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(b$1, $$Number.Uint16.zero), b$1, undefined);
          t.deepEqual($$Number.Uint16.addUnsafe(b$1, $$Number.Uint16.zero), $$Number.Uint16.addUnsafe($$Number.Uint16.zero, b$1), undefined);
        };
        testInRange(73, 382);
        testInRange(0, 0);
        testInRange(65535, 0);
        testInRange(0, 1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          var value$1 = $$Number.Uint16.fromIntExn(value);
          t.deepEqual($$Number.Uint16.add(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Uint16.add(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.addExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.addExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Uint16.addClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.addClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(65535, 1, 65535);
        testOutOfRange(65535, 10000, 65535);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              var result = a + b;
              if (result < 0) {
                testOutOfRange(a, b, 0);
              } else if (result > 65535) {
                testOutOfRange(a, b, 65535);
              } else {
                testInRange(a, b);
              }
              testInRange(a, 1);
              testInRange(b, 1);
            });
      }));

Ava("test " + name + " subtraction", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint16.fromIntExn(a - b | 0);
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.sub(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.subExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.subClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.sub(a$1, result), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint16.subExn(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint16.subClamped(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint16.sub(a$1, a$1), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.subExn(a$1, a$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.subClamped(a$1, a$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(a$1, a$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.sub(a$1, $$Number.Uint16.zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint16.subExn(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.subClamped(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(a$1, $$Number.Uint16.zero), a$1, undefined);
          t.deepEqual($$Number.Uint16.sub(b$1, b$1), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.subExn(b$1, b$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.subClamped(b$1, b$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(b$1, b$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.sub(b$1, $$Number.Uint16.zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint16.subExn(b$1, $$Number.Uint16.zero), b$1, undefined);
          t.deepEqual($$Number.Uint16.subClamped(b$1, $$Number.Uint16.zero), b$1, undefined);
          t.deepEqual($$Number.Uint16.subUnsafe(b$1, $$Number.Uint16.zero), b$1, undefined);
        };
        testInRange(382, 73);
        testInRange(0, 0);
        testInRange(65535, 0);
        testInRange(65535, 1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.sub(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.subExn(a$1, b$1);
                }));
          t.deepEqual($$Number.Uint16.subClamped(a$1, b$1), $$Number.Uint16.fromIntExn(value), undefined);
        };
        testOutOfRange(0, 1, 0);
        testOutOfRange(0, 10000, 0);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              var result = a - b;
              if (result < 0) {
                testOutOfRange(a, b, 0);
              } else if (result > 65535) {
                testOutOfRange(a, b, 65535);
              } else {
                testInRange(a, b);
              }
              var result$1 = b - a;
              if (result$1 < 0) {
                return testOutOfRange(b, a, 0);
              } else if (result$1 > 65535) {
                return testOutOfRange(b, a, 65535);
              } else {
                return testInRange(b, a);
              }
            });
      }));

Ava("test " + name + " multiplication", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint16.fromIntExn(Math.imul(a, b));
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.mul(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.mul(a$1, b$1), $$Number.Uint16.mul(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, b$1), $$Number.Uint16.mulExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, b$1), $$Number.Uint16.mulClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, b$1), $$Number.Uint16.mulUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint16.mul(a$1, $$Number.Uint16.zero), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.mul(a$1, $$Number.Uint16.zero), $$Number.Uint16.mul($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, $$Number.Uint16.zero), $$Number.Uint16.mulExn($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, $$Number.Uint16.zero), $$Number.Uint16.mulClamped($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, $$Number.Uint16.zero), $$Number.Uint16.mulUnsafe($$Number.Uint16.zero, a$1), undefined);
          t.deepEqual($$Number.Uint16.mul(a$1, $$Number.Uint16.one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint16.mul(a$1, $$Number.Uint16.one), $$Number.Uint16.mul($$Number.Uint16.one, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, $$Number.Uint16.one), a$1, undefined);
          t.deepEqual($$Number.Uint16.mulExn(a$1, $$Number.Uint16.one), $$Number.Uint16.mulExn($$Number.Uint16.one, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, $$Number.Uint16.one), a$1, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(a$1, $$Number.Uint16.one), $$Number.Uint16.mulClamped($$Number.Uint16.one, a$1), undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, $$Number.Uint16.one), a$1, undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(a$1, $$Number.Uint16.one), $$Number.Uint16.mulUnsafe($$Number.Uint16.one, a$1), undefined);
          t.deepEqual($$Number.Uint16.mul(b$1, $$Number.Uint16.zero), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.mul(b$1, $$Number.Uint16.zero), $$Number.Uint16.mul($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulExn(b$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulExn(b$1, $$Number.Uint16.zero), $$Number.Uint16.mulExn($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulClamped(b$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(b$1, $$Number.Uint16.zero), $$Number.Uint16.mulClamped($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(b$1, $$Number.Uint16.zero), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(b$1, $$Number.Uint16.zero), $$Number.Uint16.mulUnsafe($$Number.Uint16.zero, b$1), undefined);
          t.deepEqual($$Number.Uint16.mul(b$1, $$Number.Uint16.one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint16.mul(b$1, $$Number.Uint16.one), $$Number.Uint16.mul($$Number.Uint16.one, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulExn(b$1, $$Number.Uint16.one), b$1, undefined);
          t.deepEqual($$Number.Uint16.mulExn(b$1, $$Number.Uint16.one), $$Number.Uint16.mulExn($$Number.Uint16.one, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulClamped(b$1, $$Number.Uint16.one), b$1, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(b$1, $$Number.Uint16.one), $$Number.Uint16.mulClamped($$Number.Uint16.one, b$1), undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(b$1, $$Number.Uint16.one), b$1, undefined);
          t.deepEqual($$Number.Uint16.mulUnsafe(b$1, $$Number.Uint16.one), $$Number.Uint16.mulUnsafe($$Number.Uint16.one, b$1), undefined);
        };
        testInRange(73, 382);
        testInRange(0, 0);
        testInRange(65535, 0);
        testInRange(0, 1);
        testInRange(65535, 1);
        testInRange(1, 1);
        testInRange(65534, 1);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          var value$1 = $$Number.Uint16.fromIntExn(value);
          t.deepEqual($$Number.Uint16.mul(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Uint16.mul(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.mulExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.mulExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Uint16.mulClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.mulClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(65535, 2, 65535);
        testOutOfRange(65535, 10000, 65535);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              var result = a * b;
              if (result < 0) {
                return testOutOfRange(a, b, 0);
              } else if (result > 65535) {
                return testOutOfRange(a, b, 65535);
              } else {
                return testInRange(a, b);
              }
            });
      }));

Ava("test " + name + " division", (function (t) {
        var testNotDividedByZero = function (a, b) {
          if (a !== 0) {
            var result = $$Number.Uint16.fromIntExn(Caml_int32.div(b, a));
            var a$1 = $$Number.Uint16.fromIntExn(a);
            var b$1 = $$Number.Uint16.fromIntExn(b);
            t.deepEqual($$Number.Uint16.div(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Uint16.divExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint16.divUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint16.div($$Number.Uint16.zero, a$1), Caml_option.some($$Number.Uint16.zero), undefined);
            t.deepEqual($$Number.Uint16.divExn($$Number.Uint16.zero, a$1), $$Number.Uint16.zero, undefined);
            t.deepEqual($$Number.Uint16.divUnsafe($$Number.Uint16.zero, a$1), $$Number.Uint16.zero, undefined);
          }
          if (b !== 0) {
            var result$1 = $$Number.Uint16.fromIntExn(Caml_int32.div(a, b));
            var a$2 = $$Number.Uint16.fromIntExn(a);
            var b$2 = $$Number.Uint16.fromIntExn(b);
            t.deepEqual($$Number.Uint16.div(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Uint16.divExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint16.divUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint16.div($$Number.Uint16.zero, b$2), Caml_option.some($$Number.Uint16.zero), undefined);
            t.deepEqual($$Number.Uint16.divExn($$Number.Uint16.zero, b$2), $$Number.Uint16.zero, undefined);
            t.deepEqual($$Number.Uint16.divUnsafe($$Number.Uint16.zero, b$2), $$Number.Uint16.zero, undefined);
          }
          var a$3 = $$Number.Uint16.fromIntExn(a);
          var b$3 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.div(a$3, $$Number.Uint16.one), Caml_option.some(a$3), undefined);
          t.deepEqual($$Number.Uint16.divExn(a$3, $$Number.Uint16.one), a$3, undefined);
          t.deepEqual($$Number.Uint16.divUnsafe(a$3, $$Number.Uint16.one), a$3, undefined);
          t.deepEqual($$Number.Uint16.div(b$3, $$Number.Uint16.one), Caml_option.some(b$3), undefined);
          t.deepEqual($$Number.Uint16.divExn(b$3, $$Number.Uint16.one), b$3, undefined);
          t.deepEqual($$Number.Uint16.divUnsafe(b$3, $$Number.Uint16.one), b$3, undefined);
        };
        testNotDividedByZero(73, 382);
        testNotDividedByZero(0, 73);
        testNotDividedByZero(0, 382);
        testNotDividedByZero(65535, 73);
        testNotDividedByZero(65535, 382);
        testNotDividedByZero(73, 2);
        testNotDividedByZero(382, 2);
        testNotDividedByZero(0, 2);
        testNotDividedByZero(65535, 2);
        testNotDividedByZero(1, 2);
        testNotDividedByZero(65534, 2);
        var testDividedByZero = function (a) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          t.deepEqual($$Number.Uint16.div(a$1, $$Number.Uint16.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint16.divExn(a$1, $$Number.Uint16.zero);
                }));
        };
        testDividedByZero(0);
        testDividedByZero(1);
        testDividedByZero(73);
        testDividedByZero(382);
        testDividedByZero(10000);
        testDividedByZero(0);
        testDividedByZero(65535);
        testDividedByZero(1);
        testDividedByZero(65534);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              testNotDividedByZero(a, b);
              testDividedByZero(a);
              testDividedByZero(b);
            });
      }));

Ava("test " + name + " remainder", (function (t) {
        var testNotModByZero = function (a, b) {
          if (a !== 0) {
            var result = $$Number.Uint16.fromIntExn(Caml_int32.mod_(b, a) | 0);
            var a$1 = $$Number.Uint16.fromIntExn(a);
            var b$1 = $$Number.Uint16.fromIntExn(b);
            t.deepEqual($$Number.Uint16.rem(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Uint16.remExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint16.remUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint16.rem($$Number.Uint16.zero, a$1), Caml_option.some($$Number.Uint16.zero), undefined);
            t.deepEqual($$Number.Uint16.remExn($$Number.Uint16.zero, a$1), $$Number.Uint16.zero, undefined);
            t.deepEqual($$Number.Uint16.remUnsafe($$Number.Uint16.zero, a$1), $$Number.Uint16.zero, undefined);
          }
          if (b !== 0) {
            var result$1 = $$Number.Uint16.fromIntExn(Caml_int32.mod_(a, b) | 0);
            var a$2 = $$Number.Uint16.fromIntExn(a);
            var b$2 = $$Number.Uint16.fromIntExn(b);
            t.deepEqual($$Number.Uint16.rem(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Uint16.remExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint16.remUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint16.rem($$Number.Uint16.zero, b$2), Caml_option.some($$Number.Uint16.zero), undefined);
            t.deepEqual($$Number.Uint16.remExn($$Number.Uint16.zero, b$2), $$Number.Uint16.zero, undefined);
            t.deepEqual($$Number.Uint16.remUnsafe($$Number.Uint16.zero, b$2), $$Number.Uint16.zero, undefined);
          }
          var a$3 = $$Number.Uint16.fromIntExn(a);
          var b$3 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.rem(a$3, $$Number.Uint16.one), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.remExn(a$3, $$Number.Uint16.one), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.remUnsafe(a$3, $$Number.Uint16.one), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.rem(b$3, $$Number.Uint16.one), Caml_option.some($$Number.Uint16.zero), undefined);
          t.deepEqual($$Number.Uint16.remExn(b$3, $$Number.Uint16.one), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.remUnsafe(b$3, $$Number.Uint16.one), $$Number.Uint16.zero, undefined);
        };
        testNotModByZero(73, 382);
        testNotModByZero(0, 73);
        testNotModByZero(0, 382);
        testNotModByZero(65535, 73);
        testNotModByZero(65535, 382);
        testNotModByZero(73, 2);
        testNotModByZero(382, 2);
        testNotModByZero(0, 2);
        testNotModByZero(65535, 2);
        testNotModByZero(1, 2);
        testNotModByZero(65534, 2);
        var testModByZero = function (a) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          t.deepEqual($$Number.Uint16.rem(a$1, $$Number.Uint16.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint16.remExn(a$1, $$Number.Uint16.zero);
                }));
        };
        testModByZero(0);
        testModByZero(1);
        testModByZero(73);
        testModByZero(382);
        testModByZero(10000);
        testModByZero(0);
        testModByZero(65535);
        testModByZero(1);
        testModByZero(65534);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              testNotModByZero(a, b);
              testModByZero(a);
              testModByZero(b);
            });
      }));

Ava("test " + name + " sum", (function (t) {
        var testInRange = function (arr) {
          var result = $$Number.Uint16.fromIntExn(Belt_Array.reduce(arr, 0, (function (acc, v) {
                      return acc + v | 0;
                    })));
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return $$Number.Uint16.fromIntExn(i);
                }));
          t.deepEqual($$Number.Uint16.sum(arr$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.sumExn(arr$1), result, undefined);
          t.deepEqual($$Number.Uint16.sumUnsafe(arr$1), result, undefined);
        };
        testInRange([73]);
        testInRange([382]);
        testInRange([0]);
        testInRange([65535]);
        testInRange([1]);
        testInRange([65534]);
        testInRange([
              73,
              382
            ]);
        testInRange([
              382,
              73
            ]);
        testInRange([
              73,
              10000,
              382
            ]);
        testInRange([
              0,
              65535
            ]);
        t.deepEqual($$Number.Uint16.sum([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint16.sumExn([]);
              }));
        var testOutOfRange = function (arr) {
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return $$Number.Uint16.fromIntExn(i);
                }));
          t.deepEqual($$Number.Uint16.sum(arr$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.sumExn(arr$1);
                }));
        };
        testOutOfRange([
              65535,
              1
            ]);
        testOutOfRange([
              1,
              65535
            ]);
        testOutOfRange([
              65535,
              10000
            ]);
        testOutOfRange([
              10000,
              65535
            ]);
        testOutOfRange([
              65535,
              309,
              10000
            ]);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              testInRange([a]);
              testInRange([b]);
              var result = a + b;
              if (result >= 0 && result <= 65535) {
                testInRange([
                      a,
                      b
                    ]);
                return testInRange([
                            b,
                            a
                          ]);
              } else {
                testOutOfRange([
                      a,
                      b
                    ]);
                return testOutOfRange([
                            b,
                            a
                          ]);
              }
            });
      }));

Ava("test " + name + " increase and decrease", (function (t) {
        var testIncInRange = function (i) {
          var result = $$Number.Uint16.fromIntExn(i + 1 | 0);
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.inc(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.incExn(n), result, undefined);
          t.deepEqual($$Number.Uint16.incUnsafe(n), result, undefined);
        };
        testIncInRange(0);
        testIncInRange(1);
        testIncInRange(10000);
        testIncInRange(0);
        testIncInRange(1);
        testIncInRange(65534);
        TestUtils.loop100Fn(function () {
              testIncInRange(TestUtils.randomInt(0, 65535));
            });
        t.deepEqual($$Number.Uint16.inc($$Number.Uint16.maxValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Uint16.incExn($$Number.Uint16.maxValue);
              }));
        var testDecInRange = function (i) {
          var result = $$Number.Uint16.fromIntExn(i - 1 | 0);
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.dec(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.decExn(n), result, undefined);
          t.deepEqual($$Number.Uint16.decUnsafe(n), result, undefined);
        };
        testDecInRange(1);
        testDecInRange(10000);
        testDecInRange(1);
        testDecInRange(65535);
        testDecInRange(65534);
        TestUtils.loop100Fn(function () {
              testDecInRange(TestUtils.randomInt(0 + 1.0, 65535));
            });
        t.deepEqual($$Number.Uint16.dec($$Number.Uint16.minValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Uint16.decExn($$Number.Uint16.minValue);
              }));
      }));

Ava("test " + name + " bitwise", (function (t) {
        var assertNot1 = function (a, b) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.lnot(a$1), b$1, undefined);
          t.deepEqual($$Number.Uint16.lnot(b$1), a$1, undefined);
        };
        assertNot1(10000, 55535);
        assertNot1(0, 65535);
        assertNot1(1, 65534);
        var assertNot2 = function (i) {
          var n = $$Number.Uint16.fromIntExn(i);
          t.deepEqual($$Number.Uint16.lnot($$Number.Uint16.lnot(n)), n, undefined);
        };
        assertNot2(0);
        assertNot2(1);
        assertNot2(10000);
        assertNot2(0);
        assertNot2(65535);
        TestUtils.loop100Fn(function () {
              assertNot2(TestUtils.randomInt(0, 65535));
            });
        var assertAnd = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          var value$1 = $$Number.Uint16.fromIntExn(value);
          t.deepEqual($$Number.Uint16.land(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Uint16.land(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Uint16.land(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.land(a$1, $$Number.Uint16.lnot(a$1)), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.land(b$1, $$Number.Uint16.lnot(b$1)), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.land(value$1, $$Number.Uint16.lnot(value$1)), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.land(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.land(b$1, a$1), value$1, undefined);
        };
        assertAnd(10000, 55535, 0);
        assertAnd(0, 65535, 0);
        assertAnd(1, 65534, 0);
        assertAnd(73, 382, 72);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(0, 65535);
              assertAnd(value, value, value);
            });
        var assertOr = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          var value$1 = $$Number.Uint16.fromIntExn(value);
          var oneBits = $$Number.Uint16.maxValue;
          t.deepEqual($$Number.Uint16.lor(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Uint16.lor(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Uint16.lor(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.lor(a$1, $$Number.Uint16.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lor(b$1, $$Number.Uint16.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lor(value$1, $$Number.Uint16.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.lor(b$1, a$1), value$1, undefined);
        };
        assertOr(73, 382, 383);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(0, 65535);
              assertOr(value, value, value);
            });
        assertOr(10000, 55535, 65535);
        assertOr(0, 65535, 65535);
        assertOr(1, 65534, 65535);
        var assertXor = function (a, b, value) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          var value$1 = $$Number.Uint16.fromIntExn(value);
          var oneBits = $$Number.Uint16.maxValue;
          t.deepEqual($$Number.Uint16.lxor(a$1, a$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.lxor(b$1, b$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.lxor(value$1, value$1), $$Number.Uint16.zero, undefined);
          t.deepEqual($$Number.Uint16.lxor(a$1, $$Number.Uint16.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lxor(b$1, $$Number.Uint16.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lxor(value$1, $$Number.Uint16.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint16.lxor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint16.lxor(b$1, a$1), value$1, undefined);
        };
        assertXor(73, 382, 311);
        TestUtils.loop100Fn(function () {
              var value = TestUtils.randomInt(0, 65535);
              assertXor(value, value, 0);
            });
        assertXor(10000, 55535, 65535);
        assertXor(0, 65535, 65535);
        assertXor(1, 65534, 65535);
        var modBits = function (i) {
          return ((i >>> 0) % bits);
        };
        var value = $$Number.Uint16.fromIntExn(10000);
        for(var i = -16; i <= 32; ++i){
          t.deepEqual($$Number.Uint16.lsl(value, i), $$Number.Uint16.fromIntExn(Belt_Array.getExn(valueShiftLeft, modBits(i))), undefined);
        }
        var mask = 65535;
        var testUnsignedShiftRight = function (value) {
          var n = $$Number.Uint16.fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            var i_ = modBits(i);
            t.deepEqual($$Number.Uint16.lsr(n, i), $$Number.Uint16.fromFloatExn(Math.floor((
                          value < 0 && i_ !== 0 ? value & mask : value
                        ) / Math.pow(2.0, i_))), undefined);
          }
        };
        testUnsignedShiftRight(10000);
        testUnsignedShiftRight(55535);
        TestUtils.loop100Fn(function () {
              testUnsignedShiftRight(TestUtils.randomInt(0, 65535));
            });
        var testShiftRight = function (value) {
          var n = $$Number.Uint16.fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Uint16.asr(n, i), $$Number.Uint16.fromFloatExn(Math.floor(value / Math.pow(2.0, modBits(i)))), undefined);
          }
        };
        testShiftRight(10000);
        testShiftRight(55535);
        TestUtils.loop100Fn(function () {
              testShiftRight(TestUtils.randomInt(0, 65535));
            });
        var value$1 = $$Number.Uint16.fromIntExn(10000);
        for(var i$1 = -16; i$1 <= 32; ++i$1){
          t.deepEqual($$Number.Uint16.rsl(value$1, i$1), $$Number.Uint16.fromIntExn(Belt_Array.getExn(valueRotateShiftLeft, modBits(i$1))), undefined);
        }
        var testRotateShiftLeft = function (value) {
          var n = $$Number.Uint16.fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Uint16.lnot($$Number.Uint16.rsl(n, i)), $$Number.Uint16.rsl($$Number.Uint16.lnot(n), i), undefined);
          }
        };
        testRotateShiftLeft(10000);
        testRotateShiftLeft(55535);
        TestUtils.loop100Fn(function () {
              testRotateShiftLeft(TestUtils.randomInt(0, 65535));
            });
        var testRotateShiftRight = function (value) {
          var n = $$Number.Uint16.fromIntExn(value);
          for(var i = -16; i <= 32; ++i){
            t.deepEqual($$Number.Uint16.rsl(n, i), $$Number.Uint16.rsr(n, 16 - i | 0), undefined);
            t.deepEqual($$Number.Uint16.lnot($$Number.Uint16.rsr(n, i)), $$Number.Uint16.rsr($$Number.Uint16.lnot(n), i), undefined);
          }
        };
        testRotateShiftRight(10000);
        testRotateShiftRight(55535);
        TestUtils.loop100Fn(function () {
              testRotateShiftRight(TestUtils.randomInt(0, 65535));
            });
      }));

Ava("test " + name + " integer math", (function (t) {
        var testClz = function (n, result) {
          t.deepEqual($$Number.Uint16.clz(n), result, undefined);
        };
        testClz($$Number.Uint16.zero, 16);
        testClz($$Number.Uint16.minValue, 16);
        testClz($$Number.Uint16.maxValue, 0);
        for(var i = 0; i <= 15; ++i){
          testClz($$Number.Uint16.lsl($$Number.Uint16.one, i), (16 - i | 0) - 1 | 0);
        }
        t.deepEqual($$Number.Uint16.imul($$Number.Uint16.fromIntExn(73), $$Number.Uint16.fromIntExn(382)), $$Number.Uint16.fromIntExn(27886), undefined);
        var mask = 65535;
        var j = Math.pow(2.0, 16);
        var k = Math.pow(2.0, 15);
        var toU32 = function (i) {
          return TestUtils.intToUint32(i & mask);
        };
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomInt(0, 65535);
              var m = toU32(a) * toU32(b) % j;
              var result = false && m >= k ? m - j : m;
              t.deepEqual($$Number.Uint16.imul($$Number.Uint16.fromIntExn(a), $$Number.Uint16.fromIntExn(b)), $$Number.Uint16.fromFloatExn(result), undefined);
              t.deepEqual($$Number.Uint16.imul($$Number.Uint16.fromIntExn(b), $$Number.Uint16.fromIntExn(a)), $$Number.Uint16.fromFloatExn(result), undefined);
            });
        var testPowInRange = function (a, b) {
          var result = $$Number.Uint16.fromFloatExn(Math.pow(a, b));
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.pow(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint16.powExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.powUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint16.pow(a$1, $$Number.Uint16.zero), Caml_option.some($$Number.Uint16.one), undefined);
          t.deepEqual($$Number.Uint16.powExn(a$1, $$Number.Uint16.zero), $$Number.Uint16.one, undefined);
          t.deepEqual($$Number.Uint16.powUnsafe(a$1, $$Number.Uint16.zero), $$Number.Uint16.one, undefined);
          t.deepEqual($$Number.Uint16.pow(b$1, $$Number.Uint16.zero), Caml_option.some($$Number.Uint16.one), undefined);
          t.deepEqual($$Number.Uint16.powExn(b$1, $$Number.Uint16.zero), $$Number.Uint16.one, undefined);
          t.deepEqual($$Number.Uint16.powUnsafe(b$1, $$Number.Uint16.zero), $$Number.Uint16.one, undefined);
          t.deepEqual($$Number.Uint16.pow(a$1, $$Number.Uint16.one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint16.powExn(a$1, $$Number.Uint16.one), a$1, undefined);
          t.deepEqual($$Number.Uint16.powUnsafe(a$1, $$Number.Uint16.one), a$1, undefined);
          t.deepEqual($$Number.Uint16.pow(b$1, $$Number.Uint16.one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint16.powExn(b$1, $$Number.Uint16.one), b$1, undefined);
          t.deepEqual($$Number.Uint16.powUnsafe(b$1, $$Number.Uint16.one), b$1, undefined);
        };
        testPowInRange(0, 1);
        testPowInRange(1, 0);
        testPowInRange(10000, 0);
        testPowInRange(0, 1);
        testPowInRange(65535, 1);
        var testPowOutOfRange = function (a, b) {
          var a$1 = $$Number.Uint16.fromIntExn(a);
          var b$1 = $$Number.Uint16.fromIntExn(b);
          t.deepEqual($$Number.Uint16.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint16.powExn(a$1, b$1);
                }));
        };
        testPowOutOfRange(65535, 2);
        testPowInRange(0, 10000);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0, 65535);
              var b = TestUtils.randomPositiveSmallInt(undefined);
              var result = Math.pow(a, b);
              if (result >= 0 && result <= 65535) {
                return testPowInRange(a, b);
              } else {
                return testPowOutOfRange(a, b);
              }
            });
        TestUtils.loop100Fn(function () {
              var m = TestUtils.randomInt(0, 65535);
              var n = TestUtils.randomInt(0, 65535);
              var min = $$Number.Uint16.fromIntExn(m < n ? m : n);
              var max = $$Number.Uint16.fromIntExn(m > n ? m : n);
              if (min !== max) {
                return TestUtils.loopFn((function () {
                              var i = $$Number.Uint16.random(min, max);
                              t.true($$Number.Uint16.ge(i, min), undefined);
                              t.true($$Number.Uint16.lt(i, max), undefined);
                            }), 10);
              }
              
            });
      }));

var IntModule;

var isSigned = false;

var is32Bits = false;

var bits = 16;

var minValue = 0;

var maxValue = 65535;

var value = 10000;

var valueNot = 55535;

var min = 73;

var max = 382;

var minMaxAnd = 72;

var minMaxOr = 383;

var minMaxXor = 311;

export {
  IntModule ,
  name ,
  isSigned ,
  is32Bits ,
  bits ,
  minValue ,
  maxValue ,
  value ,
  valueNot ,
  valueShiftLeft ,
  valueRotateShiftLeft ,
  min ,
  max ,
  minMaxAnd ,
  minMaxOr ,
  minMaxXor ,
  randomValue ,
  randomLargerInt ,
  randomSmallerInt ,
}
/*  Not a pure module */
