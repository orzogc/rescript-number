// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_int from "rescript/lib/es6/js_int.js";
import * as $$Number from "../src/Number.bs.mjs";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var name = "Uint32";

var valueShiftLeft = [
  2000000000.0,
  4000000000.0,
  3705032704.0,
  3115098112.0,
  1935228928.0,
  3870457856.0,
  3445948416.0,
  2596929536.0,
  898891776.0,
  1797783552.0,
  3595567104.0,
  2896166912.0,
  1497366528.0,
  2994733056.0,
  1694498816.0,
  3388997632.0,
  2483027968.0,
  671088640.0,
  1342177280.0,
  2684354560.0,
  1073741824.0,
  2147483648.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0
];

var valueRotateShiftLeft = [
  2000000000.0,
  4000000000.0,
  3705032705.0,
  3115098115.0,
  1935228935.0,
  3870457870.0,
  3445948445.0,
  2596929595.0,
  898891895.0,
  1797783790.0,
  3595567580.0,
  2896167865.0,
  1497368435.0,
  2994736870.0,
  1694506445.0,
  3389012890.0,
  2483058485.0,
  671149675.0,
  1342299350.0,
  2684598700.0,
  1074230105.0,
  2148460210.0,
  1953125.0,
  3906250.0,
  7812500.0,
  15625000.0,
  31250000.0,
  62500000.0,
  125000000.0,
  250000000.0,
  500000000.0,
  1000000000.0
];

function toUint32(f) {
  return (f >>> 0);
}

function randomValue() {
  return Math.floor(TestUtils.randomFloat(0.0, 4294967295.0));
}

function randomLargerFloat() {
  return Math.floor(TestUtils.randomFloat(Js_int.max + 1.0, 4294967295.0));
}

Ava("test " + name + " sign", (function (t) {
        t.deepEqual($$Number.Uint32.isSigned, false, undefined);
        t.deepEqual($$Number.Uint32.isUnsigned, true, undefined);
      }));

Ava("test " + name + " bits", (function (t) {
        t.deepEqual($$Number.Uint32.bits, 32, undefined);
      }));

Ava("test " + name + " from int", (function (t) {
        var testInRange = function (i) {
          var n = $$Number.Uint32.fromIntExn(i);
          t.deepEqual($$Number.Uint32.fromInt(i), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint32.fromIntExn(i), n, undefined);
          t.deepEqual($$Number.Uint32.fromIntClamped(i), n, undefined);
          t.deepEqual($$Number.Uint32.fromIntUnsafe(i), n, undefined);
        };
        testInRange(0);
        testInRange(1);
        testInRange(2000000000);
        testInRange(Js_int.max);
        testInRange(Js_int.max - 1 | 0);
        TestUtils.loop100Fn(function () {
              testInRange(TestUtils.randomPositiveInt(undefined));
            });
        var testOutOfRange = function (i) {
          t.deepEqual($$Number.Uint32.fromInt(i), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.fromIntExn(i);
                }));
          t.deepEqual($$Number.Uint32.fromIntClamped(i), $$Number.Uint32.minValue, undefined);
        };
        testOutOfRange(-1);
        testOutOfRange(- 2000000000.0 | 0);
        testOutOfRange(Js_int.min);
        testOutOfRange(Js_int.min + 1 | 0);
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomNegativeInt(undefined));
            });
      }));

Ava("test " + name + " to int", (function (t) {
        var testInRange = function (i) {
          var n = $$Number.Uint32.fromIntExn(i);
          t.deepEqual($$Number.Uint32.toInt(n), i, undefined);
          t.deepEqual($$Number.Uint32.toIntExn(n), i, undefined);
          t.deepEqual($$Number.Uint32.toIntClamped(n), i, undefined);
          t.deepEqual($$Number.Uint32.toIntUnsafe(n), i, undefined);
        };
        testInRange(0);
        testInRange(1);
        testInRange(2000000000);
        testInRange(Js_int.max);
        testInRange(Js_int.max - 1 | 0);
        TestUtils.loop100Fn(function () {
              testInRange(TestUtils.randomPositiveInt(undefined));
            });
        var testOutOfRange = function (f) {
          var n = $$Number.Uint32.fromFloatExn(f);
          t.deepEqual($$Number.Uint32.toInt(n), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.toIntExn(n);
                }));
          t.deepEqual($$Number.Uint32.toIntClamped(n), Js_int.max, undefined);
        };
        testOutOfRange(Js_int.max + 1.0);
        testOutOfRange(4294967295.0);
        TestUtils.loop100Fn(function () {
              testOutOfRange(randomLargerFloat(undefined));
            });
      }));

Ava("test " + name + " from float", (function (t) {
        var testIsIntegerAndInRange = function (f) {
          var n = $$Number.Uint32.fromFloatExn(f);
          t.deepEqual($$Number.Uint32.fromFloat(f), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint32.fromFloatExn(f), n, undefined);
          t.deepEqual($$Number.Uint32.fromFloatClamped(f), n, undefined);
          t.deepEqual($$Number.Uint32.fromFloatUnsafe(f), n, undefined);
        };
        testIsIntegerAndInRange(0.0);
        testIsIntegerAndInRange(-0.0);
        testIsIntegerAndInRange(1.0);
        testIsIntegerAndInRange(2000000000.0);
        testIsIntegerAndInRange(0.0);
        testIsIntegerAndInRange(4294967295.0);
        testIsIntegerAndInRange(0.0 + 1.0);
        testIsIntegerAndInRange(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              testIsIntegerAndInRange(randomValue(undefined));
            });
        var testOutOfRange = function (f, value) {
          t.deepEqual($$Number.Uint32.fromFloat(f), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.fromFloatExn(f);
                }));
          t.deepEqual($$Number.Uint32.fromFloatClamped(f), $$Number.Uint32.fromFloatExn(value), undefined);
        };
        testOutOfRange(0.0 - 1.0, 0.0);
        testOutOfRange(4294967295.0 + 1.0, 4294967295.0);
        testOutOfRange(0.0 - 2000000000.0, 0.0);
        testOutOfRange(4294967295.0 + 2000000000.0, 4294967295.0);
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(4294967295.0 + 1.0, TestUtils.maxSafeInteger)), 4294967295.0);
            });
        TestUtils.loop100Fn(function () {
              testOutOfRange(Math.floor(TestUtils.randomFloat(TestUtils.minSafeInteger, 0.0 - 1.0)), 0.0);
            });
        var testIsNotInteger = function (f, value) {
          t.deepEqual($$Number.Uint32.fromFloat(f), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Uint32.fromFloatExn(f);
                }));
          t.deepEqual($$Number.Uint32.fromFloatClamped(f), $$Number.Uint32.fromFloatExn(value), undefined);
        };
        testIsNotInteger(2000000000.0 + 0.5, 2000000000.0);
        testIsNotInteger(Number.NaN, 0.0);
        testIsNotInteger(PervasivesU.neg_infinity, 0.0);
        testIsNotInteger(PervasivesU.infinity, 4294967295.0);
        testIsNotInteger(0.0 + 0.1, 0.0);
        testIsNotInteger(0.0 - 0.1, 0.0);
        testIsNotInteger(4294967295.0 + 0.1, 4294967295.0);
        testIsNotInteger(4294967295.0 - 0.1, 4294967295.0 - 1.0);
        testIsNotInteger(0.0 - 2000000000.0 - 0.5, 0.0);
        testIsNotInteger(4294967295.0 + 2000000000.0 + 0.5, 4294967295.0);
      }));

Ava("test " + name + " to float", (function (t) {
        var testToFloat = function (f) {
          t.deepEqual($$Number.Uint32.toFloat($$Number.Uint32.fromFloatExn(f)), f, undefined);
        };
        testToFloat(2000000000.0);
        TestUtils.loop100Fn(function () {
              testToFloat(randomValue(undefined));
            });
      }));

Ava("test " + name + " from string", (function (t) {
        var testInRange = function (f, s) {
          var n = $$Number.Uint32.fromFloatExn(f);
          t.deepEqual($$Number.Uint32.fromString(s), Caml_option.some(n), undefined);
          t.deepEqual($$Number.Uint32.fromStringExn(s), n, undefined);
        };
        testInRange(0.0, "0");
        testInRange(0.0, "-0");
        testInRange(1.0, "1");
        testInRange(2000000000.0, String(2000000000.0));
        testInRange(0.0, String(0.0));
        testInRange(4294967295.0, String(4294967295.0));
        testInRange(0.0 + 1.0, String(0.0 + 1.0));
        testInRange(4294967295.0 - 1.0, String(4294967295.0 - 1.0));
        TestUtils.loop100Fn(function () {
              var value = randomValue(undefined);
              testInRange(value, String(value));
            });
        var testOutOfRange = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Uint32.fromString(s), undefined, undefined);
          TestUtils.assertException(t, (function () {
                  return $$Number.Uint32.fromStringExn(s);
                }));
        };
        testOutOfRange(0.0 - 1.0);
        testOutOfRange(4294967295.0 + 1.0);
        testOutOfRange(0.0 - 2000000000.0);
        testOutOfRange(4294967295.0 + 2000000000.0);
        TestUtils.loop100Fn(function () {
              testOutOfRange(TestUtils.randomNegativeInt(undefined));
            });
        var testIsNotInteger = function (s) {
          t.deepEqual($$Number.Uint32.fromString(s), undefined, undefined);
          TestUtils.assertInvalidArgument(t, (function () {
                  return $$Number.Uint32.fromStringExn(s);
                }));
        };
        testIsNotInteger("NaN");
        testIsNotInteger("Infinity");
        testIsNotInteger("-Infinity");
        testIsNotInteger("foo");
        testIsNotInteger("b1");
      }));

Ava("test " + name + " to string", (function (t) {
        var testToString = function (f) {
          var s = String(f);
          t.deepEqual($$Number.Uint32.toString($$Number.Uint32.fromStringExn(s)), s, undefined);
        };
        testToString(0.0);
        testToString(1.0);
        testToString(2000000000.0);
        testToString(0.0);
        testToString(0.0 + 1.0);
        testToString(4294967295.0);
        testToString(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              testToString(randomValue(undefined));
            });
      }));

Ava("test " + name + " zero", (function (t) {
        t.deepEqual($$Number.Uint32.zero, $$Number.Uint32.fromIntExn(0), undefined);
        t.deepEqual($$Number.Uint32.zero, $$Number.Uint32.fromFloatExn(0.0), undefined);
        t.deepEqual($$Number.Uint32.zero, $$Number.Uint32.fromFloatExn(-0.0), undefined);
      }));

Ava("test " + name + " one", (function (t) {
        t.deepEqual($$Number.Uint32.one, $$Number.Uint32.fromIntExn(1), undefined);
        t.deepEqual($$Number.Uint32.one, $$Number.Uint32.fromFloatExn(1.0), undefined);
      }));

Ava("test " + name + " range", (function (t) {
        t.deepEqual($$Number.Uint32.minValue, $$Number.Uint32.fromIntExn(0), undefined);
        t.deepEqual($$Number.Uint32.minValue, $$Number.Uint32.fromFloatExn(0.0), undefined);
        t.deepEqual($$Number.Uint32.maxValue, $$Number.Uint32.fromFloatExn(4294967295.0), undefined);
      }));

Ava("test " + name + " comparison", (function (t) {
        var testCompare = function (less, greater) {
          var less$1 = $$Number.Uint32.fromFloatExn(less);
          var greater$1 = $$Number.Uint32.fromFloatExn(greater);
          var value = $$Number.Uint32.fromFloatExn(2000000000.0);
          var minValue = $$Number.Uint32.fromFloatExn(0.0);
          var maxValue = $$Number.Uint32.fromFloatExn(4294967295.0);
          t.deepEqual($$Number.Uint32.compare(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Uint32.compare(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Uint32.compare(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Uint32.compare(greater$1, greater$1), 0, undefined);
          t.deepEqual($$Number.Uint32.compareExn(less$1, greater$1), -1, undefined);
          t.deepEqual($$Number.Uint32.compareExn(greater$1, less$1), 1, undefined);
          t.deepEqual($$Number.Uint32.compareExn(less$1, less$1), 0, undefined);
          t.deepEqual($$Number.Uint32.compareExn(greater$1, greater$1), 0, undefined);
          t.true($$Number.Uint32.eq(less$1, less$1), undefined);
          t.true($$Number.Uint32.eq(greater$1, greater$1), undefined);
          t.false($$Number.Uint32.eq(less$1, greater$1), undefined);
          t.false($$Number.Uint32.eq(greater$1, less$1), undefined);
          t.true($$Number.Uint32.ne(less$1, greater$1), undefined);
          t.true($$Number.Uint32.ne(greater$1, less$1), undefined);
          t.false($$Number.Uint32.ne(less$1, less$1), undefined);
          t.false($$Number.Uint32.ne(greater$1, greater$1), undefined);
          t.true($$Number.Uint32.lt(less$1, greater$1), undefined);
          t.false($$Number.Uint32.lt(greater$1, less$1), undefined);
          t.false($$Number.Uint32.lt(less$1, less$1), undefined);
          t.false($$Number.Uint32.lt(greater$1, greater$1), undefined);
          t.true($$Number.Uint32.le(less$1, greater$1), undefined);
          t.false($$Number.Uint32.le(greater$1, less$1), undefined);
          t.true($$Number.Uint32.le(less$1, less$1), undefined);
          t.true($$Number.Uint32.le(greater$1, greater$1), undefined);
          t.true($$Number.Uint32.gt(greater$1, less$1), undefined);
          t.false($$Number.Uint32.gt(less$1, greater$1), undefined);
          t.false($$Number.Uint32.gt(less$1, less$1), undefined);
          t.false($$Number.Uint32.gt(greater$1, greater$1), undefined);
          t.true($$Number.Uint32.ge(greater$1, less$1), undefined);
          t.false($$Number.Uint32.ge(less$1, greater$1), undefined);
          t.true($$Number.Uint32.ge(less$1, less$1), undefined);
          t.true($$Number.Uint32.ge(greater$1, greater$1), undefined);
          t.deepEqual($$Number.Uint32.min(less$1, greater$1), less$1, undefined);
          t.deepEqual($$Number.Uint32.min(greater$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Uint32.min(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Uint32.min(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Uint32.minMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Uint32.minMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Uint32.minMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Uint32.minMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(minValue), undefined);
          t.deepEqual($$Number.Uint32.minManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyExn([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyExn([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Uint32.minManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyUnsafe([
                    less$1,
                    greater$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyUnsafe([
                    greater$1,
                    less$1
                  ]), less$1, undefined);
          t.deepEqual($$Number.Uint32.minManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), minValue, undefined);
          t.deepEqual($$Number.Uint32.max(less$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Uint32.max(greater$1, less$1), greater$1, undefined);
          t.deepEqual($$Number.Uint32.max(less$1, less$1), less$1, undefined);
          t.deepEqual($$Number.Uint32.max(greater$1, greater$1), greater$1, undefined);
          t.deepEqual($$Number.Uint32.maxMany([less$1]), Caml_option.some(less$1), undefined);
          t.deepEqual($$Number.Uint32.maxMany([
                    less$1,
                    greater$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Uint32.maxMany([
                    greater$1,
                    less$1
                  ]), Caml_option.some(greater$1), undefined);
          t.deepEqual($$Number.Uint32.maxMany([
                    less$1,
                    value,
                    greater$1,
                    minValue,
                    maxValue
                  ]), Caml_option.some(maxValue), undefined);
          t.deepEqual($$Number.Uint32.maxManyExn([less$1]), less$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyExn([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyExn([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyExn([
                    minValue,
                    maxValue,
                    less$1,
                    value,
                    greater$1
                  ]), maxValue, undefined);
          t.deepEqual($$Number.Uint32.maxManyUnsafe([less$1]), less$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyUnsafe([
                    less$1,
                    greater$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyUnsafe([
                    greater$1,
                    less$1
                  ]), greater$1, undefined);
          t.deepEqual($$Number.Uint32.maxManyUnsafe([
                    less$1,
                    minValue,
                    maxValue,
                    value,
                    greater$1
                  ]), maxValue, undefined);
        };
        testCompare(27852.0, 56331.0);
        TestUtils.loop100Fn(function () {
              var less = randomValue(undefined);
              var greater = Math.floor(TestUtils.randomFloat(less + 1.0, 4294967295.0 + 1.0));
              testCompare(less, greater);
            });
        var zero = $$Number.Uint32.fromFloatExn(0.0);
        var negZero = $$Number.Uint32.fromFloatExn(-0.0);
        t.true($$Number.Uint32.eq(zero, negZero), undefined);
        t.true($$Number.Uint32.le(zero, negZero), undefined);
        t.true($$Number.Uint32.ge(zero, negZero), undefined);
        t.false($$Number.Uint32.lt(zero, negZero), undefined);
        t.false($$Number.Uint32.gt(zero, negZero), undefined);
        t.deepEqual($$Number.Uint32.minMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint32.minManyExn([]);
              }));
        t.deepEqual($$Number.Uint32.maxMany([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint32.maxManyExn([]);
              }));
      }));

Ava("test " + name + " addition", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint32.fromFloatExn(a + b);
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.add(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.add(a$1, b$1), $$Number.Uint32.add(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.addExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.addExn(a$1, b$1), $$Number.Uint32.addExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.addClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.addClamped(a$1, b$1), $$Number.Uint32.addClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(a$1, b$1), $$Number.Uint32.addUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.add(a$1, $$Number.Uint32.zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint32.add(a$1, $$Number.Uint32.zero), $$Number.Uint32.add($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.addExn(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.addExn(a$1, $$Number.Uint32.zero), $$Number.Uint32.addExn($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.addClamped(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.addClamped(a$1, $$Number.Uint32.zero), $$Number.Uint32.addClamped($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(a$1, $$Number.Uint32.zero), $$Number.Uint32.addUnsafe($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.add(b$1, $$Number.Uint32.zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint32.add(b$1, $$Number.Uint32.zero), $$Number.Uint32.add($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.addExn(b$1, $$Number.Uint32.zero), b$1, undefined);
          t.deepEqual($$Number.Uint32.addExn(b$1, $$Number.Uint32.zero), $$Number.Uint32.addExn($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.addClamped(b$1, $$Number.Uint32.zero), b$1, undefined);
          t.deepEqual($$Number.Uint32.addClamped(b$1, $$Number.Uint32.zero), $$Number.Uint32.addClamped($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(b$1, $$Number.Uint32.zero), b$1, undefined);
          t.deepEqual($$Number.Uint32.addUnsafe(b$1, $$Number.Uint32.zero), $$Number.Uint32.addUnsafe($$Number.Uint32.zero, b$1), undefined);
        };
        testInRange(27852.0, 56331.0);
        testInRange(0.0, 0.0);
        testInRange(4294967295.0, 0.0);
        testInRange(0.0, 1.0);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          var value$1 = $$Number.Uint32.fromFloatExn(value);
          t.deepEqual($$Number.Uint32.add(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Uint32.add(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.addExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.addExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Uint32.addClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.addClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(4294967295.0, 1.0, 4294967295.0);
        testOutOfRange(4294967295.0, 2000000000.0, 4294967295.0);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              var result = a + b;
              if (result < 0.0) {
                testOutOfRange(a, b, 0.0);
              } else if (result > 4294967295.0) {
                testOutOfRange(a, b, 4294967295.0);
              } else {
                testInRange(a, b);
              }
              testInRange(a, 1.0);
              testInRange(b, 1.0);
            });
      }));

Ava("test " + name + " subtraction", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint32.fromFloatExn(a - b);
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.sub(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.subExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.subClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.sub(a$1, result), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint32.subExn(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint32.subClamped(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(a$1, result), b$1, undefined);
          t.deepEqual($$Number.Uint32.sub(a$1, a$1), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.subExn(a$1, a$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.subClamped(a$1, a$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(a$1, a$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.sub(a$1, $$Number.Uint32.zero), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint32.subExn(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.subClamped(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(a$1, $$Number.Uint32.zero), a$1, undefined);
          t.deepEqual($$Number.Uint32.sub(b$1, b$1), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.subExn(b$1, b$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.subClamped(b$1, b$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(b$1, b$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.sub(b$1, $$Number.Uint32.zero), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint32.subExn(b$1, $$Number.Uint32.zero), b$1, undefined);
          t.deepEqual($$Number.Uint32.subClamped(b$1, $$Number.Uint32.zero), b$1, undefined);
          t.deepEqual($$Number.Uint32.subUnsafe(b$1, $$Number.Uint32.zero), b$1, undefined);
        };
        testInRange(56331.0, 27852.0);
        testInRange(0.0, 0.0);
        testInRange(4294967295.0, 0.0);
        testInRange(4294967295.0, 1.0);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.sub(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.subExn(a$1, b$1);
                }));
          t.deepEqual($$Number.Uint32.subClamped(a$1, b$1), $$Number.Uint32.fromFloatExn(value), undefined);
        };
        testOutOfRange(0.0, 1.0, 0.0);
        testOutOfRange(0.0, 2000000000.0, 0.0);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              var result = a - b;
              if (result < 0.0) {
                testOutOfRange(a, b, 0.0);
              } else if (result > 4294967295.0) {
                testOutOfRange(a, b, 4294967295.0);
              } else {
                testInRange(a, b);
              }
              var result$1 = b - a;
              if (result$1 < 0.0) {
                return testOutOfRange(b, a, 0.0);
              } else if (result$1 > 4294967295.0) {
                return testOutOfRange(b, a, 4294967295.0);
              } else {
                return testInRange(b, a);
              }
            });
      }));

Ava("test " + name + " multiplication", (function (t) {
        var testInRange = function (a, b) {
          var result = $$Number.Uint32.fromFloatExn(a * b);
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.mul(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.mul(a$1, b$1), $$Number.Uint32.mul(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, b$1), $$Number.Uint32.mulExn(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, b$1), $$Number.Uint32.mulClamped(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, b$1), $$Number.Uint32.mulUnsafe(b$1, a$1), undefined);
          t.deepEqual($$Number.Uint32.mul(a$1, $$Number.Uint32.zero), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.mul(a$1, $$Number.Uint32.zero), $$Number.Uint32.mul($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, $$Number.Uint32.zero), $$Number.Uint32.mulExn($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, $$Number.Uint32.zero), $$Number.Uint32.mulClamped($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, $$Number.Uint32.zero), $$Number.Uint32.mulUnsafe($$Number.Uint32.zero, a$1), undefined);
          t.deepEqual($$Number.Uint32.mul(a$1, $$Number.Uint32.one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint32.mul(a$1, $$Number.Uint32.one), $$Number.Uint32.mul($$Number.Uint32.one, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, $$Number.Uint32.one), a$1, undefined);
          t.deepEqual($$Number.Uint32.mulExn(a$1, $$Number.Uint32.one), $$Number.Uint32.mulExn($$Number.Uint32.one, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, $$Number.Uint32.one), a$1, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(a$1, $$Number.Uint32.one), $$Number.Uint32.mulClamped($$Number.Uint32.one, a$1), undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, $$Number.Uint32.one), a$1, undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(a$1, $$Number.Uint32.one), $$Number.Uint32.mulUnsafe($$Number.Uint32.one, a$1), undefined);
          t.deepEqual($$Number.Uint32.mul(b$1, $$Number.Uint32.zero), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.mul(b$1, $$Number.Uint32.zero), $$Number.Uint32.mul($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulExn(b$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulExn(b$1, $$Number.Uint32.zero), $$Number.Uint32.mulExn($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulClamped(b$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(b$1, $$Number.Uint32.zero), $$Number.Uint32.mulClamped($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(b$1, $$Number.Uint32.zero), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(b$1, $$Number.Uint32.zero), $$Number.Uint32.mulUnsafe($$Number.Uint32.zero, b$1), undefined);
          t.deepEqual($$Number.Uint32.mul(b$1, $$Number.Uint32.one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint32.mul(b$1, $$Number.Uint32.one), $$Number.Uint32.mul($$Number.Uint32.one, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulExn(b$1, $$Number.Uint32.one), b$1, undefined);
          t.deepEqual($$Number.Uint32.mulExn(b$1, $$Number.Uint32.one), $$Number.Uint32.mulExn($$Number.Uint32.one, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulClamped(b$1, $$Number.Uint32.one), b$1, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(b$1, $$Number.Uint32.one), $$Number.Uint32.mulClamped($$Number.Uint32.one, b$1), undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(b$1, $$Number.Uint32.one), b$1, undefined);
          t.deepEqual($$Number.Uint32.mulUnsafe(b$1, $$Number.Uint32.one), $$Number.Uint32.mulUnsafe($$Number.Uint32.one, b$1), undefined);
        };
        testInRange(27852.0, 56331.0);
        testInRange(0.0, 0.0);
        testInRange(4294967295.0, 0.0);
        testInRange(0.0, 1.0);
        testInRange(4294967295.0, 1.0);
        testInRange(0.0 + 1.0, 1.0);
        testInRange(4294967295.0 - 1.0, 1.0);
        var testOutOfRange = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          var value$1 = $$Number.Uint32.fromFloatExn(value);
          t.deepEqual($$Number.Uint32.mul(a$1, b$1), undefined, undefined);
          t.deepEqual($$Number.Uint32.mul(b$1, a$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.mulExn(a$1, b$1);
                }));
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.mulExn(b$1, a$1);
                }));
          t.deepEqual($$Number.Uint32.mulClamped(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.mulClamped(b$1, a$1), value$1, undefined);
        };
        testOutOfRange(4294967295.0, 2.0, 4294967295.0);
        testOutOfRange(4294967295.0, 2000000000.0, 4294967295.0);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              var result = a * b;
              if (result < 0.0) {
                return testOutOfRange(a, b, 0.0);
              } else if (result > 4294967295.0) {
                return testOutOfRange(a, b, 4294967295.0);
              } else {
                return testInRange(a, b);
              }
            });
      }));

Ava("test " + name + " division", (function (t) {
        var testNotDividedByZero = function (a, b) {
          if (a !== 0.0) {
            var result = $$Number.Uint32.fromFloatExn(toUint32(b / a));
            var a$1 = $$Number.Uint32.fromFloatExn(a);
            var b$1 = $$Number.Uint32.fromFloatExn(b);
            t.deepEqual($$Number.Uint32.div(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Uint32.divExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint32.divUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint32.div($$Number.Uint32.zero, a$1), Caml_option.some($$Number.Uint32.zero), undefined);
            t.deepEqual($$Number.Uint32.divExn($$Number.Uint32.zero, a$1), $$Number.Uint32.zero, undefined);
            t.deepEqual($$Number.Uint32.divUnsafe($$Number.Uint32.zero, a$1), $$Number.Uint32.zero, undefined);
          }
          if (b !== 0.0) {
            var result$1 = $$Number.Uint32.fromFloatExn(toUint32(a / b));
            var a$2 = $$Number.Uint32.fromFloatExn(a);
            var b$2 = $$Number.Uint32.fromFloatExn(b);
            t.deepEqual($$Number.Uint32.div(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Uint32.divExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint32.divUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint32.div($$Number.Uint32.zero, b$2), Caml_option.some($$Number.Uint32.zero), undefined);
            t.deepEqual($$Number.Uint32.divExn($$Number.Uint32.zero, b$2), $$Number.Uint32.zero, undefined);
            t.deepEqual($$Number.Uint32.divUnsafe($$Number.Uint32.zero, b$2), $$Number.Uint32.zero, undefined);
          }
          var a$3 = $$Number.Uint32.fromFloatExn(a);
          var b$3 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.div(a$3, $$Number.Uint32.one), Caml_option.some(a$3), undefined);
          t.deepEqual($$Number.Uint32.divExn(a$3, $$Number.Uint32.one), a$3, undefined);
          t.deepEqual($$Number.Uint32.divUnsafe(a$3, $$Number.Uint32.one), a$3, undefined);
          t.deepEqual($$Number.Uint32.div(b$3, $$Number.Uint32.one), Caml_option.some(b$3), undefined);
          t.deepEqual($$Number.Uint32.divExn(b$3, $$Number.Uint32.one), b$3, undefined);
          t.deepEqual($$Number.Uint32.divUnsafe(b$3, $$Number.Uint32.one), b$3, undefined);
        };
        testNotDividedByZero(27852.0, 56331.0);
        testNotDividedByZero(0.0, 27852.0);
        testNotDividedByZero(0.0, 56331.0);
        testNotDividedByZero(4294967295.0, 27852.0);
        testNotDividedByZero(4294967295.0, 56331.0);
        testNotDividedByZero(27852.0, 2.0);
        testNotDividedByZero(56331.0, 2.0);
        testNotDividedByZero(0.0, 2.0);
        testNotDividedByZero(4294967295.0, 2.0);
        testNotDividedByZero(0.0 + 1.0, 2.0);
        testNotDividedByZero(4294967295.0 - 1.0, 2.0);
        var testDividedByZero = function (i) {
          var a = $$Number.Uint32.fromFloatExn(i);
          t.deepEqual($$Number.Uint32.div(a, $$Number.Uint32.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint32.divExn(a, $$Number.Uint32.zero);
                }));
          var negZero = $$Number.Uint32.fromIntExn(-0);
          t.deepEqual($$Number.Uint32.div(a, negZero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint32.divExn(a, negZero);
                }));
        };
        testDividedByZero(0.0);
        testDividedByZero(1.0);
        testDividedByZero(27852.0);
        testDividedByZero(56331.0);
        testDividedByZero(2000000000.0);
        testDividedByZero(0.0);
        testDividedByZero(4294967295.0);
        testDividedByZero(0.0 + 1.0);
        testDividedByZero(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotDividedByZero(a, b);
              testDividedByZero(a);
              testDividedByZero(b);
            });
      }));

Ava("test " + name + " remainder", (function (t) {
        var testNotModByZero = function (a, b) {
          if (a !== 0.0) {
            var result = $$Number.Uint32.fromFloatExn(toUint32(b % a));
            var a$1 = $$Number.Uint32.fromFloatExn(a);
            var b$1 = $$Number.Uint32.fromFloatExn(b);
            t.deepEqual($$Number.Uint32.rem(b$1, a$1), Caml_option.some(result), undefined);
            t.deepEqual($$Number.Uint32.remExn(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint32.remUnsafe(b$1, a$1), result, undefined);
            t.deepEqual($$Number.Uint32.rem($$Number.Uint32.zero, a$1), Caml_option.some($$Number.Uint32.zero), undefined);
            t.deepEqual($$Number.Uint32.remExn($$Number.Uint32.zero, a$1), $$Number.Uint32.zero, undefined);
            t.deepEqual($$Number.Uint32.remUnsafe($$Number.Uint32.zero, a$1), $$Number.Uint32.zero, undefined);
          }
          if (b !== 0.0) {
            var result$1 = $$Number.Uint32.fromFloatExn(toUint32(a % b));
            var a$2 = $$Number.Uint32.fromFloatExn(a);
            var b$2 = $$Number.Uint32.fromFloatExn(b);
            t.deepEqual($$Number.Uint32.rem(a$2, b$2), Caml_option.some(result$1), undefined);
            t.deepEqual($$Number.Uint32.remExn(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint32.remUnsafe(a$2, b$2), result$1, undefined);
            t.deepEqual($$Number.Uint32.rem($$Number.Uint32.zero, b$2), Caml_option.some($$Number.Uint32.zero), undefined);
            t.deepEqual($$Number.Uint32.remExn($$Number.Uint32.zero, b$2), $$Number.Uint32.zero, undefined);
            t.deepEqual($$Number.Uint32.remUnsafe($$Number.Uint32.zero, b$2), $$Number.Uint32.zero, undefined);
          }
          var a$3 = $$Number.Uint32.fromFloatExn(a);
          var b$3 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.rem(a$3, $$Number.Uint32.one), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.remExn(a$3, $$Number.Uint32.one), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.remUnsafe(a$3, $$Number.Uint32.one), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.rem(b$3, $$Number.Uint32.one), Caml_option.some($$Number.Uint32.zero), undefined);
          t.deepEqual($$Number.Uint32.remExn(b$3, $$Number.Uint32.one), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.remUnsafe(b$3, $$Number.Uint32.one), $$Number.Uint32.zero, undefined);
        };
        testNotModByZero(27852.0, 56331.0);
        testNotModByZero(0.0, 27852.0);
        testNotModByZero(0.0, 56331.0);
        testNotModByZero(4294967295.0, 27852.0);
        testNotModByZero(4294967295.0, 56331.0);
        testNotModByZero(27852.0, 2.0);
        testNotModByZero(56331.0, 2.0);
        testNotModByZero(0.0, 2.0);
        testNotModByZero(4294967295.0, 2.0);
        testNotModByZero(0.0 + 1.0, 2.0);
        testNotModByZero(4294967295.0 - 1.0, 2.0);
        var testModByZero = function (a) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          t.deepEqual($$Number.Uint32.rem(a$1, $$Number.Uint32.zero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint32.remExn(a$1, $$Number.Uint32.zero);
                }));
          var negZero = $$Number.Uint32.fromIntExn(-0);
          t.deepEqual($$Number.Uint32.rem(a$1, negZero), undefined, undefined);
          TestUtils.assertDivisionByZero(t, (function () {
                  return $$Number.Uint32.remExn(a$1, negZero);
                }));
        };
        testModByZero(0.0);
        testModByZero(1.0);
        testModByZero(27852.0);
        testModByZero(56331.0);
        testModByZero(2000000000.0);
        testModByZero(0.0);
        testModByZero(4294967295.0);
        testModByZero(0.0 + 1.0);
        testModByZero(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testNotModByZero(a, b);
              testModByZero(a);
              testModByZero(b);
            });
      }));

Ava("test " + name + " sum", (function (t) {
        var testInRange = function (arr) {
          var result = $$Number.Uint32.fromFloatExn(Belt_Array.reduce(arr, 0.0, (function (acc, v) {
                      return acc + v;
                    })));
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return $$Number.Uint32.fromFloatExn(i);
                }));
          t.deepEqual($$Number.Uint32.sum(arr$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.sumExn(arr$1), result, undefined);
          t.deepEqual($$Number.Uint32.sumUnsafe(arr$1), result, undefined);
        };
        testInRange([27852.0]);
        testInRange([56331.0]);
        testInRange([0.0]);
        testInRange([4294967295.0]);
        testInRange([0.0 + 1.0]);
        testInRange([4294967295.0 - 1.0]);
        testInRange([
              27852.0,
              56331.0
            ]);
        testInRange([
              56331.0,
              27852.0
            ]);
        testInRange([
              27852.0,
              2000000000.0,
              56331.0
            ]);
        testInRange([
              0.0,
              4294967295.0
            ]);
        t.deepEqual($$Number.Uint32.sum([]), undefined, undefined);
        TestUtils.assertInvalidArgument(t, (function () {
                return $$Number.Uint32.sumExn([]);
              }));
        var testOutOfRange = function (arr) {
          var arr$1 = Belt_Array.mapU(arr, (function (i) {
                  return $$Number.Uint32.fromFloatExn(i);
                }));
          t.deepEqual($$Number.Uint32.sum(arr$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.sumExn(arr$1);
                }));
        };
        testOutOfRange([
              4294967295.0,
              1.0
            ]);
        testOutOfRange([
              1.0,
              4294967295.0
            ]);
        testOutOfRange([
              4294967295.0,
              2000000000.0
            ]);
        testOutOfRange([
              2000000000.0,
              4294967295.0
            ]);
        testOutOfRange([
              4294967295.0,
              56331.0 - 27852.0,
              2000000000.0
            ]);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              testInRange([a]);
              testInRange([b]);
              var result = a + b;
              if (result >= 0.0 && result <= 4294967295.0) {
                testInRange([
                      a,
                      b
                    ]);
                return testInRange([
                            b,
                            a
                          ]);
              } else {
                testOutOfRange([
                      a,
                      b
                    ]);
                return testOutOfRange([
                            b,
                            a
                          ]);
              }
            });
      }));

Ava("test " + name + " increase and decrease", (function (t) {
        var testIncInRange = function (f) {
          var result = $$Number.Uint32.fromFloatExn(f + 1.0);
          var n = $$Number.Uint32.fromFloatExn(f);
          t.deepEqual($$Number.Uint32.inc(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.incExn(n), result, undefined);
          t.deepEqual($$Number.Uint32.incUnsafe(n), result, undefined);
        };
        testIncInRange(0.0);
        testIncInRange(1.0);
        testIncInRange(2000000000.0);
        testIncInRange(0.0);
        testIncInRange(0.0 + 1.0);
        testIncInRange(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              testIncInRange(randomValue(undefined));
            });
        t.deepEqual($$Number.Uint32.inc($$Number.Uint32.maxValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Uint32.incExn($$Number.Uint32.maxValue);
              }));
        var testDecInRange = function (f) {
          var result = $$Number.Uint32.fromFloatExn(f - 1.0);
          var n = $$Number.Uint32.fromFloatExn(f);
          t.deepEqual($$Number.Uint32.dec(n), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.decExn(n), result, undefined);
          t.deepEqual($$Number.Uint32.decUnsafe(n), result, undefined);
        };
        testDecInRange(1.0);
        testDecInRange(2000000000.0);
        testDecInRange(0.0 + 1.0);
        testDecInRange(4294967295.0);
        testDecInRange(4294967295.0 - 1.0);
        TestUtils.loop100Fn(function () {
              testDecInRange(Math.floor(TestUtils.randomFloat(0.0 + 1.0, 4294967295.0)));
            });
        t.deepEqual($$Number.Uint32.dec($$Number.Uint32.minValue), undefined, undefined);
        TestUtils.assertOverflow(t, (function () {
                return $$Number.Uint32.decExn($$Number.Uint32.minValue);
              }));
      }));

Ava("test " + name + " bitwise", (function (t) {
        var assertNot1 = function (a, b) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          t.deepEqual($$Number.Uint32.lnot(a$1), b$1, undefined);
          t.deepEqual($$Number.Uint32.lnot(b$1), a$1, undefined);
        };
        assertNot1(2000000000.0, 2294967295.0);
        assertNot1(0.0, 4294967295.0);
        assertNot1(0.0 + 1.0, 4294967295.0 - 1.0);
        var assertNot2 = function (i) {
          var n = $$Number.Uint32.fromFloatExn(i);
          t.deepEqual($$Number.Uint32.lnot($$Number.Uint32.lnot(n)), n, undefined);
        };
        assertNot2(0.0);
        assertNot2(1.0);
        assertNot2(2000000000.0);
        assertNot2(0.0);
        assertNot2(4294967295.0);
        TestUtils.loop100Fn(function () {
              assertNot2(randomValue(undefined));
            });
        var assertAnd = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          var value$1 = $$Number.Uint32.fromFloatExn(value);
          t.deepEqual($$Number.Uint32.land(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Uint32.land(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Uint32.land(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.land(a$1, $$Number.Uint32.lnot(a$1)), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.land(b$1, $$Number.Uint32.lnot(b$1)), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.land(value$1, $$Number.Uint32.lnot(value$1)), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.land(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.land(b$1, a$1), value$1, undefined);
        };
        assertAnd(2000000000.0, 2294967295.0, 0.0);
        assertAnd(0.0, 4294967295.0, 0.0);
        assertAnd(0.0 + 1.0, 4294967295.0 - 1.0, 0.0);
        assertAnd(27852.0, 56331.0, 19464.0);
        TestUtils.loop100Fn(function () {
              var value = randomValue(undefined);
              assertAnd(value, value, value);
            });
        var assertOr = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          var value$1 = $$Number.Uint32.fromFloatExn(value);
          var oneBits = $$Number.Uint32.maxValue;
          t.deepEqual($$Number.Uint32.lor(a$1, a$1), a$1, undefined);
          t.deepEqual($$Number.Uint32.lor(b$1, b$1), b$1, undefined);
          t.deepEqual($$Number.Uint32.lor(value$1, value$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.lor(a$1, $$Number.Uint32.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lor(b$1, $$Number.Uint32.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lor(value$1, $$Number.Uint32.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.lor(b$1, a$1), value$1, undefined);
        };
        assertOr(27852.0, 56331.0, 64719.0);
        assertOr(2000000000.0, 2294967295.0, 4294967295.0);
        assertOr(0.0, 4294967295.0, 4294967295.0);
        assertOr(0.0 + 1.0, 4294967295.0 - 1.0, 4294967295.0);
        TestUtils.loop100Fn(function () {
              var value = randomValue(undefined);
              assertOr(value, value, value);
            });
        var assertXor = function (a, b, value) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromFloatExn(b);
          var value$1 = $$Number.Uint32.fromFloatExn(value);
          var oneBits = $$Number.Uint32.maxValue;
          t.deepEqual($$Number.Uint32.lxor(a$1, a$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.lxor(b$1, b$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.lxor(value$1, value$1), $$Number.Uint32.zero, undefined);
          t.deepEqual($$Number.Uint32.lxor(a$1, $$Number.Uint32.lnot(a$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lxor(b$1, $$Number.Uint32.lnot(b$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lxor(value$1, $$Number.Uint32.lnot(value$1)), oneBits, undefined);
          t.deepEqual($$Number.Uint32.lxor(a$1, b$1), value$1, undefined);
          t.deepEqual($$Number.Uint32.lxor(b$1, a$1), value$1, undefined);
        };
        assertXor(27852.0, 56331.0, 45255.0);
        assertXor(2000000000.0, 2294967295.0, 4294967295.0);
        assertXor(0.0, 4294967295.0, 4294967295.0);
        assertXor(0.0 + 1.0, 4294967295.0 - 1.0, 4294967295.0);
        TestUtils.loop100Fn(function () {
              var value = randomValue(undefined);
              assertXor(value, value, 0.0);
            });
        var modBits = function (i) {
          return ((i >>> 0) % bits);
        };
        var value = $$Number.Uint32.fromFloatExn(2000000000.0);
        for(var i = -32; i <= 64; ++i){
          t.deepEqual($$Number.Uint32.lsl(value, i), $$Number.Uint32.fromFloatExn(Belt_Array.getExn(valueShiftLeft, modBits(i))), undefined);
        }
        var testUnsignedShiftRight = function (value) {
          var n = $$Number.Uint32.fromFloatExn(value);
          for(var i = -32; i <= 64; ++i){
            t.deepEqual($$Number.Uint32.lsr(n, i), $$Number.Uint32.fromFloatExn(toUint32(((value | 0) >>> i) | 0)), undefined);
          }
        };
        testUnsignedShiftRight(2000000000.0);
        testUnsignedShiftRight(2294967295.0);
        TestUtils.loop100Fn(function () {
              testUnsignedShiftRight(randomValue(undefined));
            });
        var testShiftRight = function (value) {
          var n = $$Number.Uint32.fromFloatExn(value);
          for(var i = -32; i <= 64; ++i){
            t.deepEqual($$Number.Uint32.asr(n, i), $$Number.Uint32.fromFloatExn(Math.floor(value / Math.pow(2.0, modBits(i)))), undefined);
          }
        };
        testShiftRight(2000000000.0);
        testShiftRight(2294967295.0);
        TestUtils.loop100Fn(function () {
              testShiftRight(randomValue(undefined));
            });
        var value$1 = $$Number.Uint32.fromFloatExn(2000000000.0);
        for(var i$1 = -32; i$1 <= 64; ++i$1){
          t.deepEqual($$Number.Uint32.rsl(value$1, i$1), $$Number.Uint32.fromFloatExn(Belt_Array.getExn(valueRotateShiftLeft, modBits(i$1))), undefined);
        }
        var testRotateShiftLeft = function (value) {
          var n = $$Number.Uint32.fromFloatExn(value);
          for(var i = -32; i <= 64; ++i){
            t.deepEqual($$Number.Uint32.lnot($$Number.Uint32.rsl(n, i)), $$Number.Uint32.rsl($$Number.Uint32.lnot(n), i), undefined);
          }
        };
        testRotateShiftLeft(2000000000.0);
        testRotateShiftLeft(2294967295.0);
        TestUtils.loop100Fn(function () {
              testRotateShiftLeft(randomValue(undefined));
            });
        var testRotateShiftRight = function (value) {
          var n = $$Number.Uint32.fromFloatExn(value);
          for(var i = -32; i <= 64; ++i){
            t.deepEqual($$Number.Uint32.rsl(n, i), $$Number.Uint32.rsr(n, 32 - i | 0), undefined);
            t.deepEqual($$Number.Uint32.lnot($$Number.Uint32.rsr(n, i)), $$Number.Uint32.rsr($$Number.Uint32.lnot(n), i), undefined);
          }
        };
        testRotateShiftRight(2000000000.0);
        testRotateShiftRight(2294967295.0);
        TestUtils.loop100Fn(function () {
              testRotateShiftRight(randomValue(undefined));
            });
      }));

Ava("test " + name + " integer math", (function (t) {
        var testClz = function (n, result) {
          t.deepEqual($$Number.Uint32.clz(n), result, undefined);
        };
        testClz($$Number.Uint32.zero, 32);
        testClz($$Number.Uint32.minValue, 32);
        testClz($$Number.Uint32.maxValue, 0);
        for(var i = 0; i <= 31; ++i){
          testClz($$Number.Uint32.lsl($$Number.Uint32.one, i), (32 - i | 0) - 1 | 0);
        }
        t.deepEqual($$Number.Uint32.imul($$Number.Uint32.fromFloatExn(27852.0), $$Number.Uint32.fromFloatExn(56331.0)), $$Number.Uint32.fromFloatExn(27852.0 * 56331.0), undefined);
        var j = Math.pow(2.0, 32);
        TestUtils.loop100Fn(function () {
              var a = TestUtils.randomInt(0.0, 1000000.0);
              var b = TestUtils.randomInt(0.0, 1000000.0);
              var m = a * b % j;
              t.deepEqual($$Number.Uint32.imul($$Number.Uint32.fromIntExn(a), $$Number.Uint32.fromIntExn(b)), $$Number.Uint32.fromFloatExn(m), undefined);
              t.deepEqual($$Number.Uint32.imul($$Number.Uint32.fromIntExn(b), $$Number.Uint32.fromIntExn(a)), $$Number.Uint32.fromFloatExn(m), undefined);
            });
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = randomValue(undefined);
              t.deepEqual($$Number.Uint32.imul($$Number.Uint32.fromFloatExn(a), $$Number.Uint32.fromFloatExn(b)), $$Number.Uint32.imul($$Number.Uint32.fromFloatExn(b), $$Number.Uint32.fromFloatExn(a)), undefined);
            });
        var testPowInRange = function (a, b) {
          var result = $$Number.Uint32.fromFloatExn(Math.pow(a, b));
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromIntExn(b);
          t.deepEqual($$Number.Uint32.pow(a$1, b$1), Caml_option.some(result), undefined);
          t.deepEqual($$Number.Uint32.powExn(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.powUnsafe(a$1, b$1), result, undefined);
          t.deepEqual($$Number.Uint32.pow(a$1, $$Number.Uint32.zero), Caml_option.some($$Number.Uint32.one), undefined);
          t.deepEqual($$Number.Uint32.powExn(a$1, $$Number.Uint32.zero), $$Number.Uint32.one, undefined);
          t.deepEqual($$Number.Uint32.powUnsafe(a$1, $$Number.Uint32.zero), $$Number.Uint32.one, undefined);
          t.deepEqual($$Number.Uint32.pow(b$1, $$Number.Uint32.zero), Caml_option.some($$Number.Uint32.one), undefined);
          t.deepEqual($$Number.Uint32.powExn(b$1, $$Number.Uint32.zero), $$Number.Uint32.one, undefined);
          t.deepEqual($$Number.Uint32.powUnsafe(b$1, $$Number.Uint32.zero), $$Number.Uint32.one, undefined);
          t.deepEqual($$Number.Uint32.pow(a$1, $$Number.Uint32.one), Caml_option.some(a$1), undefined);
          t.deepEqual($$Number.Uint32.powExn(a$1, $$Number.Uint32.one), a$1, undefined);
          t.deepEqual($$Number.Uint32.powUnsafe(a$1, $$Number.Uint32.one), a$1, undefined);
          t.deepEqual($$Number.Uint32.pow(b$1, $$Number.Uint32.one), Caml_option.some(b$1), undefined);
          t.deepEqual($$Number.Uint32.powExn(b$1, $$Number.Uint32.one), b$1, undefined);
          t.deepEqual($$Number.Uint32.powUnsafe(b$1, $$Number.Uint32.one), b$1, undefined);
        };
        testPowInRange(0.0, 1);
        testPowInRange(1.0, 0);
        testPowInRange(2000000000.0, 0);
        testPowInRange(0.0, 1);
        testPowInRange(0.0, 2000000000);
        testPowInRange(4294967295.0, 1);
        var testPowOutOfRange = function (a, b) {
          var a$1 = $$Number.Uint32.fromFloatExn(a);
          var b$1 = $$Number.Uint32.fromIntExn(b);
          t.deepEqual($$Number.Uint32.pow(a$1, b$1), undefined, undefined);
          TestUtils.assertOverflow(t, (function () {
                  return $$Number.Uint32.powExn(a$1, b$1);
                }));
        };
        testPowOutOfRange(4294967295.0, 2);
        TestUtils.loop100Fn(function () {
              var a = randomValue(undefined);
              var b = TestUtils.randomPositiveSmallInt(undefined);
              var result = Math.pow(a, b);
              if (result >= 0.0 && result <= 4294967295.0) {
                return testPowInRange(a, b);
              } else {
                return testPowOutOfRange(a, b);
              }
            });
        TestUtils.loop100Fn(function () {
              var m = randomValue(undefined);
              var n = randomValue(undefined);
              var min = $$Number.Uint32.fromFloatExn(m < n ? m : n);
              var max = $$Number.Uint32.fromFloatExn(m > n ? m : n);
              if (min !== max) {
                return TestUtils.loopFn((function () {
                              var i = $$Number.Uint32.random(min, max);
                              t.true($$Number.Uint32.ge(i, min), undefined);
                              t.true($$Number.Uint32.lt(i, max), undefined);
                            }), 10);
              }
              
            });
      }));

var IntModule;

var isSigned = false;

var bits = 32;

var minValue = 0.0;

var maxValue = 4294967295.0;

var value = 2000000000.0;

var valueNot = 2294967295.0;

var less = 27852.0;

var greater = 56331.0;

var lessGreaterAnd = 19464.0;

var lessGreaterOr = 64719.0;

var lessGreaterXor = 45255.0;

var minInt = Js_int.min;

var maxInt = Js_int.max;

export {
  IntModule ,
  name ,
  isSigned ,
  bits ,
  minValue ,
  maxValue ,
  value ,
  valueNot ,
  valueShiftLeft ,
  valueRotateShiftLeft ,
  less ,
  greater ,
  lessGreaterAnd ,
  lessGreaterOr ,
  lessGreaterXor ,
  minInt ,
  maxInt ,
  toUint32 ,
  randomValue ,
  randomLargerFloat ,
}
/*  Not a pure module */
